
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062bc  080062bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080062bc  080062bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062bc  080062bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062bc  080062bc  000162bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080062c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000041c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000428  20000428  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143eb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ad9  00000000  00000000  00034427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  00036f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e40  00000000  00000000  00037e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022708  00000000  00000000  00038ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fac  00000000  00000000  0005b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3fc1  00000000  00000000  0007135c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014531d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ff8  00000000  00000000  00145370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006024 	.word	0x08006024

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08006024 	.word	0x08006024

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b08a      	sub	sp, #40	; 0x28
 80001e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001ea:	f107 031c 	add.w	r3, r7, #28
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
 8000202:	611a      	str	r2, [r3, #16]
 8000204:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000206:	4b2e      	ldr	r3, [pc, #184]	; (80002c0 <MX_ADC1_Init+0xdc>)
 8000208:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800020c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800020e:	4b2c      	ldr	r3, [pc, #176]	; (80002c0 <MX_ADC1_Init+0xdc>)
 8000210:	2200      	movs	r2, #0
 8000212:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000214:	4b2a      	ldr	r3, [pc, #168]	; (80002c0 <MX_ADC1_Init+0xdc>)
 8000216:	2210      	movs	r2, #16
 8000218:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800021a:	4b29      	ldr	r3, [pc, #164]	; (80002c0 <MX_ADC1_Init+0xdc>)
 800021c:	2200      	movs	r2, #0
 800021e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000220:	4b27      	ldr	r3, [pc, #156]	; (80002c0 <MX_ADC1_Init+0xdc>)
 8000222:	2201      	movs	r2, #1
 8000224:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000226:	4b26      	ldr	r3, [pc, #152]	; (80002c0 <MX_ADC1_Init+0xdc>)
 8000228:	2200      	movs	r2, #0
 800022a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800022e:	4b24      	ldr	r3, [pc, #144]	; (80002c0 <MX_ADC1_Init+0xdc>)
 8000230:	2200      	movs	r2, #0
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000234:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <MX_ADC1_Init+0xdc>)
 8000236:	2201      	movs	r2, #1
 8000238:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800023a:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <MX_ADC1_Init+0xdc>)
 800023c:	2200      	movs	r2, #0
 800023e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000240:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <MX_ADC1_Init+0xdc>)
 8000242:	2201      	movs	r2, #1
 8000244:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000246:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <MX_ADC1_Init+0xdc>)
 8000248:	2200      	movs	r2, #0
 800024a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800024e:	4b1c      	ldr	r3, [pc, #112]	; (80002c0 <MX_ADC1_Init+0xdc>)
 8000250:	2204      	movs	r2, #4
 8000252:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000254:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <MX_ADC1_Init+0xdc>)
 8000256:	2200      	movs	r2, #0
 8000258:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800025a:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <MX_ADC1_Init+0xdc>)
 800025c:	2200      	movs	r2, #0
 800025e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000260:	4817      	ldr	r0, [pc, #92]	; (80002c0 <MX_ADC1_Init+0xdc>)
 8000262:	f001 fac1 	bl	80017e8 <HAL_ADC_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800026c:	f000 f9d8 	bl	8000620 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000270:	2300      	movs	r3, #0
 8000272:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000274:	f107 031c 	add.w	r3, r7, #28
 8000278:	4619      	mov	r1, r3
 800027a:	4811      	ldr	r0, [pc, #68]	; (80002c0 <MX_ADC1_Init+0xdc>)
 800027c:	f001 ffda 	bl	8002234 <HAL_ADCEx_MultiModeConfigChannel>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000286:	f000 f9cb 	bl	8000620 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800028a:	2304      	movs	r3, #4
 800028c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800028e:	2301      	movs	r3, #1
 8000290:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000292:	2300      	movs	r3, #0
 8000294:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4619      	mov	r1, r3
 80002a6:	4806      	ldr	r0, [pc, #24]	; (80002c0 <MX_ADC1_Init+0xdc>)
 80002a8:	f001 fcd4 	bl	8001c54 <HAL_ADC_ConfigChannel>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80002b2:	f000 f9b5 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002b6:	bf00      	nop
 80002b8:	3728      	adds	r7, #40	; 0x28
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	20000028 	.word	0x20000028

080002c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08a      	sub	sp, #40	; 0x28
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80002e4:	d124      	bne.n	8000330 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <HAL_ADC_MspInit+0x74>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a13      	ldr	r2, [pc, #76]	; (8000338 <HAL_ADC_MspInit+0x74>)
 80002ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f0:	6153      	str	r3, [r2, #20]
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <HAL_ADC_MspInit+0x74>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002fa:	613b      	str	r3, [r7, #16]
 80002fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <HAL_ADC_MspInit+0x74>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <HAL_ADC_MspInit+0x74>)
 8000304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000308:	6153      	str	r3, [r2, #20]
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <HAL_ADC_MspInit+0x74>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000316:	2308      	movs	r3, #8
 8000318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800031a:	2303      	movs	r3, #3
 800031c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4619      	mov	r1, r3
 8000328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032c:	f002 f9ec 	bl	8002708 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000330:	bf00      	nop
 8000332:	3728      	adds	r7, #40	; 0x28
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40021000 	.word	0x40021000

0800033c <RotaryEncoderInit>:
#include "myprint.h"

volatile int16_t rotary_position;

void RotaryEncoderInit()
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]

	//Set up GPIO PF1 and PF3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000350:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <RotaryEncoderInit+0x68>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	4a13      	ldr	r2, [pc, #76]	; (80003a4 <RotaryEncoderInit+0x68>)
 8000356:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800035a:	6153      	str	r3, [r2, #20]
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <RotaryEncoderInit+0x68>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000364:	603b      	str	r3, [r7, #0]
 8000366:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000368:	2308      	movs	r3, #8
 800036a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800036c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000370:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000376:	2303      	movs	r3, #3
 8000378:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4619      	mov	r1, r3
 800037e:	480a      	ldr	r0, [pc, #40]	; (80003a8 <RotaryEncoderInit+0x6c>)
 8000380:	f002 f9c2 	bl	8002708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000384:	2304      	movs	r3, #4
 8000386:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000388:	2300      	movs	r3, #0
 800038a:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	4619      	mov	r1, r3
 8000390:	4805      	ldr	r0, [pc, #20]	; (80003a8 <RotaryEncoderInit+0x6c>)
 8000392:	f002 f9b9 	bl	8002708 <HAL_GPIO_Init>

    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000396:	2009      	movs	r0, #9
 8000398:	f002 f99b 	bl	80026d2 <HAL_NVIC_EnableIRQ>

}
 800039c:	bf00      	nop
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000
 80003a8:	48001400 	.word	0x48001400

080003ac <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <EXTI3_IRQHandler+0x48>)
 80003b2:	2208      	movs	r2, #8
 80003b4:	615a      	str	r2, [r3, #20]

	myprint("PRINT PRINT PRINT PLEASE WORK\r\n");
 80003b6:	4810      	ldr	r0, [pc, #64]	; (80003f8 <EXTI3_IRQHandler+0x4c>)
 80003b8:	f000 f938 	bl	800062c <myprint>

	if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_2))	//Forward
 80003bc:	2104      	movs	r1, #4
 80003be:	480f      	ldr	r0, [pc, #60]	; (80003fc <EXTI3_IRQHandler+0x50>)
 80003c0:	f002 fb2c 	bl	8002a1c <HAL_GPIO_ReadPin>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d009      	beq.n	80003de <EXTI3_IRQHandler+0x32>
	{
		rotary_position++;
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <EXTI3_IRQHandler+0x54>)
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	b21b      	sxth	r3, r3
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	3301      	adds	r3, #1
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	b21a      	sxth	r2, r3
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <EXTI3_IRQHandler+0x54>)
 80003da:	801a      	strh	r2, [r3, #0]
	else		//Backward
	{
		rotary_position--;
	}

}
 80003dc:	e008      	b.n	80003f0 <EXTI3_IRQHandler+0x44>
		rotary_position--;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <EXTI3_IRQHandler+0x54>)
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	b21b      	sxth	r3, r3
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	3b01      	subs	r3, #1
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	b21a      	sxth	r2, r3
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <EXTI3_IRQHandler+0x54>)
 80003ee:	801a      	strh	r2, [r3, #0]
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40010400 	.word	0x40010400
 80003f8:	0800603c 	.word	0x0800603c
 80003fc:	48001400 	.word	0x48001400
 8000400:	20000094 	.word	0x20000094

08000404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800040a:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_GPIO_Init+0x74>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a1a      	ldr	r2, [pc, #104]	; (8000478 <MX_GPIO_Init+0x74>)
 8000410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_GPIO_Init+0x74>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <MX_GPIO_Init+0x74>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a14      	ldr	r2, [pc, #80]	; (8000478 <MX_GPIO_Init+0x74>)
 8000428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <MX_GPIO_Init+0x74>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_GPIO_Init+0x74>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <MX_GPIO_Init+0x74>)
 8000440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000444:	6153      	str	r3, [r2, #20]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_GPIO_Init+0x74>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_GPIO_Init+0x74>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a08      	ldr	r2, [pc, #32]	; (8000478 <MX_GPIO_Init+0x74>)
 8000458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_GPIO_Init+0x74>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000482:	f001 f923 	bl	80016cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000486:	f000 f85d 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048a:	f7ff ffbb 	bl	8000404 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800048e:	f001 f875 	bl	800157c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000492:	f000 ff15 	bl	80012c0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000496:	f7ff fea5 	bl	80001e4 <MX_ADC1_Init>
  MX_TIM4_Init();
 800049a:	f000 ff77 	bl	800138c <MX_TIM4_Init>
/*
  Motor_Start();
  Motor_SetDirection(MD_Left);
  Motor_SetSpeed(200);
*/
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800049e:	213c      	movs	r1, #60	; 0x3c
 80004a0:	4824      	ldr	r0, [pc, #144]	; (8000534 <main+0xb8>)
 80004a2:	f004 f8ab 	bl	80045fc <HAL_TIM_Encoder_Start>

  myprint("Starting USB...\n\r");
 80004a6:	4824      	ldr	r0, [pc, #144]	; (8000538 <main+0xbc>)
 80004a8:	f000 f8c0 	bl	800062c <myprint>
  myusb_Initialize();
 80004ac:	f000 f920 	bl	80006f0 <myusb_Initialize>

  RotaryEncoderInit();
 80004b0:	f7ff ff44 	bl	800033c <RotaryEncoderInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int j = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	607b      	str	r3, [r7, #4]
	  for (int i = 0; i < 20000; i++)
 80004b8:	2300      	movs	r3, #0
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	e005      	b.n	80004ca <main+0x4e>
	  {
		  j++;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3301      	adds	r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
	  for (int i = 0; i < 20000; i++)
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	3301      	adds	r3, #1
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80004d0:	4293      	cmp	r3, r2
 80004d2:	ddf4      	ble.n	80004be <main+0x42>
	  }

	  //myprint_hex(rotary_position);


	  report.members.throttle = ++report.members.throttle % 255;
 80004d4:	4b19      	ldr	r3, [pc, #100]	; (800053c <main+0xc0>)
 80004d6:	785b      	ldrb	r3, [r3, #1]
 80004d8:	3301      	adds	r3, #1
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <main+0xc0>)
 80004de:	705a      	strb	r2, [r3, #1]
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <main+0xc0>)
 80004e2:	785a      	ldrb	r2, [r3, #1]
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <main+0xc4>)
 80004e6:	fba3 1302 	umull	r1, r3, r3, r2
 80004ea:	09d9      	lsrs	r1, r3, #7
 80004ec:	460b      	mov	r3, r1
 80004ee:	021b      	lsls	r3, r3, #8
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <main+0xc0>)
 80004f8:	705a      	strb	r2, [r3, #1]
	  report.members.brake = ++report.members.brake % 255;
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <main+0xc0>)
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	3301      	adds	r3, #1
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <main+0xc0>)
 8000504:	709a      	strb	r2, [r3, #2]
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <main+0xc0>)
 8000508:	789a      	ldrb	r2, [r3, #2]
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <main+0xc4>)
 800050c:	fba3 1302 	umull	r1, r3, r3, r2
 8000510:	09d9      	lsrs	r1, r3, #7
 8000512:	460b      	mov	r3, r1
 8000514:	021b      	lsls	r3, r3, #8
 8000516:	1a5b      	subs	r3, r3, r1
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <main+0xc0>)
 800051e:	709a      	strb	r2, [r3, #2]
	  report.members.steering = -1000;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <main+0xc0>)
 8000522:	2200      	movs	r2, #0
 8000524:	f042 0218 	orr.w	r2, r2, #24
 8000528:	70da      	strb	r2, [r3, #3]
 800052a:	2200      	movs	r2, #0
 800052c:	f062 0203 	orn	r2, r2, #3
 8000530:	711a      	strb	r2, [r3, #4]
  {
 8000532:	e7bf      	b.n	80004b4 <main+0x38>
 8000534:	200002e4 	.word	0x200002e4
 8000538:	0800605c 	.word	0x0800605c
 800053c:	20000220 	.word	0x20000220
 8000540:	80808081 	.word	0x80808081

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b0a6      	sub	sp, #152	; 0x98
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800054e:	2228      	movs	r2, #40	; 0x28
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f005 fd1c 	bl	8005f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2258      	movs	r2, #88	; 0x58
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f005 fd0e 	bl	8005f90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000574:	2303      	movs	r3, #3
 8000576:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000578:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800057c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000582:	2310      	movs	r3, #16
 8000584:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000596:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800059a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fa67 	bl	8002a7c <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005b4:	f000 f834 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005d2:	2101      	movs	r1, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 faa5 	bl	8003b24 <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005e0:	f000 f81e 	bl	8000620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC12
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <SystemClock_Config+0xd8>)
 80005e6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 80005e8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80005ec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80005ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80005f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f8:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 80005fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fcc4 	bl	8003f90 <HAL_RCCEx_PeriphCLKConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800060e:	f000 f807 	bl	8000620 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3798      	adds	r7, #152	; 0x98
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	00220084 	.word	0x00220084

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <myprint>:
#include "stdio.h"
#include "string.h"
#include "stdlib.h"

void myprint(char* string)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0b6      	sub	sp, #216	; 0xd8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	uint8_t buffer[200];
	uint16_t len = strlen(string);
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff fdcd 	bl	80001d4 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2

	for(int i = 0; i < len; i++)
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000646:	e010      	b.n	800066a <myprint+0x3e>
	{
		buffer[i] = string[i];
 8000648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	4413      	add	r3, r2
 8000650:	7819      	ldrb	r1, [r3, #0]
 8000652:	f107 0208 	add.w	r2, r7, #8
 8000656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++)
 8000660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000664:	3301      	adds	r3, #1
 8000666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800066a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800066e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000672:	429a      	cmp	r2, r3
 8000674:	dbe8      	blt.n	8000648 <myprint+0x1c>
	}

	HAL_UART_Transmit(&huart3, buffer, len, 0xFFFF);
 8000676:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 800067a:	f107 0108 	add.w	r1, r7, #8
 800067e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <myprint+0x64>)
 8000684:	f005 f82c 	bl	80056e0 <HAL_UART_Transmit>
}
 8000688:	bf00      	nop
 800068a:	37d8      	adds	r7, #216	; 0xd8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200003a0 	.word	0x200003a0

08000694 <myprint_hex>:

void myprint_hex(int reg)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	char buffer[20];
	for (int i = 0; i < 20; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
 80006a0:	e008      	b.n	80006b4 <myprint_hex+0x20>
	{
		buffer[i] = '\0';
 80006a2:	f107 0208 	add.w	r2, r7, #8
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	4413      	add	r3, r2
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++)
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3301      	adds	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	2b13      	cmp	r3, #19
 80006b8:	ddf3      	ble.n	80006a2 <myprint_hex+0xe>
	}
	itoa(reg, buffer, 16);
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2210      	movs	r2, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f005 fc62 	bl	8005f8c <itoa>
	HAL_UART_Transmit(&huart3, buffer, 20, 0xFFFF);
 80006c8:	f107 0108 	add.w	r1, r7, #8
 80006cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d0:	2214      	movs	r2, #20
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <myprint_hex+0x54>)
 80006d4:	f005 f804 	bl	80056e0 <HAL_UART_Transmit>

	myprint("\r\n");
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <myprint_hex+0x58>)
 80006da:	f7ff ffa7 	bl	800062c <myprint>
}
 80006de:	bf00      	nop
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200003a0 	.word	0x200003a0
 80006ec:	08006070 	.word	0x08006070

080006f0 <myusb_Initialize>:
/*
 * Memory locations found in stm32f303xe.h
 */

void myusb_Initialize(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
	//Initialize Descriptors
	DescriptorInitialization();
 80006f6:	f000 f8bd 	bl	8000874 <DescriptorInitialization>

	//Initialize data in report
	report.members.brake = 255;
 80006fa:	4b55      	ldr	r3, [pc, #340]	; (8000850 <myusb_Initialize+0x160>)
 80006fc:	22ff      	movs	r2, #255	; 0xff
 80006fe:	709a      	strb	r2, [r3, #2]
	report.members.throttle = 0;
 8000700:	4b53      	ldr	r3, [pc, #332]	; (8000850 <myusb_Initialize+0x160>)
 8000702:	2200      	movs	r2, #0
 8000704:	705a      	strb	r2, [r3, #1]
	report.members.buttons = 0xF0;
 8000706:	4b52      	ldr	r3, [pc, #328]	; (8000850 <myusb_Initialize+0x160>)
 8000708:	22f0      	movs	r2, #240	; 0xf0
 800070a:	701a      	strb	r2, [r3, #0]
	report.members.steering = 500;
 800070c:	4b50      	ldr	r3, [pc, #320]	; (8000850 <myusb_Initialize+0x160>)
 800070e:	2200      	movs	r2, #0
 8000710:	f062 020b 	orn	r2, r2, #11
 8000714:	70da      	strb	r2, [r3, #3]
 8000716:	2200      	movs	r2, #0
 8000718:	f042 0201 	orr.w	r2, r2, #1
 800071c:	711a      	strb	r2, [r3, #4]

	//Map USBz to registers
	USBz = USB;
 800071e:	4b4d      	ldr	r3, [pc, #308]	; (8000854 <myusb_Initialize+0x164>)
 8000720:	4a4d      	ldr	r2, [pc, #308]	; (8000858 <myusb_Initialize+0x168>)
 8000722:	601a      	str	r2, [r3, #0]
	my_btable = (BTableLayout*)0x40006000;
 8000724:	4b4d      	ldr	r3, [pc, #308]	; (800085c <myusb_Initialize+0x16c>)
 8000726:	4a4e      	ldr	r2, [pc, #312]	; (8000860 <myusb_Initialize+0x170>)
 8000728:	601a      	str	r2, [r3, #0]

	//Enable clocks
	__HAL_RCC_USB_CLK_ENABLE();
 800072a:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <myusb_Initialize+0x174>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	4a4d      	ldr	r2, [pc, #308]	; (8000864 <myusb_Initialize+0x174>)
 8000730:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000734:	61d3      	str	r3, [r2, #28]
 8000736:	4b4b      	ldr	r3, [pc, #300]	; (8000864 <myusb_Initialize+0x174>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

	//Initialize interrupts + remapping
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8000742:	4b49      	ldr	r3, [pc, #292]	; (8000868 <myusb_Initialize+0x178>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a48      	ldr	r2, [pc, #288]	; (8000868 <myusb_Initialize+0x178>)
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	204a      	movs	r0, #74	; 0x4a
 8000754:	f001 ffa1 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8000758:	204a      	movs	r0, #74	; 0x4a
 800075a:	f001 ffba 	bl	80026d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	204b      	movs	r0, #75	; 0x4b
 8000764:	f001 ff99 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8000768:	204b      	movs	r0, #75	; 0x4b
 800076a:	f001 ffb2 	bl	80026d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USBWakeUp_RMP_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	204c      	movs	r0, #76	; 0x4c
 8000774:	f001 ff91 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USBWakeUp_RMP_IRQn);
 8000778:	204c      	movs	r0, #76	; 0x4c
 800077a:	f001 ffaa 	bl	80026d2 <HAL_NVIC_EnableIRQ>

	//Configure USB GPIO
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <myusb_Initialize+0x174>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a38      	ldr	r2, [pc, #224]	; (8000864 <myusb_Initialize+0x174>)
 8000784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b36      	ldr	r3, [pc, #216]	; (8000864 <myusb_Initialize+0x174>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007aa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80007b8:	230e      	movs	r3, #14
 80007ba:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	4619      	mov	r1, r3
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f001 ff9f 	bl	8002708 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	4619      	mov	r1, r3
 80007e0:	4822      	ldr	r0, [pc, #136]	; (800086c <myusb_Initialize+0x17c>)
 80007e2:	f001 ff91 	bl	8002708 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2140      	movs	r1, #64	; 0x40
 80007ea:	4820      	ldr	r0, [pc, #128]	; (800086c <myusb_Initialize+0x17c>)
 80007ec:	f002 f92e 	bl	8002a4c <HAL_GPIO_WritePin>

	//Start USB peripheral
	USBz->CNTR = 1;	//Start transceiver
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <myusb_Initialize+0x164>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2201      	movs	r2, #1
 80007f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	for (int i = 0; i < 1000; i++)	//Delay according to datasheet
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
 80007fe:	e003      	b.n	8000808 <myusb_Initialize+0x118>
	{
		__asm volatile("nop");
 8000800:	bf00      	nop
	for (int i = 0; i < 1000; i++)	//Delay according to datasheet
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3301      	adds	r3, #1
 8000806:	61fb      	str	r3, [r7, #28]
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800080e:	dbf7      	blt.n	8000800 <myusb_Initialize+0x110>
	}

	//De-assert reset
	USBz->CNTR = 0;
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <myusb_Initialize+0x164>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2200      	movs	r2, #0
 8000816:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	//Clear pending interrupts
	USBz->ISTR = 0U;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <myusb_Initialize+0x164>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2200      	movs	r2, #0
 8000820:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	//Enable these USB Interrupts
	USBz->CNTR |= USB_CNTR_RESETM | USB_CNTR_CTRM | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ESOFM;
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <myusb_Initialize+0x164>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800082c:	b299      	uxth	r1, r3
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <myusb_Initialize+0x164>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <myusb_Initialize+0x180>)
 8000834:	430b      	orrs	r3, r1
 8000836:	b29b      	uxth	r3, r3
 8000838:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40

	//Enable pull up to start enumeration
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2140      	movs	r1, #64	; 0x40
 8000840:	480a      	ldr	r0, [pc, #40]	; (800086c <myusb_Initialize+0x17c>)
 8000842:	f002 f903 	bl	8002a4c <HAL_GPIO_WritePin>

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000220 	.word	0x20000220
 8000854:	20000098 	.word	0x20000098
 8000858:	40005c00 	.word	0x40005c00
 800085c:	2000009c 	.word	0x2000009c
 8000860:	40006000 	.word	0x40006000
 8000864:	40021000 	.word	0x40021000
 8000868:	40010000 	.word	0x40010000
 800086c:	48001800 	.word	0x48001800
 8000870:	ffff9d00 	.word	0xffff9d00

08000874 <DescriptorInitialization>:

void DescriptorInitialization(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	//Just device descriptor until I reach further requests
	device.descriptor.bLength = 18;
 8000878:	4b46      	ldr	r3, [pc, #280]	; (8000994 <DescriptorInitialization+0x120>)
 800087a:	2212      	movs	r2, #18
 800087c:	701a      	strb	r2, [r3, #0]
	device.descriptor.bDescriptorType = 0x01;
 800087e:	4b45      	ldr	r3, [pc, #276]	; (8000994 <DescriptorInitialization+0x120>)
 8000880:	2201      	movs	r2, #1
 8000882:	705a      	strb	r2, [r3, #1]
	device.descriptor.bcdUSB = 0x0110;
 8000884:	4b43      	ldr	r3, [pc, #268]	; (8000994 <DescriptorInitialization+0x120>)
 8000886:	f44f 7288 	mov.w	r2, #272	; 0x110
 800088a:	805a      	strh	r2, [r3, #2]
	device.descriptor.bDeviceClass = 0x00;
 800088c:	4b41      	ldr	r3, [pc, #260]	; (8000994 <DescriptorInitialization+0x120>)
 800088e:	2200      	movs	r2, #0
 8000890:	711a      	strb	r2, [r3, #4]
	device.descriptor.bDeviceSubClass = 0x00;
 8000892:	4b40      	ldr	r3, [pc, #256]	; (8000994 <DescriptorInitialization+0x120>)
 8000894:	2200      	movs	r2, #0
 8000896:	715a      	strb	r2, [r3, #5]
	device.descriptor.bDeviceProtocol = 0x00;
 8000898:	4b3e      	ldr	r3, [pc, #248]	; (8000994 <DescriptorInitialization+0x120>)
 800089a:	2200      	movs	r2, #0
 800089c:	719a      	strb	r2, [r3, #6]
	device.descriptor.bMaxPacketSize0 = 64;
 800089e:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <DescriptorInitialization+0x120>)
 80008a0:	2240      	movs	r2, #64	; 0x40
 80008a2:	71da      	strb	r2, [r3, #7]
	device.descriptor.idVendor = 0x03ED;
 80008a4:	4b3b      	ldr	r3, [pc, #236]	; (8000994 <DescriptorInitialization+0x120>)
 80008a6:	f240 32ed 	movw	r2, #1005	; 0x3ed
 80008aa:	811a      	strh	r2, [r3, #8]
	device.descriptor.idProduct = 0x2FF4;
 80008ac:	4b39      	ldr	r3, [pc, #228]	; (8000994 <DescriptorInitialization+0x120>)
 80008ae:	f642 72f4 	movw	r2, #12276	; 0x2ff4
 80008b2:	815a      	strh	r2, [r3, #10]
	device.descriptor.bcdDevice = 0x0100;
 80008b4:	4b37      	ldr	r3, [pc, #220]	; (8000994 <DescriptorInitialization+0x120>)
 80008b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ba:	819a      	strh	r2, [r3, #12]
	device.descriptor.iManufacturer = 0x00;
 80008bc:	4b35      	ldr	r3, [pc, #212]	; (8000994 <DescriptorInitialization+0x120>)
 80008be:	2200      	movs	r2, #0
 80008c0:	739a      	strb	r2, [r3, #14]
	device.descriptor.iProduct = 0x00;
 80008c2:	4b34      	ldr	r3, [pc, #208]	; (8000994 <DescriptorInitialization+0x120>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	73da      	strb	r2, [r3, #15]
	device.descriptor.iSerialNumber = 0x00;
 80008c8:	4b32      	ldr	r3, [pc, #200]	; (8000994 <DescriptorInitialization+0x120>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	741a      	strb	r2, [r3, #16]
	device.descriptor.bNumConfigurations = 1;
 80008ce:	4b31      	ldr	r3, [pc, #196]	; (8000994 <DescriptorInitialization+0x120>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	745a      	strb	r2, [r3, #17]

	configuration.descriptor.bLength = 0x09;
 80008d4:	4b30      	ldr	r3, [pc, #192]	; (8000998 <DescriptorInitialization+0x124>)
 80008d6:	2209      	movs	r2, #9
 80008d8:	701a      	strb	r2, [r3, #0]
	configuration.descriptor.bDescriptorType = 0x02;
 80008da:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <DescriptorInitialization+0x124>)
 80008dc:	2202      	movs	r2, #2
 80008de:	705a      	strb	r2, [r3, #1]
	configuration.descriptor.wTotalLength = 0x22;
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <DescriptorInitialization+0x124>)
 80008e2:	2222      	movs	r2, #34	; 0x22
 80008e4:	805a      	strh	r2, [r3, #2]
	configuration.descriptor.bNumInterfaces = 0x01;
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <DescriptorInitialization+0x124>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	711a      	strb	r2, [r3, #4]
	configuration.descriptor.bConfigurationValue = 0x01;
 80008ec:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <DescriptorInitialization+0x124>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	715a      	strb	r2, [r3, #5]
	configuration.descriptor.iConfiguration = 0x00;
 80008f2:	4b29      	ldr	r3, [pc, #164]	; (8000998 <DescriptorInitialization+0x124>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	719a      	strb	r2, [r3, #6]
	configuration.descriptor.bmAttributes = 0xC0;
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <DescriptorInitialization+0x124>)
 80008fa:	22c0      	movs	r2, #192	; 0xc0
 80008fc:	71da      	strb	r2, [r3, #7]
	configuration.descriptor.MaxPower = 0x00;
 80008fe:	4b26      	ldr	r3, [pc, #152]	; (8000998 <DescriptorInitialization+0x124>)
 8000900:	2200      	movs	r2, #0
 8000902:	721a      	strb	r2, [r3, #8]

	interface.descriptor.bLength = 0x09;
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <DescriptorInitialization+0x128>)
 8000906:	2209      	movs	r2, #9
 8000908:	701a      	strb	r2, [r3, #0]
	interface.descriptor.bDescriptorType = 0x04;
 800090a:	4b24      	ldr	r3, [pc, #144]	; (800099c <DescriptorInitialization+0x128>)
 800090c:	2204      	movs	r2, #4
 800090e:	705a      	strb	r2, [r3, #1]
	interface.descriptor.bInterfaceNumber = 0x00;
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <DescriptorInitialization+0x128>)
 8000912:	2200      	movs	r2, #0
 8000914:	709a      	strb	r2, [r3, #2]
	interface.descriptor.bAlternateSetting = 0x00;
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <DescriptorInitialization+0x128>)
 8000918:	2200      	movs	r2, #0
 800091a:	70da      	strb	r2, [r3, #3]
	interface.descriptor.bNumEndpoints = 0x01;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <DescriptorInitialization+0x128>)
 800091e:	2201      	movs	r2, #1
 8000920:	711a      	strb	r2, [r3, #4]
	interface.descriptor.bInterfaceClass = 0x03;
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <DescriptorInitialization+0x128>)
 8000924:	2203      	movs	r2, #3
 8000926:	715a      	strb	r2, [r3, #5]
	interface.descriptor.bInterfaceSubClass = 0x00;
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <DescriptorInitialization+0x128>)
 800092a:	2200      	movs	r2, #0
 800092c:	719a      	strb	r2, [r3, #6]
	interface.descriptor.bInterfaceProtocol = 0x00;
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <DescriptorInitialization+0x128>)
 8000930:	2200      	movs	r2, #0
 8000932:	71da      	strb	r2, [r3, #7]
	interface.descriptor.iInterface = 0x00;
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <DescriptorInitialization+0x128>)
 8000936:	2200      	movs	r2, #0
 8000938:	721a      	strb	r2, [r3, #8]

	endpoint.descriptor.bLength = 0x07;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <DescriptorInitialization+0x12c>)
 800093c:	2207      	movs	r2, #7
 800093e:	701a      	strb	r2, [r3, #0]
	endpoint.descriptor.bDescriptorType = 0x05;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <DescriptorInitialization+0x12c>)
 8000942:	2205      	movs	r2, #5
 8000944:	705a      	strb	r2, [r3, #1]
	endpoint.descriptor.bEndpointAddress = 0x81;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <DescriptorInitialization+0x12c>)
 8000948:	2281      	movs	r2, #129	; 0x81
 800094a:	709a      	strb	r2, [r3, #2]
	endpoint.descriptor.bmAttributes = 0x03;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <DescriptorInitialization+0x12c>)
 800094e:	2203      	movs	r2, #3
 8000950:	70da      	strb	r2, [r3, #3]
	endpoint.descriptor.wMaxPacketSize = 0x40; //64 bytes
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <DescriptorInitialization+0x12c>)
 8000954:	2240      	movs	r2, #64	; 0x40
 8000956:	809a      	strh	r2, [r3, #4]
	endpoint.descriptor.bInterval = 0xA;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <DescriptorInitialization+0x12c>)
 800095a:	220a      	movs	r2, #10
 800095c:	719a      	strb	r2, [r3, #6]

	hid.descriptor.bLength = 0x09;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <DescriptorInitialization+0x130>)
 8000960:	2209      	movs	r2, #9
 8000962:	701a      	strb	r2, [r3, #0]
	hid.descriptor.bDescriptorType = 0x21;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <DescriptorInitialization+0x130>)
 8000966:	2221      	movs	r2, #33	; 0x21
 8000968:	705a      	strb	r2, [r3, #1]
	hid.descriptor.bcdHID = 0x111;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <DescriptorInitialization+0x130>)
 800096c:	f240 1211 	movw	r2, #273	; 0x111
 8000970:	805a      	strh	r2, [r3, #2]
	hid.descriptor.bCountryCode = 0x00;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <DescriptorInitialization+0x130>)
 8000974:	2200      	movs	r2, #0
 8000976:	711a      	strb	r2, [r3, #4]
	hid.descriptor.bNumDescriptors = 0x01;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <DescriptorInitialization+0x130>)
 800097a:	2201      	movs	r2, #1
 800097c:	715a      	strb	r2, [r3, #5]
	hid.descriptor.bDescriptorTypeReport = 0x22;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <DescriptorInitialization+0x130>)
 8000980:	2222      	movs	r2, #34	; 0x22
 8000982:	719a      	strb	r2, [r3, #6]
	hid.descriptor.wDescriptorLength = 0x3F; //63 bytes
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <DescriptorInitialization+0x130>)
 8000986:	223f      	movs	r2, #63	; 0x3f
 8000988:	71da      	strb	r2, [r3, #7]
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	200001e0 	.word	0x200001e0
 8000998:	200001f4 	.word	0x200001f4
 800099c:	20000200 	.word	0x20000200
 80009a0:	2000020c 	.word	0x2000020c
 80009a4:	20000214 	.word	0x20000214

080009a8 <ReadEndpoint>:
/*-----------------------------------*/
/* -----------FUNCTIONS--------------*/
/*-----------------------------------*/

void ReadEndpoint(uint8_t endpoint, uint8_t num_bytes)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b087      	sub	sp, #28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	460a      	mov	r2, r1
 80009b2:	71fb      	strb	r3, [r7, #7]
 80009b4:	4613      	mov	r3, r2
 80009b6:	71bb      	strb	r3, [r7, #6]
	if (num_bytes != 0)
 80009b8:	79bb      	ldrb	r3, [r7, #6]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d02a      	beq.n	8000a14 <ReadEndpoint+0x6c>
	{
		if ((num_bytes % 2) != 0)
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <ReadEndpoint+0x28>
		{
			num_bytes += 1;
 80009ca:	79bb      	ldrb	r3, [r7, #6]
 80009cc:	3301      	adds	r3, #1
 80009ce:	71bb      	strb	r3, [r7, #6]
		}
		//Get offset to endpoint n RX buffer
		uint16_t offset = *(volatile uint16_t*)((endpoint*8 + 4) + 0x40006000);
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	00da      	lsls	r2, r3, #3
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <ReadEndpoint+0x78>)
 80009d6:	4413      	add	r3, r2
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	827b      	strh	r3, [r7, #18]

		//Point to RX buffer
		volatile uint16_t* location = ((uint16_t*)(0x40006000 + offset));
 80009dc:	8a7b      	ldrh	r3, [r7, #18]
 80009de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009e2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80009e6:	60fb      	str	r3, [r7, #12]

		for (int i = 0; i < (num_bytes/2); i++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	e00b      	b.n	8000a06 <ReadEndpoint+0x5e>
		{
			buffer[i] = ((uint16_t*)location)[i];
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	4413      	add	r3, r2
 80009f6:	8819      	ldrh	r1, [r3, #0]
 80009f8:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <ReadEndpoint+0x7c>)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < (num_bytes/2); i++)
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3301      	adds	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	4293      	cmp	r3, r2
 8000a12:	dbec      	blt.n	80009ee <ReadEndpoint+0x46>
		}
	}
}
 8000a14:	bf00      	nop
 8000a16:	371c      	adds	r7, #28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	40006004 	.word	0x40006004
 8000a24:	200000a0 	.word	0x200000a0

08000a28 <WriteEndpoint>:

void WriteEndpoint(uint8_t endpoint, uint16_t* data_buffer, uint8_t num_bytes)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	71bb      	strb	r3, [r7, #6]
	//Get offset to endpoint n TX buffer
	uint16_t offset = *(volatile uint16_t*)((endpoint*8) + 0x40006000);
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000a3e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	827b      	strh	r3, [r7, #18]

	//Point to TX buffer
	volatile uint16_t* location = ((uint16_t*)(0x40006000 + offset));
 8000a48:	8a7b      	ldrh	r3, [r7, #18]
 8000a4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a4e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000a52:	60fb      	str	r3, [r7, #12]

	my_btable[endpoint].COUNT_TX = num_bytes;
 8000a54:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <WriteEndpoint+0x110>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	4413      	add	r3, r2
 8000a5e:	79ba      	ldrb	r2, [r7, #6]
 8000a60:	b292      	uxth	r2, r2
 8000a62:	805a      	strh	r2, [r3, #2]

	if ((num_bytes%2) != 0)
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d005      	beq.n	8000a7c <WriteEndpoint+0x54>
		num_bytes = (num_bytes/2) + 1;
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	085b      	lsrs	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	3301      	adds	r3, #1
 8000a78:	71bb      	strb	r3, [r7, #6]
 8000a7a:	e002      	b.n	8000a82 <WriteEndpoint+0x5a>
	else
		num_bytes = num_bytes/2;
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	085b      	lsrs	r3, r3, #1
 8000a80:	71bb      	strb	r3, [r7, #6]

	for (int i = 0; i < num_bytes; i++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e00c      	b.n	8000aa2 <WriteEndpoint+0x7a>
	{
		location[i] = data_buffer[i];
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	683a      	ldr	r2, [r7, #0]
 8000a8e:	441a      	add	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	68f9      	ldr	r1, [r7, #12]
 8000a96:	440b      	add	r3, r1
 8000a98:	8812      	ldrh	r2, [r2, #0]
 8000a9a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dbee      	blt.n	8000a88 <WriteEndpoint+0x60>
	}


	//Set STAT_TX to VALID. Mask to avoid toggling the toggle bits.
	switch(endpoint)
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d02a      	beq.n	8000b06 <WriteEndpoint+0xde>
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	dc3a      	bgt.n	8000b2a <WriteEndpoint+0x102>
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <WriteEndpoint+0x96>
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d012      	beq.n	8000ae2 <WriteEndpoint+0xba>
		break;
	case 2:
		USBz->EP2R = (1 << 4) | (USBz->EP2R & 0x8F9F);
		break;
	}
}
 8000abc:	e035      	b.n	8000b2a <WriteEndpoint+0x102>
		USBz->EP0R = (1 << 4) | (USBz->EP0R & 0x8F9F);
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <WriteEndpoint+0x114>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ad0:	b21b      	sxth	r3, r3
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <WriteEndpoint+0x114>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	b292      	uxth	r2, r2
 8000ade:	801a      	strh	r2, [r3, #0]
		break;
 8000ae0:	e023      	b.n	8000b2a <WriteEndpoint+0x102>
		USBz->EP1R = (1 << 4) | (USBz->EP1R & 0x8F9F);
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <WriteEndpoint+0x114>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	889b      	ldrh	r3, [r3, #4]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	b21a      	sxth	r2, r3
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <WriteEndpoint+0x114>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	b292      	uxth	r2, r2
 8000b02:	809a      	strh	r2, [r3, #4]
		break;
 8000b04:	e011      	b.n	8000b2a <WriteEndpoint+0x102>
		USBz->EP2R = (1 << 4) | (USBz->EP2R & 0x8F9F);
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <WriteEndpoint+0x114>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	891b      	ldrh	r3, [r3, #8]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b18:	b21b      	sxth	r3, r3
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <WriteEndpoint+0x114>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	b292      	uxth	r2, r2
 8000b26:	811a      	strh	r2, [r3, #8]
		break;
 8000b28:	bf00      	nop
}
 8000b2a:	bf00      	nop
 8000b2c:	371c      	adds	r7, #28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000009c 	.word	0x2000009c
 8000b3c:	20000098 	.word	0x20000098

08000b40 <USB_HP_IRQHandler>:
/* -----------INTERRUPTS-------------*/
/*-----------------------------------*/

//Isochronous and Bulk stuff
void USB_HP_IRQHandler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <USB_LP_IRQHandler>:

//Everything
void USB_LP_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	if (USBz->ISTR & USB_ISTR_CTR)
 8000b54:	4b7f      	ldr	r3, [pc, #508]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	da01      	bge.n	8000b68 <USB_LP_IRQHandler+0x18>
	{
		EndpointCallback();
 8000b64:	f000 f902 	bl	8000d6c <EndpointCallback>
	}
	if (USBz->ISTR & USB_ISTR_PMAOVR)
 8000b68:	4b7a      	ldr	r3, [pc, #488]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d008      	beq.n	8000b8c <USB_LP_IRQHandler+0x3c>
	{
		USBz->ISTR = ~USB_ISTR_PMAOVR;
 8000b7a:	4b76      	ldr	r3, [pc, #472]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		myprint("PMAOVR Interrupt\r\n");
 8000b86:	4874      	ldr	r0, [pc, #464]	; (8000d58 <USB_LP_IRQHandler+0x208>)
 8000b88:	f7ff fd50 	bl	800062c <myprint>
	}
	if (USBz->ISTR & USB_ISTR_ERR)
 8000b8c:	4b71      	ldr	r3, [pc, #452]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d005      	beq.n	8000baa <USB_LP_IRQHandler+0x5a>
	{
		USBz->ISTR = ~USB_ISTR_ERR;
 8000b9e:	4b6d      	ldr	r3, [pc, #436]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8000ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		//myprint("ERR Interrupt\r\n");
	}
	if (USBz->ISTR & USB_ISTR_SUSP)
 8000baa:	4b6a      	ldr	r3, [pc, #424]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d020      	beq.n	8000bfe <USB_LP_IRQHandler+0xae>
	{
		USBz->CNTR |= USB_CNTR_FSUSP;
 8000bbc:	4b65      	ldr	r3, [pc, #404]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	4b63      	ldr	r3, [pc, #396]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f042 0208 	orr.w	r2, r2, #8
 8000bce:	b292      	uxth	r2, r2
 8000bd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		USBz->ISTR = ~USB_ISTR_SUSP;
 8000bd4:	4b5f      	ldr	r3, [pc, #380]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8000bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		USBz->CNTR |= USB_CNTR_LPMODE;
 8000be0:	4b5c      	ldr	r3, [pc, #368]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4b5a      	ldr	r3, [pc, #360]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f042 0204 	orr.w	r2, r2, #4
 8000bf2:	b292      	uxth	r2, r2
 8000bf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

		myprint("SUSP Interrupt\r\n");
 8000bf8:	4858      	ldr	r0, [pc, #352]	; (8000d5c <USB_LP_IRQHandler+0x20c>)
 8000bfa:	f7ff fd17 	bl	800062c <myprint>
	}
	if (USBz->ISTR & USB_ISTR_WKUP)
 8000bfe:	4b55      	ldr	r3, [pc, #340]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d029      	beq.n	8000c64 <USB_LP_IRQHandler+0x114>
	{
		USBz->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000c10:	4b50      	ldr	r3, [pc, #320]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b4e      	ldr	r3, [pc, #312]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0204 	bic.w	r2, r2, #4
 8000c22:	b292      	uxth	r2, r2
 8000c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		USBz->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b48      	ldr	r3, [pc, #288]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 0208 	bic.w	r2, r2, #8
 8000c3a:	b292      	uxth	r2, r2
 8000c3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		USBz->ISTR = ~USB_ISTR_WKUP;
 8000c40:	4b44      	ldr	r3, [pc, #272]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8000c48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

		USBz->CNTR |= USB_CNTR_RESETM | USB_CNTR_CTRM | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ESOFM | USB_CNTR_PMAOVRM | USB_CNTR_ERRM | USB_CNTR_SOFM;	//Enable these USB Interrupts
 8000c4c:	4b41      	ldr	r3, [pc, #260]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4b3f      	ldr	r3, [pc, #252]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8000c5e:	b292      	uxth	r2, r2
 8000c60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		//myprint("WKUP Interrupt\r\n");
	}
	if (USBz->ISTR & USB_ISTR_RESET)
 8000c64:	4b3b      	ldr	r3, [pc, #236]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d04e      	beq.n	8000d14 <USB_LP_IRQHandler+0x1c4>
	{
		USBz->ISTR = ~USB_ISTR_RESET;
 8000c76:	4b37      	ldr	r3, [pc, #220]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8000c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

		USBz->BTABLE = 0;
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

		//Configure endpoint0 as control, TX NAK, RX VALID
		USBz->EP0R = USB_EP_CONTROL | (2 << 4) | (3 << 12);
 8000c8c:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f243 2220 	movw	r2, #12832	; 0x3220
 8000c94:	801a      	strh	r2, [r3, #0]

		//Configure endpoint1
		USBz->EP1R = USB_EP_INTERRUPT | (3 << 4) | (3 << 12) | USB_EP_DTOG_RX | USB_EP_DTOG_TX | 0x1;
 8000c96:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f247 6271 	movw	r2, #30321	; 0x7671
 8000c9e:	809a      	strh	r2, [r3, #4]

		//Configure BTable for endpoint 0
		my_btable[0].ADDR_TX = (uint16_t)0x20;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <USB_LP_IRQHandler+0x210>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	801a      	strh	r2, [r3, #0]
		my_btable[0].COUNT_TX = (uint16_t)0;
 8000ca8:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <USB_LP_IRQHandler+0x210>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2200      	movs	r2, #0
 8000cae:	805a      	strh	r2, [r3, #2]
		my_btable[0].ADDR_RX = (uint16_t)0x60;
 8000cb0:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <USB_LP_IRQHandler+0x210>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2260      	movs	r2, #96	; 0x60
 8000cb6:	809a      	strh	r2, [r3, #4]
		my_btable[0].COUNT_RX = (uint16_t)0x8400;
 8000cb8:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <USB_LP_IRQHandler+0x210>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 8000cc0:	80da      	strh	r2, [r3, #6]

		//Configure BTable for endpoint 1
		my_btable[1].ADDR_TX = (uint16_t)0xA0;
 8000cc2:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <USB_LP_IRQHandler+0x210>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3308      	adds	r3, #8
 8000cc8:	22a0      	movs	r2, #160	; 0xa0
 8000cca:	801a      	strh	r2, [r3, #0]
		my_btable[1].COUNT_TX = (uint16_t)0;
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <USB_LP_IRQHandler+0x210>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	3308      	adds	r3, #8
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	805a      	strh	r2, [r3, #2]
		my_btable[1].ADDR_RX = (uint16_t)0xE0;
 8000cd6:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <USB_LP_IRQHandler+0x210>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	3308      	adds	r3, #8
 8000cdc:	22e0      	movs	r2, #224	; 0xe0
 8000cde:	809a      	strh	r2, [r3, #4]
		my_btable[1].COUNT_RX = (uint16_t)0x8400;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <USB_LP_IRQHandler+0x210>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3308      	adds	r3, #8
 8000ce6:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 8000cea:	80da      	strh	r2, [r3, #6]

		//Enable USB interrupts and peripheral
		USBz->CNTR |= USB_CNTR_RESETM | USB_CNTR_CTRM | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ESOFM;
 8000cec:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000cf4:	b299      	uxth	r1, r3
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <USB_LP_IRQHandler+0x214>)
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		USBz->DADDR = USB_DADDR_EF;
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

		myprint("Reset Interrupt\r\n");
 8000d0e:	4816      	ldr	r0, [pc, #88]	; (8000d68 <USB_LP_IRQHandler+0x218>)
 8000d10:	f7ff fc8c 	bl	800062c <myprint>
	}
	if (USBz->ISTR & USB_ISTR_SOF)
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <USB_LP_IRQHandler+0x1e2>
	{
		USBz->ISTR = ~USB_ISTR_SOF;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8000d2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
	if (USBz->ISTR & USB_ISTR_ESOF)
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d005      	beq.n	8000d50 <USB_LP_IRQHandler+0x200>
	{
		USBz->ISTR = ~USB_ISTR_ESOF;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <USB_LP_IRQHandler+0x204>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8000d4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000098 	.word	0x20000098
 8000d58:	08006074 	.word	0x08006074
 8000d5c:	08006088 	.word	0x08006088
 8000d60:	2000009c 	.word	0x2000009c
 8000d64:	ffff9d00 	.word	0xffff9d00
 8000d68:	0800609c 	.word	0x0800609c

08000d6c <EndpointCallback>:

void EndpointCallback(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
	//Loop to take care of all endpoint interrupts
	while (USBz->ISTR & USB_ISTR_CTR)
 8000d72:	e0a8      	b.n	8000ec6 <EndpointCallback+0x15a>
	{
		uint16_t ep = USBz->ISTR & USB_ISTR_EP_ID;
 8000d74:	4b5b      	ldr	r3, [pc, #364]	; (8000ee4 <EndpointCallback+0x178>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	80fb      	strh	r3, [r7, #6]
		uint16_t dir = USBz->ISTR & USB_ISTR_DIR;
 8000d84:	4b57      	ldr	r3, [pc, #348]	; (8000ee4 <EndpointCallback+0x178>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	80bb      	strh	r3, [r7, #4]

		switch(ep)
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <EndpointCallback+0x34>
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d07e      	beq.n	8000e9c <EndpointCallback+0x130>
 8000d9e:	e092      	b.n	8000ec6 <EndpointCallback+0x15a>
		{
		case 0:	//Control
			if (dir) //OUT/SETUP
 8000da0:	88bb      	ldrh	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d05c      	beq.n	8000e60 <EndpointCallback+0xf4>
			{
				//See if SETUP has been received
				if (USBz->EP0R & USB_EP_SETUP)	//SETUP
 8000da6:	4b4f      	ldr	r3, [pc, #316]	; (8000ee4 <EndpointCallback+0x178>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d02b      	beq.n	8000e0e <EndpointCallback+0xa2>
				{
					uint8_t num_bytes = my_btable[0].COUNT_RX;
 8000db6:	4b4c      	ldr	r3, [pc, #304]	; (8000ee8 <EndpointCallback+0x17c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	88db      	ldrh	r3, [r3, #6]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	70bb      	strb	r3, [r7, #2]
					if (num_bytes > 0)
 8000dc0:	78bb      	ldrb	r3, [r7, #2]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d004      	beq.n	8000dd0 <EndpointCallback+0x64>
					{
						ReadEndpoint(0, num_bytes);
 8000dc6:	78bb      	ldrb	r3, [r7, #2]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f7ff fdec 	bl	80009a8 <ReadEndpoint>
					}

					USBz->EP0R = ((~USB_EP_CTR_RX) & USBz->EP0R) & 0x8F8F;
 8000dd0:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <EndpointCallback+0x178>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b299      	uxth	r1, r3
 8000dd8:	4b42      	ldr	r3, [pc, #264]	; (8000ee4 <EndpointCallback+0x178>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000de0:	400b      	ands	r3, r1
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	8013      	strh	r3, [r2, #0]

					SetupCallback();
 8000de6:	f000 f885 	bl	8000ef4 <SetupCallback>

					//Set RX to Valid
					USBz->EP0R = (1 << 12) | (USBz->EP0R & 0x9F8F);
 8000dea:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <EndpointCallback+0x178>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	4b37      	ldr	r3, [pc, #220]	; (8000ee4 <EndpointCallback+0x178>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b292      	uxth	r2, r2
 8000e0a:	801a      	strh	r2, [r3, #0]
 8000e0c:	e05b      	b.n	8000ec6 <EndpointCallback+0x15a>
				}
				else if (USBz->EP0R & USB_EP_CTR_RX) //OUT
 8000e0e:	4b35      	ldr	r3, [pc, #212]	; (8000ee4 <EndpointCallback+0x178>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	da54      	bge.n	8000ec6 <EndpointCallback+0x15a>
				{

					USBz->EP0R = ((~USB_EP_CTR_RX) & USBz->EP0R) & 0x8F8F;
 8000e1c:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <EndpointCallback+0x178>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	b299      	uxth	r1, r3
 8000e24:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <EndpointCallback+0x178>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000e2c:	400b      	ands	r3, r1
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	8013      	strh	r3, [r2, #0]

					uint8_t num_bytes = my_btable[0].COUNT_RX;
 8000e32:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <EndpointCallback+0x17c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	88db      	ldrh	r3, [r3, #6]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	70fb      	strb	r3, [r7, #3]
						USBz->DADDR = address | (1 << 7);	//Set address and enable
						address = 0;
					}

*/					//Set RX to Valid
					USBz->EP0R = (1 << 12) | (USBz->EP0R & 0x9F8F);
 8000e3c:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <EndpointCallback+0x178>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <EndpointCallback+0x178>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	b292      	uxth	r2, r2
 8000e5c:	801a      	strh	r2, [r3, #0]
 8000e5e:	e032      	b.n	8000ec6 <EndpointCallback+0x15a>
				}
			}
			else //IN
			{
				if ((address > 0))
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <EndpointCallback+0x180>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d00c      	beq.n	8000e82 <EndpointCallback+0x116>
				{
					USBz->DADDR = address | (1 << 7);	//Set address and enable
 8000e68:	4b20      	ldr	r3, [pc, #128]	; (8000eec <EndpointCallback+0x180>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <EndpointCallback+0x178>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	b292      	uxth	r2, r2
 8000e78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					address = 0;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <EndpointCallback+0x180>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
				}
				USBz->EP0R = ((~USB_EP_CTR_TX) & USBz->EP0R) & 0x8F8F;
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <EndpointCallback+0x178>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <EndpointCallback+0x178>)
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	8013      	strh	r3, [r2, #0]
			}
		break;
 8000e9a:	e014      	b.n	8000ec6 <EndpointCallback+0x15a>
		case 1: //Endpoint
			if (dir) //OUT/SETUP
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d110      	bne.n	8000ec4 <EndpointCallback+0x158>
			{

			}
			else //IN
			{
				WriteEndpoint(1, report.data, 5);
 8000ea2:	2205      	movs	r2, #5
 8000ea4:	4912      	ldr	r1, [pc, #72]	; (8000ef0 <EndpointCallback+0x184>)
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff fdbe 	bl	8000a28 <WriteEndpoint>
				//myprint("EP1 Request!\r\n");

				USBz->EP1R = ((~USB_EP_CTR_TX) & USBz->EP1R) & 0x8F8F;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <EndpointCallback+0x178>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	889b      	ldrh	r3, [r3, #4]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <EndpointCallback+0x178>)
 8000eb6:	6812      	ldr	r2, [r2, #0]
 8000eb8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	8093      	strh	r3, [r2, #4]
			}

		break;
 8000ec4:	bf00      	nop
	while (USBz->ISTR & USB_ISTR_CTR)
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <EndpointCallback+0x178>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f6ff af4e 	blt.w	8000d74 <EndpointCallback+0x8>
		}
	}
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000098 	.word	0x20000098
 8000ee8:	2000009c 	.word	0x2000009c
 8000eec:	200001fe 	.word	0x200001fe
 8000ef0:	20000220 	.word	0x20000220

08000ef4 <SetupCallback>:

void SetupCallback(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
	//myprint("\tSETUP RECEIVED\r\n");
	uint8_t descriptor_type;

	//Determine Request
	uint8_t bmRequestType = ((uint8_t*)buffer)[0];
 8000efa:	4ba0      	ldr	r3, [pc, #640]	; (800117c <SetupCallback+0x288>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	72fb      	strb	r3, [r7, #11]
	uint8_t bRequest = ((uint8_t*)buffer)[1];
 8000f00:	4b9e      	ldr	r3, [pc, #632]	; (800117c <SetupCallback+0x288>)
 8000f02:	785b      	ldrb	r3, [r3, #1]
 8000f04:	72bb      	strb	r3, [r7, #10]
	uint16_t wValue = buffer[1];
 8000f06:	4b9d      	ldr	r3, [pc, #628]	; (800117c <SetupCallback+0x288>)
 8000f08:	885b      	ldrh	r3, [r3, #2]
 8000f0a:	813b      	strh	r3, [r7, #8]
	uint16_t wIndex = buffer[2];
 8000f0c:	4b9b      	ldr	r3, [pc, #620]	; (800117c <SetupCallback+0x288>)
 8000f0e:	889b      	ldrh	r3, [r3, #4]
 8000f10:	80fb      	strh	r3, [r7, #6]
	uint16_t wLength = buffer[3];
 8000f12:	4b9a      	ldr	r3, [pc, #616]	; (800117c <SetupCallback+0x288>)
 8000f14:	88db      	ldrh	r3, [r3, #6]
 8000f16:	80bb      	strh	r3, [r7, #4]

	USBRequestDirection direction 	= (bmRequestType & 0x80) ? REQUEST_D2H : REQUEST_H2D;
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	09db      	lsrs	r3, r3, #7
 8000f1c:	70fb      	strb	r3, [r7, #3]
	USBRequestType type 			= (bmRequestType & 0x60) >> 5;
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	115b      	asrs	r3, r3, #5
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	70bb      	strb	r3, [r7, #2]
	USBRequestRecipient recipient 	= bmRequestType & 0x1F;
 8000f2a:	7afb      	ldrb	r3, [r7, #11]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	707b      	strb	r3, [r7, #1]

	//Handle Request
	switch(bRequest)
 8000f32:	7abb      	ldrb	r3, [r7, #10]
 8000f34:	2b12      	cmp	r3, #18
 8000f36:	f200 8118 	bhi.w	800116a <SetupCallback+0x276>
 8000f3a:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <SetupCallback+0x4c>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08000f8d 	.word	0x08000f8d
 8000f44:	08000f95 	.word	0x08000f95
 8000f48:	0800116b 	.word	0x0800116b
 8000f4c:	08000f9d 	.word	0x08000f9d
 8000f50:	0800116b 	.word	0x0800116b
 8000f54:	08000fa5 	.word	0x08000fa5
 8000f58:	08000fe5 	.word	0x08000fe5
 8000f5c:	0800113b 	.word	0x0800113b
 8000f60:	08001143 	.word	0x08001143
 8000f64:	0800114b 	.word	0x0800114b
 8000f68:	08001153 	.word	0x08001153
 8000f6c:	0800116b 	.word	0x0800116b
 8000f70:	0800116b 	.word	0x0800116b
 8000f74:	0800116b 	.word	0x0800116b
 8000f78:	0800116b 	.word	0x0800116b
 8000f7c:	0800116b 	.word	0x0800116b
 8000f80:	0800116b 	.word	0x0800116b
 8000f84:	0800115b 	.word	0x0800115b
 8000f88:	08001163 	.word	0x08001163
	{
	case GET_STATUS:
		myprint("\t\tGET_STATUS\r\n");
 8000f8c:	487c      	ldr	r0, [pc, #496]	; (8001180 <SetupCallback+0x28c>)
 8000f8e:	f7ff fb4d 	bl	800062c <myprint>
		break;
 8000f92:	e0ee      	b.n	8001172 <SetupCallback+0x27e>
	case CLEAR_FEATURE:
		myprint("\t\tCLEAR_FEATURE\r\n");
 8000f94:	487b      	ldr	r0, [pc, #492]	; (8001184 <SetupCallback+0x290>)
 8000f96:	f7ff fb49 	bl	800062c <myprint>
		break;
 8000f9a:	e0ea      	b.n	8001172 <SetupCallback+0x27e>
	case SET_FEATURE:
		myprint("\t\tSET_FEATURE\r\n");
 8000f9c:	487a      	ldr	r0, [pc, #488]	; (8001188 <SetupCallback+0x294>)
 8000f9e:	f7ff fb45 	bl	800062c <myprint>
		break;
 8000fa2:	e0e6      	b.n	8001172 <SetupCallback+0x27e>
	case SET_ADDRESS:
		address = wValue & 0x7F;
 8000fa4:	893b      	ldrh	r3, [r7, #8]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b77      	ldr	r3, [pc, #476]	; (800118c <SetupCallback+0x298>)
 8000fb0:	701a      	strb	r2, [r3, #0]
		my_btable[0].COUNT_TX = 0;
 8000fb2:	4b77      	ldr	r3, [pc, #476]	; (8001190 <SetupCallback+0x29c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	805a      	strh	r2, [r3, #2]
		USBz->EP0R = (1 << 4) | (USBz->EP0R & 0x8F9F);
 8000fba:	4b76      	ldr	r3, [pc, #472]	; (8001194 <SetupCallback+0x2a0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	4b6f      	ldr	r3, [pc, #444]	; (8001194 <SetupCallback+0x2a0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	b292      	uxth	r2, r2
 8000fda:	801a      	strh	r2, [r3, #0]

		myprint("\t\tSET_ADDRESS\r\n");
 8000fdc:	486e      	ldr	r0, [pc, #440]	; (8001198 <SetupCallback+0x2a4>)
 8000fde:	f7ff fb25 	bl	800062c <myprint>

		break;
 8000fe2:	e0c6      	b.n	8001172 <SetupCallback+0x27e>
	case GET_DESCRIPTOR:
		myprint("\t\tGET_DESCRIPTOR\r\n");
 8000fe4:	486d      	ldr	r0, [pc, #436]	; (800119c <SetupCallback+0x2a8>)
 8000fe6:	f7ff fb21 	bl	800062c <myprint>
		descriptor_type = (wValue >> 8) & 0xFF;
 8000fea:	893b      	ldrh	r3, [r7, #8]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	703b      	strb	r3, [r7, #0]

		switch(descriptor_type)
 8000ff2:	783b      	ldrb	r3, [r7, #0]
 8000ff4:	2b22      	cmp	r3, #34	; 0x22
 8000ff6:	f000 808b 	beq.w	8001110 <SetupCallback+0x21c>
 8000ffa:	2b22      	cmp	r3, #34	; 0x22
 8000ffc:	f300 8091 	bgt.w	8001122 <SetupCallback+0x22e>
 8001000:	2b01      	cmp	r3, #1
 8001002:	d002      	beq.n	800100a <SetupCallback+0x116>
 8001004:	2b02      	cmp	r3, #2
 8001006:	d00b      	beq.n	8001020 <SetupCallback+0x12c>
 8001008:	e08b      	b.n	8001122 <SetupCallback+0x22e>
		{
		case 1:
			myprint("\t\t\tDevice\r\n");
 800100a:	4865      	ldr	r0, [pc, #404]	; (80011a0 <SetupCallback+0x2ac>)
 800100c:	f7ff fb0e 	bl	800062c <myprint>
			//myprint_hex(wLength);

			//Write data to PMA (sets endpoint transfer as valid)
			WriteEndpoint(0, device.data, device.descriptor.bLength);
 8001010:	4b64      	ldr	r3, [pc, #400]	; (80011a4 <SetupCallback+0x2b0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4963      	ldr	r1, [pc, #396]	; (80011a4 <SetupCallback+0x2b0>)
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff fd05 	bl	8000a28 <WriteEndpoint>
			break;
 800101e:	e08b      	b.n	8001138 <SetupCallback+0x244>
		case 2:
			myprint("\t\t\tConfiguration\r\n");
 8001020:	4861      	ldr	r0, [pc, #388]	; (80011a8 <SetupCallback+0x2b4>)
 8001022:	f7ff fb03 	bl	800062c <myprint>

			if (wLength == 9)
 8001026:	88bb      	ldrh	r3, [r7, #4]
 8001028:	2b09      	cmp	r3, #9
 800102a:	d107      	bne.n	800103c <SetupCallback+0x148>
			{
				WriteEndpoint(0, configuration.data, configuration.descriptor.bLength);
 800102c:	4b5f      	ldr	r3, [pc, #380]	; (80011ac <SetupCallback+0x2b8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	495e      	ldr	r1, [pc, #376]	; (80011ac <SetupCallback+0x2b8>)
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff fcf7 	bl	8000a28 <WriteEndpoint>
				}

				WriteEndpoint(0, big_buffer, big_buffer_index);
			}

			break;
 800103a:	e07d      	b.n	8001138 <SetupCallback+0x244>
				int big_buffer_index = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
				for (int i = 0; i < configuration.descriptor.bLength; i++, big_buffer_index++)
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	e00e      	b.n	8001064 <SetupCallback+0x170>
					big_buffer[big_buffer_index] = configuration.data[i];
 8001046:	4a59      	ldr	r2, [pc, #356]	; (80011ac <SetupCallback+0x2b8>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	4413      	add	r3, r2
 800104c:	7819      	ldrb	r1, [r3, #0]
 800104e:	4a58      	ldr	r2, [pc, #352]	; (80011b0 <SetupCallback+0x2bc>)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	4413      	add	r3, r2
 8001054:	460a      	mov	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < configuration.descriptor.bLength; i++, big_buffer_index++)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	3301      	adds	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	4b51      	ldr	r3, [pc, #324]	; (80011ac <SetupCallback+0x2b8>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4293      	cmp	r3, r2
 800106e:	dbea      	blt.n	8001046 <SetupCallback+0x152>
				for (int i = 0; i < interface.descriptor.bLength; i++, big_buffer_index++)
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e00e      	b.n	8001094 <SetupCallback+0x1a0>
					big_buffer[big_buffer_index] = interface.data[i];
 8001076:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <SetupCallback+0x2c0>)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	4413      	add	r3, r2
 800107c:	7819      	ldrb	r1, [r3, #0]
 800107e:	4a4c      	ldr	r2, [pc, #304]	; (80011b0 <SetupCallback+0x2bc>)
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	4413      	add	r3, r2
 8001084:	460a      	mov	r2, r1
 8001086:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < interface.descriptor.bLength; i++, big_buffer_index++)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3301      	adds	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <SetupCallback+0x2c0>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	4293      	cmp	r3, r2
 800109e:	dbea      	blt.n	8001076 <SetupCallback+0x182>
				for (int i = 0; i < endpoint.descriptor.bLength; i++, big_buffer_index++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	e00e      	b.n	80010c4 <SetupCallback+0x1d0>
					big_buffer[big_buffer_index] = endpoint.data[i];
 80010a6:	4a44      	ldr	r2, [pc, #272]	; (80011b8 <SetupCallback+0x2c4>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4413      	add	r3, r2
 80010ac:	7819      	ldrb	r1, [r3, #0]
 80010ae:	4a40      	ldr	r2, [pc, #256]	; (80011b0 <SetupCallback+0x2bc>)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	4413      	add	r3, r2
 80010b4:	460a      	mov	r2, r1
 80010b6:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < endpoint.descriptor.bLength; i++, big_buffer_index++)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	3301      	adds	r3, #1
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <SetupCallback+0x2c4>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4293      	cmp	r3, r2
 80010ce:	dbea      	blt.n	80010a6 <SetupCallback+0x1b2>
				for (int i = 0; i < hid.descriptor.bLength; i++, big_buffer_index++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	e00e      	b.n	80010f4 <SetupCallback+0x200>
					big_buffer[big_buffer_index] = hid.data[i];
 80010d6:	4a39      	ldr	r2, [pc, #228]	; (80011bc <SetupCallback+0x2c8>)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	7819      	ldrb	r1, [r3, #0]
 80010de:	4a34      	ldr	r2, [pc, #208]	; (80011b0 <SetupCallback+0x2bc>)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	4413      	add	r3, r2
 80010e4:	460a      	mov	r2, r1
 80010e6:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < hid.descriptor.bLength; i++, big_buffer_index++)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3301      	adds	r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3301      	adds	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	4b31      	ldr	r3, [pc, #196]	; (80011bc <SetupCallback+0x2c8>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4293      	cmp	r3, r2
 80010fe:	dbea      	blt.n	80010d6 <SetupCallback+0x1e2>
				WriteEndpoint(0, big_buffer, big_buffer_index);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	492a      	ldr	r1, [pc, #168]	; (80011b0 <SetupCallback+0x2bc>)
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fc8d 	bl	8000a28 <WriteEndpoint>
			break;
 800110e:	e013      	b.n	8001138 <SetupCallback+0x244>
		case 34: //HID Report
			myprint("\t\t\tHID Report\r\n");
 8001110:	482b      	ldr	r0, [pc, #172]	; (80011c0 <SetupCallback+0x2cc>)
 8001112:	f7ff fa8b 	bl	800062c <myprint>

			WriteEndpoint(0, gamepad_report, 63);
 8001116:	223f      	movs	r2, #63	; 0x3f
 8001118:	492a      	ldr	r1, [pc, #168]	; (80011c4 <SetupCallback+0x2d0>)
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff fc84 	bl	8000a28 <WriteEndpoint>
			break;
 8001120:	e00a      	b.n	8001138 <SetupCallback+0x244>
		default:
			myprint("\t\t\tDefault: ");
 8001122:	4829      	ldr	r0, [pc, #164]	; (80011c8 <SetupCallback+0x2d4>)
 8001124:	f7ff fa82 	bl	800062c <myprint>
			myprint_hex(descriptor_type);
 8001128:	783b      	ldrb	r3, [r7, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fab2 	bl	8000694 <myprint_hex>
			myprint("\r\n");
 8001130:	4826      	ldr	r0, [pc, #152]	; (80011cc <SetupCallback+0x2d8>)
 8001132:	f7ff fa7b 	bl	800062c <myprint>
			break;
 8001136:	bf00      	nop
		}

		break;
 8001138:	e01b      	b.n	8001172 <SetupCallback+0x27e>
	case SET_DESCRIPTOR:
		myprint("\t\tSET_DESCRIPTOR\r\n");
 800113a:	4825      	ldr	r0, [pc, #148]	; (80011d0 <SetupCallback+0x2dc>)
 800113c:	f7ff fa76 	bl	800062c <myprint>
		break;
 8001140:	e017      	b.n	8001172 <SetupCallback+0x27e>
	case GET_CONFIGURATION:
		myprint("\t\tGET_CONFIGURATION\r\n");
 8001142:	4824      	ldr	r0, [pc, #144]	; (80011d4 <SetupCallback+0x2e0>)
 8001144:	f7ff fa72 	bl	800062c <myprint>
		break;
 8001148:	e013      	b.n	8001172 <SetupCallback+0x27e>
	case SET_CONFIGURATION:
		myprint("\t\tSET_CONFIGURATION\r\n");
 800114a:	4823      	ldr	r0, [pc, #140]	; (80011d8 <SetupCallback+0x2e4>)
 800114c:	f7ff fa6e 	bl	800062c <myprint>
		break;
 8001150:	e00f      	b.n	8001172 <SetupCallback+0x27e>
	case GET_INTERFACE:
		myprint("\t\tGET_INTERFACE\r\n");
 8001152:	4822      	ldr	r0, [pc, #136]	; (80011dc <SetupCallback+0x2e8>)
 8001154:	f7ff fa6a 	bl	800062c <myprint>
		break;
 8001158:	e00b      	b.n	8001172 <SetupCallback+0x27e>
	case SET_INTERFACE:
		myprint("\t\tSET_INTERFACE\r\n");
 800115a:	4821      	ldr	r0, [pc, #132]	; (80011e0 <SetupCallback+0x2ec>)
 800115c:	f7ff fa66 	bl	800062c <myprint>
		break;
 8001160:	e007      	b.n	8001172 <SetupCallback+0x27e>
	case SYNCH_FRAME:
		myprint("\t\tSYNCH_FRAME\r\n");
 8001162:	4820      	ldr	r0, [pc, #128]	; (80011e4 <SetupCallback+0x2f0>)
 8001164:	f7ff fa62 	bl	800062c <myprint>
		break;
 8001168:	e003      	b.n	8001172 <SetupCallback+0x27e>
	default:
		myprint("\t\tWE SHOULDN'T BE HERE IN THE SETUP\r\n");
 800116a:	481f      	ldr	r0, [pc, #124]	; (80011e8 <SetupCallback+0x2f4>)
 800116c:	f7ff fa5e 	bl	800062c <myprint>
		break;
 8001170:	bf00      	nop
	}
}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000a0 	.word	0x200000a0
 8001180:	080060b0 	.word	0x080060b0
 8001184:	080060c0 	.word	0x080060c0
 8001188:	080060d4 	.word	0x080060d4
 800118c:	200001fe 	.word	0x200001fe
 8001190:	2000009c 	.word	0x2000009c
 8001194:	20000098 	.word	0x20000098
 8001198:	080060e4 	.word	0x080060e4
 800119c:	080060f4 	.word	0x080060f4
 80011a0:	08006108 	.word	0x08006108
 80011a4:	200001e0 	.word	0x200001e0
 80011a8:	08006114 	.word	0x08006114
 80011ac:	200001f4 	.word	0x200001f4
 80011b0:	200000e0 	.word	0x200000e0
 80011b4:	20000200 	.word	0x20000200
 80011b8:	2000020c 	.word	0x2000020c
 80011bc:	20000214 	.word	0x20000214
 80011c0:	08006128 	.word	0x08006128
 80011c4:	0800621c 	.word	0x0800621c
 80011c8:	08006138 	.word	0x08006138
 80011cc:	08006148 	.word	0x08006148
 80011d0:	0800614c 	.word	0x0800614c
 80011d4:	08006160 	.word	0x08006160
 80011d8:	08006178 	.word	0x08006178
 80011dc:	08006190 	.word	0x08006190
 80011e0:	080061a4 	.word	0x080061a4
 80011e4:	080061b8 	.word	0x080061b8
 80011e8:	080061c8 	.word	0x080061c8

080011ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <HAL_MspInit+0x44>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <HAL_MspInit+0x44>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6193      	str	r3, [r2, #24]
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <HAL_MspInit+0x44>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_MspInit+0x44>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <HAL_MspInit+0x44>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	61d3      	str	r3, [r2, #28]
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_MspInit+0x44>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001280:	f000 fa6a 	bl	8001758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <TIM3_IRQHandler+0x10>)
 800128e:	f003 fa43 	bl	8004718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000228 	.word	0x20000228

0800129c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <SystemInit+0x20>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <SystemInit+0x20>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	615a      	str	r2, [r3, #20]
 80012e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <MX_TIM3_Init+0xc4>)
 80012e6:	4a28      	ldr	r2, [pc, #160]	; (8001388 <MX_TIM3_Init+0xc8>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <MX_TIM3_Init+0xc4>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <MX_TIM3_Init+0xc4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <MX_TIM3_Init+0xc4>)
 80012f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <MX_TIM3_Init+0xc4>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_TIM3_Init+0xc4>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800130a:	481e      	ldr	r0, [pc, #120]	; (8001384 <MX_TIM3_Init+0xc4>)
 800130c:	f003 f85e 	bl	80043cc <HAL_TIM_PWM_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001316:	f7ff f983 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4816      	ldr	r0, [pc, #88]	; (8001384 <MX_TIM3_Init+0xc4>)
 800132a:	f004 f8d7 	bl	80054dc <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001334:	f7ff f974 	bl	8000620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001338:	2360      	movs	r3, #96	; 0x60
 800133a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	2208      	movs	r2, #8
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_TIM3_Init+0xc4>)
 8001350:	f003 fb24 	bl	800499c <HAL_TIM_PWM_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800135a:	f7ff f961 	bl	8000620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800135e:	463b      	mov	r3, r7
 8001360:	220c      	movs	r2, #12
 8001362:	4619      	mov	r1, r3
 8001364:	4807      	ldr	r0, [pc, #28]	; (8001384 <MX_TIM3_Init+0xc4>)
 8001366:	f003 fb19 	bl	800499c <HAL_TIM_PWM_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001370:	f7ff f956 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <MX_TIM3_Init+0xc4>)
 8001376:	f000 f8c9 	bl	800150c <HAL_TIM_MspPostInit>

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000228 	.word	0x20000228
 8001388:	40000400 	.word	0x40000400

0800138c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f004 fdf8 	bl	8005f90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <MX_TIM4_Init+0xa4>)
 80013ac:	4a21      	ldr	r2, [pc, #132]	; (8001434 <MX_TIM4_Init+0xa8>)
 80013ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MX_TIM4_Init+0xa4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <MX_TIM4_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013bc:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <MX_TIM4_Init+0xa4>)
 80013be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_TIM4_Init+0xa4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_TIM4_Init+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013d0:	2303      	movs	r3, #3
 80013d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013d8:	2301      	movs	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013e8:	2301      	movs	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <MX_TIM4_Init+0xa4>)
 80013fc:	f003 f84a 	bl	8004494 <HAL_TIM_Encoder_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001406:	f7ff f90b 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <MX_TIM4_Init+0xa4>)
 8001418:	f004 f860 	bl	80054dc <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001422:	f7ff f8fd 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3730      	adds	r7, #48	; 0x30
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200002e4 	.word	0x200002e4
 8001434:	40000800 	.word	0x40000800

08001438 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0d      	ldr	r2, [pc, #52]	; (800147c <HAL_TIM_PWM_MspInit+0x44>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d113      	bne.n	8001472 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_TIM_PWM_MspInit+0x48>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <HAL_TIM_PWM_MspInit+0x48>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_TIM_PWM_MspInit+0x48>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	201d      	movs	r0, #29
 8001468:	f001 f917 	bl	800269a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800146c:	201d      	movs	r0, #29
 800146e:	f001 f930 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40000400 	.word	0x40000400
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_TIM_Encoder_MspInit+0x7c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d128      	bne.n	80014f8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_TIM_Encoder_MspInit+0x80>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a16      	ldr	r2, [pc, #88]	; (8001504 <HAL_TIM_Encoder_MspInit+0x80>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_TIM_Encoder_MspInit+0x80>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_TIM_Encoder_MspInit+0x80>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_TIM_Encoder_MspInit+0x80>)
 80014c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014c8:	6153      	str	r3, [r2, #20]
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_TIM_Encoder_MspInit+0x80>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014d6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014e8:	2302      	movs	r3, #2
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <HAL_TIM_Encoder_MspInit+0x84>)
 80014f4:	f001 f908 	bl	8002708 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40000800 	.word	0x40000800
 8001504:	40021000 	.word	0x40021000
 8001508:	48000c00 	.word	0x48000c00

0800150c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a11      	ldr	r2, [pc, #68]	; (8001570 <HAL_TIM_MspPostInit+0x64>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d11b      	bne.n	8001566 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_TIM_MspPostInit+0x68>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <HAL_TIM_MspPostInit+0x68>)
 8001534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001538:	6153      	str	r3, [r2, #20]
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_TIM_MspPostInit+0x68>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE4     ------> TIM3_CH3
    PE5     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001546:	2330      	movs	r3, #48	; 0x30
 8001548:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001556:	2302      	movs	r3, #2
 8001558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <HAL_TIM_MspPostInit+0x6c>)
 8001562:	f001 f8d1 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40000400 	.word	0x40000400
 8001574:	40021000 	.word	0x40021000
 8001578:	48001000 	.word	0x48001000

0800157c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_USART3_UART_Init+0x64>)
 8001582:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <MX_USART3_UART_Init+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_USART3_UART_Init+0x64>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_USART3_UART_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_USART3_UART_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_USART3_UART_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_USART3_UART_Init+0x64>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_USART3_UART_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_USART3_UART_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_USART3_UART_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_USART3_UART_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015be:	4808      	ldr	r0, [pc, #32]	; (80015e0 <MX_USART3_UART_Init+0x64>)
 80015c0:	f004 f840 	bl	8005644 <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015ca:	f7ff f829 	bl	8000620 <Error_Handler>

  /*char escape = 0x1B;
  myprint(&escape);
  myprint("[2J");*/

  myprint("\r\n\n\n\n\n");
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <MX_USART3_UART_Init+0x6c>)
 80015d0:	f7ff f82c 	bl	800062c <myprint>
  myprint("----------Welcome!----------\r\n\n\n\n");
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_USART3_UART_Init+0x70>)
 80015d6:	f7ff f829 	bl	800062c <myprint>

  /* USER CODE END USART3_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200003a0 	.word	0x200003a0
 80015e4:	40004800 	.word	0x40004800
 80015e8:	080061f0 	.word	0x080061f0
 80015ec:	080061f8 	.word	0x080061f8

080015f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a17      	ldr	r2, [pc, #92]	; (800166c <HAL_UART_MspInit+0x7c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d128      	bne.n	8001664 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a16      	ldr	r2, [pc, #88]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161c:	61d3      	str	r3, [r2, #28]
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_UART_MspInit+0x80>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001634:	6153      	str	r3, [r2, #20]
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001654:	2307      	movs	r3, #7
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <HAL_UART_MspInit+0x84>)
 8001660:	f001 f852 	bl	8002708 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40004800 	.word	0x40004800
 8001670:	40021000 	.word	0x40021000
 8001674:	48000c00 	.word	0x48000c00

08001678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800167e:	490e      	ldr	r1, [pc, #56]	; (80016b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <LoopForever+0xe>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001694:	4c0b      	ldr	r4, [pc, #44]	; (80016c4 <LoopForever+0x16>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016a2:	f7ff fdfb 	bl	800129c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a6:	f004 fc35 	bl	8005f14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016aa:	f7fe fee7 	bl	800047c <main>

080016ae <LoopForever>:

LoopForever:
    b LoopForever
 80016ae:	e7fe      	b.n	80016ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016bc:	080062c4 	.word	0x080062c4
  ldr r2, =_sbss
 80016c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016c4:	20000428 	.word	0x20000428

080016c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC1_2_IRQHandler>
	...

080016cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_Init+0x28>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_Init+0x28>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016dc:	2003      	movs	r0, #3
 80016de:	f000 ffd1 	bl	8002684 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e2:	200f      	movs	r0, #15
 80016e4:	f000 f808 	bl	80016f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e8:	f7ff fd80 	bl	80011ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40022000 	.word	0x40022000

080016f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x54>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_InitTick+0x58>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f000 ffe9 	bl	80026ee <HAL_SYSTICK_Config>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e00e      	b.n	8001744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d80a      	bhi.n	8001742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f000 ffb1 	bl	800269a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001738:	4a06      	ldr	r2, [pc, #24]	; (8001754 <HAL_InitTick+0x5c>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e000      	b.n	8001744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000000 	.word	0x20000000
 8001750:	20000008 	.word	0x20000008
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x20>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_IncTick+0x24>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4413      	add	r3, r2
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_IncTick+0x24>)
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000008 	.word	0x20000008
 800177c:	20000424 	.word	0x20000424

08001780 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return uwTick;  
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_GetTick+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000424 	.word	0x20000424

08001798 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0a2      	sub	sp, #136	; 0x88
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __IO uint32_t wait_loop_index = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e210      	b.n	8001c2c <HAL_ADC_Init+0x444>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	2b00      	cmp	r3, #0
 800181a:	f040 808e 	bne.w	800193a <HAL_ADC_Init+0x152>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d169      	bne.n	80018fa <HAL_ADC_Init+0x112>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a92      	ldr	r2, [pc, #584]	; (8001a8c <HAL_ADC_Init+0x2a4>)
 8001844:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a91      	ldr	r2, [pc, #580]	; (8001a90 <HAL_ADC_Init+0x2a8>)
 800184a:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a91      	ldr	r2, [pc, #580]	; (8001a94 <HAL_ADC_Init+0x2ac>)
 8001850:	659a      	str	r2, [r3, #88]	; 0x58
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a90      	ldr	r2, [pc, #576]	; (8001a98 <HAL_ADC_Init+0x2b0>)
 8001856:	65da      	str	r2, [r3, #92]	; 0x5c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a90      	ldr	r2, [pc, #576]	; (8001a9c <HAL_ADC_Init+0x2b4>)
 800185c:	661a      	str	r2, [r3, #96]	; 0x60
    
    if (hadc->MspInitCallback == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <HAL_ADC_Init+0x84>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a8d      	ldr	r2, [pc, #564]	; (8001aa0 <HAL_ADC_Init+0x2b8>)
 800186a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d13b      	bne.n	80018fa <HAL_ADC_Init+0x112>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fdc8 	bl	8002418 <ADC_Disable>
 8001888:	4603      	mov	r3, r0
 800188a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	2b00      	cmp	r3, #0
 8001898:	d12f      	bne.n	80018fa <HAL_ADC_Init+0x112>
 800189a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d12b      	bne.n	80018fa <HAL_ADC_Init+0x112>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018aa:	f023 0302 	bic.w	r3, r3, #2
 80018ae:	f043 0202 	orr.w	r2, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018c4:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018d4:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018d6:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <HAL_ADC_Init+0x2bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a73      	ldr	r2, [pc, #460]	; (8001aa8 <HAL_ADC_Init+0x2c0>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	0c9a      	lsrs	r2, r3, #18
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_Init+0x10c>
          {
            wait_loop_index--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f9      	bne.n	80018ee <HAL_ADC_Init+0x106>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001916:	d110      	bne.n	800193a <HAL_ADC_Init+0x152>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f023 0312 	bic.w	r3, r3, #18
 8001920:	f043 0210 	orr.w	r2, r3, #16
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 8165 	bne.w	8001c12 <HAL_ADC_Init+0x42a>
 8001948:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800194c:	2b00      	cmp	r3, #0
 800194e:	f040 8160 	bne.w	8001c12 <HAL_ADC_Init+0x42a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	f040 8158 	bne.w	8001c12 <HAL_ADC_Init+0x42a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800196a:	f043 0202 	orr.w	r2, r3, #2
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800197a:	d004      	beq.n	8001986 <HAL_ADC_Init+0x19e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a4a      	ldr	r2, [pc, #296]	; (8001aac <HAL_ADC_Init+0x2c4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_ADC_Init+0x1a2>
 8001986:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <HAL_ADC_Init+0x2c8>)
 8001988:	e000      	b.n	800198c <HAL_ADC_Init+0x1a4>
 800198a:	4b4a      	ldr	r3, [pc, #296]	; (8001ab4 <HAL_ADC_Init+0x2cc>)
 800198c:	67fb      	str	r3, [r7, #124]	; 0x7c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001996:	d102      	bne.n	800199e <HAL_ADC_Init+0x1b6>
 8001998:	4b44      	ldr	r3, [pc, #272]	; (8001aac <HAL_ADC_Init+0x2c4>)
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	e01a      	b.n	80019d4 <HAL_ADC_Init+0x1ec>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a42      	ldr	r2, [pc, #264]	; (8001aac <HAL_ADC_Init+0x2c4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d103      	bne.n	80019b0 <HAL_ADC_Init+0x1c8>
 80019a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	e011      	b.n	80019d4 <HAL_ADC_Init+0x1ec>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a40      	ldr	r2, [pc, #256]	; (8001ab8 <HAL_ADC_Init+0x2d0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d102      	bne.n	80019c0 <HAL_ADC_Init+0x1d8>
 80019ba:	4b40      	ldr	r3, [pc, #256]	; (8001abc <HAL_ADC_Init+0x2d4>)
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	e009      	b.n	80019d4 <HAL_ADC_Init+0x1ec>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a3d      	ldr	r2, [pc, #244]	; (8001abc <HAL_ADC_Init+0x2d4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d102      	bne.n	80019d0 <HAL_ADC_Init+0x1e8>
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_ADC_Init+0x2d0>)
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	e001      	b.n	80019d4 <HAL_ADC_Init+0x1ec>
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d108      	bne.n	80019f4 <HAL_ADC_Init+0x20c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_ADC_Init+0x20c>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_ADC_Init+0x20e>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d11c      	bne.n	8001a34 <HAL_ADC_Init+0x24c>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019fa:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d010      	beq.n	8001a22 <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d107      	bne.n	8001a1c <HAL_ADC_Init+0x234>
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_Init+0x234>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_ADC_Init+0x236>
 8001a1c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d108      	bne.n	8001a34 <HAL_ADC_Init+0x24c>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a32:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7e5b      	ldrb	r3, [r3, #25]
 8001a38:	035b      	lsls	r3, r3, #13
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a3e:	2a01      	cmp	r2, #1
 8001a40:	d002      	beq.n	8001a48 <HAL_ADC_Init+0x260>
 8001a42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a46:	e000      	b.n	8001a4a <HAL_ADC_Init+0x262>
 8001a48:	2200      	movs	r2, #0
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d137      	bne.n	8001adc <HAL_ADC_Init+0x2f4>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7e5b      	ldrb	r3, [r3, #25]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d125      	bne.n	8001ac0 <HAL_ADC_Init+0x2d8>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	045a      	lsls	r2, r3, #17
 8001a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a80:	4313      	orrs	r3, r2
 8001a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a8a:	e027      	b.n	8001adc <HAL_ADC_Init+0x2f4>
 8001a8c:	08001799 	.word	0x08001799
 8001a90:	080017ad 	.word	0x080017ad
 8001a94:	080017c1 	.word	0x080017c1
 8001a98:	080017d5 	.word	0x080017d5
 8001a9c:	08001c41 	.word	0x08001c41
 8001aa0:	080002c5 	.word	0x080002c5
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	431bde83 	.word	0x431bde83
 8001aac:	50000100 	.word	0x50000100
 8001ab0:	50000300 	.word	0x50000300
 8001ab4:	50000700 	.word	0x50000700
 8001ab8:	50000400 	.word	0x50000400
 8001abc:	50000500 	.word	0x50000500
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ac8:	f043 0220 	orr.w	r2, r3, #32
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	f043 0201 	orr.w	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d048      	beq.n	8001b76 <HAL_ADC_Init+0x38e>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <HAL_ADC_Init+0x44c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d004      	beq.n	8001af8 <HAL_ADC_Init+0x310>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a51      	ldr	r2, [pc, #324]	; (8001c38 <HAL_ADC_Init+0x450>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d132      	bne.n	8001b5e <HAL_ADC_Init+0x376>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001b00:	d02a      	beq.n	8001b58 <HAL_ADC_Init+0x370>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b0a:	d022      	beq.n	8001b52 <HAL_ADC_Init+0x36a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001b14:	d01a      	beq.n	8001b4c <HAL_ADC_Init+0x364>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001b1e:	d012      	beq.n	8001b46 <HAL_ADC_Init+0x35e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001b28:	d00a      	beq.n	8001b40 <HAL_ADC_Init+0x358>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001b32:	d002      	beq.n	8001b3a <HAL_ADC_Init+0x352>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	e015      	b.n	8001b66 <HAL_ADC_Init+0x37e>
 8001b3a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b3e:	e012      	b.n	8001b66 <HAL_ADC_Init+0x37e>
 8001b40:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b44:	e00f      	b.n	8001b66 <HAL_ADC_Init+0x37e>
 8001b46:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b4a:	e00c      	b.n	8001b66 <HAL_ADC_Init+0x37e>
 8001b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b50:	e009      	b.n	8001b66 <HAL_ADC_Init+0x37e>
 8001b52:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001b56:	e006      	b.n	8001b66 <HAL_ADC_Init+0x37e>
 8001b58:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001b5c:	e003      	b.n	8001b66 <HAL_ADC_Init+0x37e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001b70:	4313      	orrs	r3, r2
 8001b72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d116      	bne.n	8001bb2 <HAL_ADC_Init+0x3ca>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b92:	f023 0302 	bic.w	r3, r3, #2
 8001b96:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7e1b      	ldrb	r3, [r3, #24]
 8001b9c:	039a      	lsls	r2, r3, #14
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001bac:	4313      	orrs	r3, r2
 8001bae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_ADC_Init+0x454>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d10c      	bne.n	8001bea <HAL_ADC_Init+0x402>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f023 010f 	bic.w	r1, r3, #15
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	1e5a      	subs	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
 8001be8:	e007      	b.n	8001bfa <HAL_ADC_Init+0x412>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 020f 	bic.w	r2, r2, #15
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f023 0303 	bic.w	r3, r3, #3
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c10:	e00a      	b.n	8001c28 <HAL_ADC_Init+0x440>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f023 0312 	bic.w	r3, r3, #18
 8001c1a:	f043 0210 	orr.w	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001c22:	2301      	movs	r3, #1
 8001c24:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001c28:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3788      	adds	r7, #136	; 0x88
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	50000400 	.word	0x50000400
 8001c38:	50000500 	.word	0x50000500
 8001c3c:	fff0c007 	.word	0xfff0c007

08001c40 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b0a3      	sub	sp, #140	; 0x8c
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x22>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e2ce      	b.n	8002214 <HAL_ADC_ConfigChannel+0x5c0>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 82b2 	bne.w	80021f2 <HAL_ADC_ConfigChannel+0x59e>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d81c      	bhi.n	8001cd0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	461a      	mov	r2, r3
 8001caa:	231f      	movs	r3, #31
 8001cac:	4093      	lsls	r3, r2
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	4019      	ands	r1, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cce:	e063      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b09      	cmp	r3, #9
 8001cd6:	d81e      	bhi.n	8001d16 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	3b1e      	subs	r3, #30
 8001cec:	221f      	movs	r2, #31
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4019      	ands	r1, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	3b1e      	subs	r3, #30
 8001d08:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34
 8001d14:	e040      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b0e      	cmp	r3, #14
 8001d1c:	d81e      	bhi.n	8001d5c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	3b3c      	subs	r3, #60	; 0x3c
 8001d32:	221f      	movs	r2, #31
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	3b3c      	subs	r3, #60	; 0x3c
 8001d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
 8001d5a:	e01d      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	3b5a      	subs	r3, #90	; 0x5a
 8001d70:	221f      	movs	r2, #31
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	4019      	ands	r1, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	3b5a      	subs	r3, #90	; 0x5a
 8001d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 80e9 	bne.w	8001f7a <HAL_ADC_ConfigChannel+0x326>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d91c      	bls.n	8001dea <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6999      	ldr	r1, [r3, #24]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b1e      	subs	r3, #30
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4019      	ands	r1, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6898      	ldr	r0, [r3, #8]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b1e      	subs	r3, #30
 8001ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	619a      	str	r2, [r3, #24]
 8001de8:	e019      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6959      	ldr	r1, [r3, #20]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4019      	ands	r1, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6898      	ldr	r0, [r3, #8]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	fa00 f203 	lsl.w	r2, r0, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d852      	bhi.n	8001ee8 <HAL_ADC_ConfigChannel+0x294>
 8001e42:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <HAL_ADC_ConfigChannel+0x1f4>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e7d 	.word	0x08001e7d
 8001e50:	08001ea1 	.word	0x08001ea1
 8001e54:	08001ec5 	.word	0x08001ec5
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e5e:	4b9c      	ldr	r3, [pc, #624]	; (80020d0 <HAL_ADC_ConfigChannel+0x47c>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	0691      	lsls	r1, r2, #26
 8001e68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e78:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e7a:	e081      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e82:	4b93      	ldr	r3, [pc, #588]	; (80020d0 <HAL_ADC_ConfigChannel+0x47c>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	0691      	lsls	r1, r2, #26
 8001e8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e90:	430a      	orrs	r2, r1
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e9c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e9e:	e06f      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x32c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ea6:	4b8a      	ldr	r3, [pc, #552]	; (80020d0 <HAL_ADC_ConfigChannel+0x47c>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	0691      	lsls	r1, r2, #26
 8001eb0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ec0:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ec2:	e05d      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001eca:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <HAL_ADC_ConfigChannel+0x47c>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	0691      	lsls	r1, r2, #26
 8001ed4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ee4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ee6:	e04b      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x32c>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	069b      	lsls	r3, r3, #26
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d107      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x2b8>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f0a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	069b      	lsls	r3, r3, #26
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d107      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x2dc>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f2e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	069b      	lsls	r3, r3, #26
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d107      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x300>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f52:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	069b      	lsls	r3, r3, #26
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d10a      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x32a>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f76:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f78:	e001      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x32a>
    }

  }
 8001f7a:	bf00      	nop
 8001f7c:	e000      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x32c>
      break;
 8001f7e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x34c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x34c>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x34e>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f040 8130 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x5b4>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d00f      	beq.n	8001fd0 <HAL_ADC_ConfigChannel+0x37c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	400a      	ands	r2, r1
 8001fca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001fce:	e049      	b.n	8002064 <HAL_ADC_ConfigChannel+0x410>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b09      	cmp	r3, #9
 8001ff0:	d91c      	bls.n	800202c <HAL_ADC_ConfigChannel+0x3d8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6999      	ldr	r1, [r3, #24]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	3b1b      	subs	r3, #27
 8002004:	2207      	movs	r2, #7
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	4019      	ands	r1, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6898      	ldr	r0, [r3, #8]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	3b1b      	subs	r3, #27
 800201e:	fa00 f203 	lsl.w	r2, r0, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	619a      	str	r2, [r3, #24]
 800202a:	e01b      	b.n	8002064 <HAL_ADC_ConfigChannel+0x410>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6959      	ldr	r1, [r3, #20]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	2207      	movs	r2, #7
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	4019      	ands	r1, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6898      	ldr	r0, [r3, #8]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	fa00 f203 	lsl.w	r2, r0, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800206c:	d004      	beq.n	8002078 <HAL_ADC_ConfigChannel+0x424>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_ADC_ConfigChannel+0x480>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_ADC_ConfigChannel+0x428>
 8002078:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_ADC_ConfigChannel+0x484>)
 800207a:	e000      	b.n	800207e <HAL_ADC_ConfigChannel+0x42a>
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_ADC_ConfigChannel+0x488>)
 800207e:	67fb      	str	r3, [r7, #124]	; 0x7c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b10      	cmp	r3, #16
 8002086:	d105      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x440>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002090:	2b00      	cmp	r3, #0
 8002092:	d015      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x46c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002098:	2b11      	cmp	r3, #17
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x454>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800209c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00b      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x46c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80020ac:	2b12      	cmp	r3, #18
 80020ae:	f040 80ab 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x5b4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80020b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 80a4 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x5b4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020c8:	d10a      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x48c>
 80020ca:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <HAL_ADC_ConfigChannel+0x480>)
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e022      	b.n	8002116 <HAL_ADC_ConfigChannel+0x4c2>
 80020d0:	83fff000 	.word	0x83fff000
 80020d4:	50000100 	.word	0x50000100
 80020d8:	50000300 	.word	0x50000300
 80020dc:	50000700 	.word	0x50000700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a4e      	ldr	r2, [pc, #312]	; (8002220 <HAL_ADC_ConfigChannel+0x5cc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d103      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x49e>
 80020ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	e011      	b.n	8002116 <HAL_ADC_ConfigChannel+0x4c2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a4b      	ldr	r2, [pc, #300]	; (8002224 <HAL_ADC_ConfigChannel+0x5d0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d102      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x4ae>
 80020fc:	4b4a      	ldr	r3, [pc, #296]	; (8002228 <HAL_ADC_ConfigChannel+0x5d4>)
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e009      	b.n	8002116 <HAL_ADC_ConfigChannel+0x4c2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a48      	ldr	r2, [pc, #288]	; (8002228 <HAL_ADC_ConfigChannel+0x5d4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d102      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x4be>
 800210c:	4b45      	ldr	r3, [pc, #276]	; (8002224 <HAL_ADC_ConfigChannel+0x5d0>)
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	e001      	b.n	8002116 <HAL_ADC_ConfigChannel+0x4c2>
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d108      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x4e2>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x4e2>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_ADC_ConfigChannel+0x4e4>
 8002136:	2300      	movs	r3, #0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d150      	bne.n	80021de <HAL_ADC_ConfigChannel+0x58a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800213c:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800213e:	2b00      	cmp	r3, #0
 8002140:	d010      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x510>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d107      	bne.n	800215e <HAL_ADC_ConfigChannel+0x50a>
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_ADC_ConfigChannel+0x50a>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_ADC_ConfigChannel+0x50c>
 800215e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002160:	2b00      	cmp	r3, #0
 8002162:	d13c      	bne.n	80021de <HAL_ADC_ConfigChannel+0x58a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b10      	cmp	r3, #16
 800216a:	d11d      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x554>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002174:	d118      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x554>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002176:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800217e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002180:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002182:	4b2a      	ldr	r3, [pc, #168]	; (800222c <HAL_ADC_ConfigChannel+0x5d8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a2a      	ldr	r2, [pc, #168]	; (8002230 <HAL_ADC_ConfigChannel+0x5dc>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	0c9a      	lsrs	r2, r3, #18
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002198:	e002      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x54c>
          {
            wait_loop_index--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3b01      	subs	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f9      	bne.n	800219a <HAL_ADC_ConfigChannel+0x546>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021a6:	e02e      	b.n	8002206 <HAL_ADC_ConfigChannel+0x5b2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b11      	cmp	r3, #17
 80021ae:	d10b      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x574>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b8:	d106      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x574>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80021ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80021c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021c4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021c6:	e01e      	b.n	8002206 <HAL_ADC_ConfigChannel+0x5b2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b12      	cmp	r3, #18
 80021ce:	d11a      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x5b2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80021d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021da:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021dc:	e013      	b.n	8002206 <HAL_ADC_ConfigChannel+0x5b2>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f043 0220 	orr.w	r2, r3, #32
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80021f0:	e00a      	b.n	8002208 <HAL_ADC_ConfigChannel+0x5b4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f043 0220 	orr.w	r2, r3, #32
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002204:	e000      	b.n	8002208 <HAL_ADC_ConfigChannel+0x5b4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002206:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002210:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8002214:	4618      	mov	r0, r3
 8002216:	378c      	adds	r7, #140	; 0x8c
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	50000100 	.word	0x50000100
 8002224:	50000400 	.word	0x50000400
 8002228:	50000500 	.word	0x50000500
 800222c:	20000000 	.word	0x20000000
 8002230:	431bde83 	.word	0x431bde83

08002234 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002234:	b480      	push	{r7}
 8002236:	b0a1      	sub	sp, #132	; 0x84
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800224c:	d102      	bne.n	8002254 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800224e:	4b6d      	ldr	r3, [pc, #436]	; (8002404 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	e01a      	b.n	800228a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a6a      	ldr	r2, [pc, #424]	; (8002404 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d103      	bne.n	8002266 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800225e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	e011      	b.n	800228a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a67      	ldr	r2, [pc, #412]	; (8002408 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d102      	bne.n	8002276 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002270:	4b66      	ldr	r3, [pc, #408]	; (800240c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e009      	b.n	800228a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a64      	ldr	r2, [pc, #400]	; (800240c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d102      	bne.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002280:	4b61      	ldr	r3, [pc, #388]	; (8002408 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e001      	b.n	800228a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0b0      	b.n	80023f6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800229e:	2302      	movs	r3, #2
 80022a0:	e0a9      	b.n	80023f6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f040 808d 	bne.w	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 8086 	bne.w	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022d0:	d004      	beq.n	80022dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d101      	bne.n	80022e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80022dc:	4b4c      	ldr	r3, [pc, #304]	; (8002410 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80022de:	e000      	b.n	80022e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80022e0:	4b4c      	ldr	r3, [pc, #304]	; (8002414 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80022e2:	67bb      	str	r3, [r7, #120]	; 0x78
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d040      	beq.n	800236e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80022ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022fe:	035b      	lsls	r3, r3, #13
 8002300:	430b      	orrs	r3, r1
 8002302:	431a      	orrs	r2, r3
 8002304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002306:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d108      	bne.n	8002328 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002328:	2300      	movs	r3, #0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d15c      	bne.n	80023e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d107      	bne.n	800234a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800234a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800234c:	2b00      	cmp	r3, #0
 800234e:	d14b      	bne.n	80023e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002358:	f023 030f 	bic.w	r3, r3, #15
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	6811      	ldr	r1, [r2, #0]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	6892      	ldr	r2, [r2, #8]
 8002364:	430a      	orrs	r2, r1
 8002366:	431a      	orrs	r2, r3
 8002368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800236a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800236c:	e03c      	b.n	80023e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800236e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002378:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d108      	bne.n	800239a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800239a:	2300      	movs	r3, #0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d123      	bne.n	80023e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d107      	bne.n	80023bc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80023bc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d112      	bne.n	80023e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80023c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023ca:	f023 030f 	bic.w	r3, r3, #15
 80023ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80023d0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023d2:	e009      	b.n	80023e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f043 0220 	orr.w	r2, r3, #32
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023e6:	e000      	b.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023e8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
} 
 80023f6:	4618      	mov	r0, r3
 80023f8:	3784      	adds	r7, #132	; 0x84
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	50000100 	.word	0x50000100
 8002408:	50000400 	.word	0x50000400
 800240c:	50000500 	.word	0x50000500
 8002410:	50000300 	.word	0x50000300
 8002414:	50000700 	.word	0x50000700

08002418 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d108      	bne.n	8002444 <ADC_Disable+0x2c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <ADC_Disable+0x2c>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <ADC_Disable+0x2e>
 8002444:	2300      	movs	r3, #0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d047      	beq.n	80024da <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 030d 	and.w	r3, r3, #13
 8002454:	2b01      	cmp	r3, #1
 8002456:	d10f      	bne.n	8002478 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0202 	orr.w	r2, r2, #2
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2203      	movs	r2, #3
 800246e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002470:	f7ff f986 	bl	8001780 <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002476:	e029      	b.n	80024cc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f043 0210 	orr.w	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e023      	b.n	80024dc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002494:	f7ff f974 	bl	8001780 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d914      	bls.n	80024cc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d10d      	bne.n	80024cc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f043 0210 	orr.w	r2, r3, #16
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e007      	b.n	80024dc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d0dc      	beq.n	8002494 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002500:	4013      	ands	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800250c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	60d3      	str	r3, [r2, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <__NVIC_GetPriorityGrouping+0x18>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0307 	and.w	r3, r3, #7
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	db0b      	blt.n	8002572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	4907      	ldr	r1, [pc, #28]	; (8002580 <__NVIC_EnableIRQ+0x38>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2001      	movs	r0, #1
 800256a:	fa00 f202 	lsl.w	r2, r0, r2
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000e100 	.word	0xe000e100

08002584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	2b00      	cmp	r3, #0
 8002596:	db0a      	blt.n	80025ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	490c      	ldr	r1, [pc, #48]	; (80025d0 <__NVIC_SetPriority+0x4c>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	440b      	add	r3, r1
 80025a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ac:	e00a      	b.n	80025c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4908      	ldr	r1, [pc, #32]	; (80025d4 <__NVIC_SetPriority+0x50>)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	3b04      	subs	r3, #4
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	440b      	add	r3, r1
 80025c2:	761a      	strb	r2, [r3, #24]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000e100 	.word	0xe000e100
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f1c3 0307 	rsb	r3, r3, #7
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	bf28      	it	cs
 80025f6:	2304      	movcs	r3, #4
 80025f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d902      	bls.n	8002608 <NVIC_EncodePriority+0x30>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3b03      	subs	r3, #3
 8002606:	e000      	b.n	800260a <NVIC_EncodePriority+0x32>
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	f04f 32ff 	mov.w	r2, #4294967295
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	401a      	ands	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43d9      	mvns	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	4313      	orrs	r3, r2
         );
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002650:	d301      	bcc.n	8002656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002652:	2301      	movs	r3, #1
 8002654:	e00f      	b.n	8002676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <SysTick_Config+0x40>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265e:	210f      	movs	r1, #15
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	f7ff ff8e 	bl	8002584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <SysTick_Config+0x40>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <SysTick_Config+0x40>)
 8002670:	2207      	movs	r2, #7
 8002672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	e000e010 	.word	0xe000e010

08002684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ff29 	bl	80024e4 <__NVIC_SetPriorityGrouping>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ac:	f7ff ff3e 	bl	800252c <__NVIC_GetPriorityGrouping>
 80026b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7ff ff8e 	bl	80025d8 <NVIC_EncodePriority>
 80026bc:	4602      	mov	r2, r0
 80026be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff5d 	bl	8002584 <__NVIC_SetPriority>
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff31 	bl	8002548 <__NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffa2 	bl	8002640 <SysTick_Config>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002716:	e160      	b.n	80029da <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2101      	movs	r1, #1
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	4013      	ands	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8152 	beq.w	80029d4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d005      	beq.n	8002748 <HAL_GPIO_Init+0x40>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d130      	bne.n	80027aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	2203      	movs	r2, #3
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800277e:	2201      	movs	r2, #1
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f003 0201 	and.w	r2, r3, #1
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d017      	beq.n	80027e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	2203      	movs	r2, #3
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d123      	bne.n	800283a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	08da      	lsrs	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3208      	adds	r2, #8
 80027fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	220f      	movs	r2, #15
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3208      	adds	r2, #8
 8002834:	6939      	ldr	r1, [r7, #16]
 8002836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0203 	and.w	r2, r3, #3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80ac 	beq.w	80029d4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287c:	4b5e      	ldr	r3, [pc, #376]	; (80029f8 <HAL_GPIO_Init+0x2f0>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4a5d      	ldr	r2, [pc, #372]	; (80029f8 <HAL_GPIO_Init+0x2f0>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6193      	str	r3, [r2, #24]
 8002888:	4b5b      	ldr	r3, [pc, #364]	; (80029f8 <HAL_GPIO_Init+0x2f0>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002894:	4a59      	ldr	r2, [pc, #356]	; (80029fc <HAL_GPIO_Init+0x2f4>)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	3302      	adds	r3, #2
 800289c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028be:	d025      	beq.n	800290c <HAL_GPIO_Init+0x204>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a4f      	ldr	r2, [pc, #316]	; (8002a00 <HAL_GPIO_Init+0x2f8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d01f      	beq.n	8002908 <HAL_GPIO_Init+0x200>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a4e      	ldr	r2, [pc, #312]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d019      	beq.n	8002904 <HAL_GPIO_Init+0x1fc>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a4d      	ldr	r2, [pc, #308]	; (8002a08 <HAL_GPIO_Init+0x300>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d013      	beq.n	8002900 <HAL_GPIO_Init+0x1f8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a4c      	ldr	r2, [pc, #304]	; (8002a0c <HAL_GPIO_Init+0x304>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00d      	beq.n	80028fc <HAL_GPIO_Init+0x1f4>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a4b      	ldr	r2, [pc, #300]	; (8002a10 <HAL_GPIO_Init+0x308>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d007      	beq.n	80028f8 <HAL_GPIO_Init+0x1f0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a4a      	ldr	r2, [pc, #296]	; (8002a14 <HAL_GPIO_Init+0x30c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d101      	bne.n	80028f4 <HAL_GPIO_Init+0x1ec>
 80028f0:	2306      	movs	r3, #6
 80028f2:	e00c      	b.n	800290e <HAL_GPIO_Init+0x206>
 80028f4:	2307      	movs	r3, #7
 80028f6:	e00a      	b.n	800290e <HAL_GPIO_Init+0x206>
 80028f8:	2305      	movs	r3, #5
 80028fa:	e008      	b.n	800290e <HAL_GPIO_Init+0x206>
 80028fc:	2304      	movs	r3, #4
 80028fe:	e006      	b.n	800290e <HAL_GPIO_Init+0x206>
 8002900:	2303      	movs	r3, #3
 8002902:	e004      	b.n	800290e <HAL_GPIO_Init+0x206>
 8002904:	2302      	movs	r3, #2
 8002906:	e002      	b.n	800290e <HAL_GPIO_Init+0x206>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_GPIO_Init+0x206>
 800290c:	2300      	movs	r3, #0
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	f002 0203 	and.w	r2, r2, #3
 8002914:	0092      	lsls	r2, r2, #2
 8002916:	4093      	lsls	r3, r2
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800291e:	4937      	ldr	r1, [pc, #220]	; (80029fc <HAL_GPIO_Init+0x2f4>)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800292c:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <HAL_GPIO_Init+0x310>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002950:	4a31      	ldr	r2, [pc, #196]	; (8002a18 <HAL_GPIO_Init+0x310>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002956:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_GPIO_Init+0x310>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	43db      	mvns	r3, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800297a:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <HAL_GPIO_Init+0x310>)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002980:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <HAL_GPIO_Init+0x310>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029a4:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_GPIO_Init+0x310>)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_GPIO_Init+0x310>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <HAL_GPIO_Init+0x310>)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3301      	adds	r3, #1
 80029d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f ae97 	bne.w	8002718 <HAL_GPIO_Init+0x10>
  }
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40010000 	.word	0x40010000
 8002a00:	48000400 	.word	0x48000400
 8002a04:	48000800 	.word	0x48000800
 8002a08:	48000c00 	.word	0x48000c00
 8002a0c:	48001000 	.word	0x48001000
 8002a10:	48001400 	.word	0x48001400
 8002a14:	48001800 	.word	0x48001800
 8002a18:	40010400 	.word	0x40010400

08002a1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	e001      	b.n	8002a3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a5c:	787b      	ldrb	r3, [r7, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a8c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d102      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f001 b83a 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 816f 	beq.w	8002d96 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ab8:	4bb5      	ldr	r3, [pc, #724]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d00c      	beq.n	8002ade <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ac4:	4bb2      	ldr	r3, [pc, #712]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d15c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x10e>
 8002ad0:	4baf      	ldr	r3, [pc, #700]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002adc:	d155      	bne.n	8002b8a <HAL_RCC_OscConfig+0x10e>
 8002ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002af2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d102      	bne.n	8002b10 <HAL_RCC_OscConfig+0x94>
 8002b0a:	4ba1      	ldr	r3, [pc, #644]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	e015      	b.n	8002b3c <HAL_RCC_OscConfig+0xc0>
 8002b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b14:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b28:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b2c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b38:	4b95      	ldr	r3, [pc, #596]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b40:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002b44:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002b48:	fa92 f2a2 	rbit	r2, r2
 8002b4c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002b50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b54:	fab2 f282 	clz	r2, r2
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	f042 0220 	orr.w	r2, r2, #32
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	f002 021f 	and.w	r2, r2, #31
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8111 	beq.w	8002d94 <HAL_RCC_OscConfig+0x318>
 8002b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 8108 	bne.w	8002d94 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f000 bfc6 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x12e>
 8002b9c:	4b7c      	ldr	r3, [pc, #496]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a7b      	ldr	r2, [pc, #492]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	e036      	b.n	8002c18 <HAL_RCC_OscConfig+0x19c>
 8002baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x158>
 8002bba:	4b75      	ldr	r3, [pc, #468]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a74      	ldr	r2, [pc, #464]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b72      	ldr	r3, [pc, #456]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a71      	ldr	r2, [pc, #452]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e021      	b.n	8002c18 <HAL_RCC_OscConfig+0x19c>
 8002bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x184>
 8002be6:	4b6a      	ldr	r3, [pc, #424]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a69      	ldr	r2, [pc, #420]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4b67      	ldr	r3, [pc, #412]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a66      	ldr	r2, [pc, #408]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0x19c>
 8002c00:	4b63      	ldr	r3, [pc, #396]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a62      	ldr	r2, [pc, #392]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b60      	ldr	r3, [pc, #384]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a5f      	ldr	r2, [pc, #380]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c16:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d059      	beq.n	8002cdc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7fe fdaa 	bl	8001780 <HAL_GetTick>
 8002c2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c32:	f7fe fda5 	bl	8001780 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d902      	bls.n	8002c48 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	f000 bf67 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
 8002c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c4c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002c5c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d102      	bne.n	8002c7a <HAL_RCC_OscConfig+0x1fe>
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	e015      	b.n	8002ca6 <HAL_RCC_OscConfig+0x22a>
 8002c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c92:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c96:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002caa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002cae:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002cb2:	fa92 f2a2 	rbit	r2, r2
 8002cb6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002cba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002cbe:	fab2 f282 	clz	r2, r2
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	f042 0220 	orr.w	r2, r2, #32
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	f002 021f 	and.w	r2, r2, #31
 8002cce:	2101      	movs	r1, #1
 8002cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0ab      	beq.n	8002c32 <HAL_RCC_OscConfig+0x1b6>
 8002cda:	e05c      	b.n	8002d96 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fd50 	bl	8001780 <HAL_GetTick>
 8002ce0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce6:	f7fe fd4b 	bl	8001780 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d902      	bls.n	8002cfc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	f000 bf0d 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
 8002cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d00:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002d10:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2b2>
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	e015      	b.n	8002d5a <HAL_RCC_OscConfig+0x2de>
 8002d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <HAL_RCC_OscConfig+0x314>)
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d5e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002d62:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002d6e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0220 	orr.w	r2, r2, #32
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ab      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x26a>
 8002d8e:	e002      	b.n	8002d96 <HAL_RCC_OscConfig+0x31a>
 8002d90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 817f 	beq.w	80030aa <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002dac:	4ba7      	ldr	r3, [pc, #668]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002db8:	4ba4      	ldr	r3, [pc, #656]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d173      	bne.n	8002eac <HAL_RCC_OscConfig+0x430>
 8002dc4:	4ba1      	ldr	r3, [pc, #644]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd0:	d16c      	bne.n	8002eac <HAL_RCC_OscConfig+0x430>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002de4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d102      	bne.n	8002e02 <HAL_RCC_OscConfig+0x386>
 8002dfc:	4b93      	ldr	r3, [pc, #588]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	e013      	b.n	8002e2a <HAL_RCC_OscConfig+0x3ae>
 8002e02:	2302      	movs	r3, #2
 8002e04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002e14:	2302      	movs	r3, #2
 8002e16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e1a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e26:	4b89      	ldr	r3, [pc, #548]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002e30:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002e34:	fa92 f2a2 	rbit	r2, r2
 8002e38:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002e3c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e40:	fab2 f282 	clz	r2, r2
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	f042 0220 	orr.w	r2, r2, #32
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	f002 021f 	and.w	r2, r2, #31
 8002e50:	2101      	movs	r1, #1
 8002e52:	fa01 f202 	lsl.w	r2, r1, r2
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCC_OscConfig+0x3f6>
 8002e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d002      	beq.n	8002e72 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f000 be52 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b76      	ldr	r3, [pc, #472]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	21f8      	movs	r1, #248	; 0xf8
 8002e88:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002e90:	fa91 f1a1 	rbit	r1, r1
 8002e94:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002e98:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e9c:	fab1 f181 	clz	r1, r1
 8002ea0:	b2c9      	uxtb	r1, r1
 8002ea2:	408b      	lsls	r3, r1
 8002ea4:	4969      	ldr	r1, [pc, #420]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	e0fe      	b.n	80030aa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8088 	beq.w	8002fce <HAL_RCC_OscConfig+0x552>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002ed0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ede:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fe fc49 	bl	8001780 <HAL_GetTick>
 8002eee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef4:	f7fe fc44 	bl	8001780 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d902      	bls.n	8002f0a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	f000 be06 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002f1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d102      	bne.n	8002f3a <HAL_RCC_OscConfig+0x4be>
 8002f34:	4b45      	ldr	r3, [pc, #276]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	e013      	b.n	8002f62 <HAL_RCC_OscConfig+0x4e6>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f52:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	2202      	movs	r2, #2
 8002f64:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002f68:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002f6c:	fa92 f2a2 	rbit	r2, r2
 8002f70:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002f74:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f78:	fab2 f282 	clz	r2, r2
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	f042 0220 	orr.w	r2, r2, #32
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	f002 021f 	and.w	r2, r2, #31
 8002f88:	2101      	movs	r1, #1
 8002f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0af      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	21f8      	movs	r1, #248	; 0xf8
 8002faa:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002fb2:	fa91 f1a1 	rbit	r1, r1
 8002fb6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002fba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fbe:	fab1 f181 	clz	r1, r1
 8002fc2:	b2c9      	uxtb	r1, r1
 8002fc4:	408b      	lsls	r3, r1
 8002fc6:	4921      	ldr	r1, [pc, #132]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e06d      	b.n	80030aa <HAL_RCC_OscConfig+0x62e>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002fe0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fbc1 	bl	8001780 <HAL_GetTick>
 8002ffe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003004:	f7fe fbbc 	bl	8001780 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d902      	bls.n	800301a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	f000 bd7e 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
 800301a:	2302      	movs	r3, #2
 800301c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800302c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCC_OscConfig+0x5d4>
 8003044:	4b01      	ldr	r3, [pc, #4]	; (800304c <HAL_RCC_OscConfig+0x5d0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	e016      	b.n	8003078 <HAL_RCC_OscConfig+0x5fc>
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000
 8003050:	2302      	movs	r3, #2
 8003052:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003062:	2302      	movs	r3, #2
 8003064:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003068:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003074:	4bbf      	ldr	r3, [pc, #764]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2202      	movs	r2, #2
 800307a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800307e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003082:	fa92 f2a2 	rbit	r2, r2
 8003086:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800308a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800308e:	fab2 f282 	clz	r2, r2
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f042 0220 	orr.w	r2, r2, #32
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f002 021f 	and.w	r2, r2, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ac      	bne.n	8003004 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8113 	beq.w	80032e6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d07c      	beq.n	80031ca <HAL_RCC_OscConfig+0x74e>
 80030d0:	2301      	movs	r3, #1
 80030d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80030e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	4ba2      	ldr	r3, [pc, #648]	; (8003378 <HAL_RCC_OscConfig+0x8fc>)
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	461a      	mov	r2, r3
 80030f6:	2301      	movs	r3, #1
 80030f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fa:	f7fe fb41 	bl	8001780 <HAL_GetTick>
 80030fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003104:	f7fe fb3c 	bl	8001780 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d902      	bls.n	800311a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	f000 bcfe 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
 800311a:	2302      	movs	r3, #2
 800311c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003124:	fa93 f2a3 	rbit	r2, r3
 8003128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800312c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800313a:	2202      	movs	r2, #2
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fa93 f2a3 	rbit	r2, r3
 800314c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800315a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800315e:	2202      	movs	r2, #2
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003166:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003174:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003178:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	4b7e      	ldr	r3, [pc, #504]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 800317c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800317e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003182:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003186:	2102      	movs	r1, #2
 8003188:	6019      	str	r1, [r3, #0]
 800318a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	fa93 f1a3 	rbit	r1, r3
 8003198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031a0:	6019      	str	r1, [r3, #0]
  return result;
 80031a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	2101      	movs	r1, #1
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d09d      	beq.n	8003104 <HAL_RCC_OscConfig+0x688>
 80031c8:	e08d      	b.n	80032e6 <HAL_RCC_OscConfig+0x86a>
 80031ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	fa93 f2a3 	rbit	r2, r3
 80031e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031ec:	601a      	str	r2, [r3, #0]
  return result;
 80031ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031f6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	4b5d      	ldr	r3, [pc, #372]	; (8003378 <HAL_RCC_OscConfig+0x8fc>)
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	461a      	mov	r2, r3
 8003208:	2300      	movs	r3, #0
 800320a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7fe fab8 	bl	8001780 <HAL_GetTick>
 8003210:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	e00a      	b.n	800322c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003216:	f7fe fab3 	bl	8001780 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d902      	bls.n	800322c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	f000 bc75 	b.w	8003b16 <HAL_RCC_OscConfig+0x109a>
 800322c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003230:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003234:	2202      	movs	r2, #2
 8003236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	fa93 f2a3 	rbit	r2, r3
 8003246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800324a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003258:	2202      	movs	r2, #2
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003260:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003278:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800327c:	2202      	movs	r2, #2
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003284:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003292:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003296:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003298:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 800329a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800329c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032a4:	2102      	movs	r1, #2
 80032a6:	6019      	str	r1, [r3, #0]
 80032a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fa93 f1a3 	rbit	r1, r3
 80032b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ba:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032be:	6019      	str	r1, [r3, #0]
  return result;
 80032c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d197      	bne.n	8003216 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 81a5 	beq.w	8003646 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d116      	bne.n	800333c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003318:	61d3      	str	r3, [r2, #28]
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_RCC_OscConfig+0x8f8>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003330:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003334:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_RCC_OscConfig+0x900>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d121      	bne.n	800338c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_RCC_OscConfig+0x900>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0b      	ldr	r2, [pc, #44]	; (800337c <HAL_RCC_OscConfig+0x900>)
 800334e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003352:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003354:	f7fe fa14 	bl	8001780 <HAL_GetTick>
 8003358:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	e010      	b.n	8003380 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335e:	f7fe fa0f 	bl	8001780 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d908      	bls.n	8003380 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e3d1      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	10908120 	.word	0x10908120
 800337c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b8d      	ldr	r3, [pc, #564]	; (80035b8 <HAL_RCC_OscConfig+0xb3c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0e8      	beq.n	800335e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003390:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d106      	bne.n	80033aa <HAL_RCC_OscConfig+0x92e>
 800339c:	4b87      	ldr	r3, [pc, #540]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4a86      	ldr	r2, [pc, #536]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6213      	str	r3, [r2, #32]
 80033a8:	e035      	b.n	8003416 <HAL_RCC_OscConfig+0x99a>
 80033aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x958>
 80033ba:	4b80      	ldr	r3, [pc, #512]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4a7f      	ldr	r2, [pc, #508]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6213      	str	r3, [r2, #32]
 80033c6:	4b7d      	ldr	r3, [pc, #500]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4a7c      	ldr	r2, [pc, #496]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033cc:	f023 0304 	bic.w	r3, r3, #4
 80033d0:	6213      	str	r3, [r2, #32]
 80033d2:	e020      	b.n	8003416 <HAL_RCC_OscConfig+0x99a>
 80033d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b05      	cmp	r3, #5
 80033e2:	d10c      	bne.n	80033fe <HAL_RCC_OscConfig+0x982>
 80033e4:	4b75      	ldr	r3, [pc, #468]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4a74      	ldr	r2, [pc, #464]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033ea:	f043 0304 	orr.w	r3, r3, #4
 80033ee:	6213      	str	r3, [r2, #32]
 80033f0:	4b72      	ldr	r3, [pc, #456]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4a71      	ldr	r2, [pc, #452]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6213      	str	r3, [r2, #32]
 80033fc:	e00b      	b.n	8003416 <HAL_RCC_OscConfig+0x99a>
 80033fe:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a6e      	ldr	r2, [pc, #440]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	4b6c      	ldr	r3, [pc, #432]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4a6b      	ldr	r2, [pc, #428]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8081 	beq.w	800352a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003428:	f7fe f9aa 	bl	8001780 <HAL_GetTick>
 800342c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	e00b      	b.n	800344a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fe f9a5 	bl	8001780 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e365      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
 800344a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800344e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003452:	2202      	movs	r2, #2
 8003454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800345a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	fa93 f2a3 	rbit	r2, r3
 8003464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003468:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003472:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003476:	2202      	movs	r2, #2
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800347e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	fa93 f2a3 	rbit	r2, r3
 8003488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800348c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003490:	601a      	str	r2, [r3, #0]
  return result;
 8003492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003496:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800349a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f043 0302 	orr.w	r3, r3, #2
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_OscConfig+0xa3a>
 80034b0:	4b42      	ldr	r3, [pc, #264]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	e013      	b.n	80034de <HAL_RCC_OscConfig+0xa62>
 80034b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034be:	2202      	movs	r2, #2
 80034c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	fa93 f2a3 	rbit	r2, r3
 80034d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	4b38      	ldr	r3, [pc, #224]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80034e6:	2102      	movs	r1, #2
 80034e8:	6011      	str	r1, [r2, #0]
 80034ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034ee:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	fa92 f1a2 	rbit	r1, r2
 80034f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034fc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003500:	6011      	str	r1, [r2, #0]
  return result;
 8003502:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003506:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	fab2 f282 	clz	r2, r2
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f002 021f 	and.w	r2, r2, #31
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f202 	lsl.w	r2, r1, r2
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d084      	beq.n	8003432 <HAL_RCC_OscConfig+0x9b6>
 8003528:	e083      	b.n	8003632 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352a:	f7fe f929 	bl	8001780 <HAL_GetTick>
 800352e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fe f924 	bl	8001780 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e2e4      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
 800354c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003550:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003554:	2202      	movs	r2, #2
 8003556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800355c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800356a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003574:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003578:	2202      	movs	r2, #2
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003580:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800358e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003592:	601a      	str	r2, [r3, #0]
  return result;
 8003594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003598:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800359c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f043 0302 	orr.w	r3, r3, #2
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d106      	bne.n	80035c0 <HAL_RCC_OscConfig+0xb44>
 80035b2:	4b02      	ldr	r3, [pc, #8]	; (80035bc <HAL_RCC_OscConfig+0xb40>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	e017      	b.n	80035e8 <HAL_RCC_OscConfig+0xb6c>
 80035b8:	40007000 	.word	0x40007000
 80035bc:	40021000 	.word	0x40021000
 80035c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80035c8:	2202      	movs	r2, #2
 80035ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	fa93 f2a3 	rbit	r2, r3
 80035da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035de:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	4bb3      	ldr	r3, [pc, #716]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035f0:	2102      	movs	r1, #2
 80035f2:	6011      	str	r1, [r2, #0]
 80035f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	fa92 f1a2 	rbit	r1, r2
 8003602:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003606:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800360a:	6011      	str	r1, [r2, #0]
  return result;
 800360c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003610:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	fab2 f282 	clz	r2, r2
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f002 021f 	and.w	r2, r2, #31
 8003626:	2101      	movs	r1, #1
 8003628:	fa01 f202 	lsl.w	r2, r1, r2
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d180      	bne.n	8003534 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003632:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4b9e      	ldr	r3, [pc, #632]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4a9d      	ldr	r2, [pc, #628]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003644:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800364a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 825e 	beq.w	8003b14 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003658:	4b96      	ldr	r3, [pc, #600]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	f000 821f 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800366a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	f040 8170 	bne.w	8003958 <HAL_RCC_OscConfig+0xedc>
 8003678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800367c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003680:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800368a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	fa93 f2a3 	rbit	r2, r3
 8003694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003698:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800369c:	601a      	str	r2, [r3, #0]
  return result;
 800369e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036a6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	461a      	mov	r2, r3
 80036ba:	2300      	movs	r3, #0
 80036bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fe f85f 	bl	8001780 <HAL_GetTick>
 80036c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c6:	e009      	b.n	80036dc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe f85a 	bl	8001780 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e21c      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
 80036dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036e0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	fa93 f2a3 	rbit	r2, r3
 80036f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003700:	601a      	str	r2, [r3, #0]
  return result;
 8003702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003706:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800370a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370c:	fab3 f383 	clz	r3, r3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d102      	bne.n	8003726 <HAL_RCC_OscConfig+0xcaa>
 8003720:	4b64      	ldr	r3, [pc, #400]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	e027      	b.n	8003776 <HAL_RCC_OscConfig+0xcfa>
 8003726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800372e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003738:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	fa93 f2a3 	rbit	r2, r3
 8003742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003746:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003750:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	4b50      	ldr	r3, [pc, #320]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800377a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800377e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003782:	6011      	str	r1, [r2, #0]
 8003784:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003788:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	fa92 f1a2 	rbit	r1, r2
 8003792:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003796:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800379a:	6011      	str	r1, [r2, #0]
  return result;
 800379c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037a0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	fab2 f282 	clz	r2, r2
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	f042 0220 	orr.w	r2, r2, #32
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	f002 021f 	and.w	r2, r2, #31
 80037b6:	2101      	movs	r1, #1
 80037b8:	fa01 f202 	lsl.w	r2, r1, r2
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d182      	bne.n	80036c8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037c2:	4b3c      	ldr	r3, [pc, #240]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	f023 020f 	bic.w	r2, r3, #15
 80037ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	4937      	ldr	r1, [pc, #220]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	62cb      	str	r3, [r1, #44]	; 0x2c
 80037dc:	4b35      	ldr	r3, [pc, #212]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80037e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6a19      	ldr	r1, [r3, #32]
 80037f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	492d      	ldr	r1, [pc, #180]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003808:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800380c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003816:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	fa93 f2a3 	rbit	r2, r3
 8003820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003824:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003828:	601a      	str	r2, [r3, #0]
  return result;
 800382a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003832:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003834:	fab3 f383 	clz	r3, r3
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800383e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	461a      	mov	r2, r3
 8003846:	2301      	movs	r3, #1
 8003848:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384a:	f7fd ff99 	bl	8001780 <HAL_GetTick>
 800384e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003852:	e009      	b.n	8003868 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003854:	f7fd ff94 	bl	8001780 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e156      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
 8003868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800386c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800387a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	fa93 f2a3 	rbit	r2, r3
 8003884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003888:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800388c:	601a      	str	r2, [r3, #0]
  return result;
 800388e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003892:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003896:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003898:	fab3 f383 	clz	r3, r3
 800389c:	b2db      	uxtb	r3, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d105      	bne.n	80038b8 <HAL_RCC_OscConfig+0xe3c>
 80038ac:	4b01      	ldr	r3, [pc, #4]	; (80038b4 <HAL_RCC_OscConfig+0xe38>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	e02a      	b.n	8003908 <HAL_RCC_OscConfig+0xe8c>
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038bc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ca:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	fa93 f2a3 	rbit	r2, r3
 80038d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80038e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	fa93 f2a3 	rbit	r2, r3
 80038fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fe:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	4b86      	ldr	r3, [pc, #536]	; (8003b20 <HAL_RCC_OscConfig+0x10a4>)
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800390c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003910:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003914:	6011      	str	r1, [r2, #0]
 8003916:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800391a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	fa92 f1a2 	rbit	r1, r2
 8003924:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003928:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800392c:	6011      	str	r1, [r2, #0]
  return result;
 800392e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003932:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	fab2 f282 	clz	r2, r2
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	f042 0220 	orr.w	r2, r2, #32
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	f002 021f 	and.w	r2, r2, #31
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f202 	lsl.w	r2, r1, r2
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	f43f af7f 	beq.w	8003854 <HAL_RCC_OscConfig+0xdd8>
 8003956:	e0dd      	b.n	8003b14 <HAL_RCC_OscConfig+0x1098>
 8003958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800395c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800396a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	fa93 f2a3 	rbit	r2, r3
 8003974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003978:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800397c:	601a      	str	r2, [r3, #0]
  return result;
 800397e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003982:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003986:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003988:	fab3 f383 	clz	r3, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003992:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	461a      	mov	r2, r3
 800399a:	2300      	movs	r3, #0
 800399c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399e:	f7fd feef 	bl	8001780 <HAL_GetTick>
 80039a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a6:	e009      	b.n	80039bc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fd feea 	bl	8001780 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0ac      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
 80039bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f2a3 	rbit	r2, r3
 80039d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039e0:	601a      	str	r2, [r3, #0]
  return result;
 80039e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ec:	fab3 f383 	clz	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_RCC_OscConfig+0xf8a>
 8003a00:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCC_OscConfig+0x10a4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	e027      	b.n	8003a56 <HAL_RCC_OscConfig+0xfda>
 8003a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a0a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	fa93 f2a3 	rbit	r2, r3
 8003a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a26:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a30:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	fa93 f2a3 	rbit	r2, r3
 8003a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a4c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	4b33      	ldr	r3, [pc, #204]	; (8003b20 <HAL_RCC_OscConfig+0x10a4>)
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a5a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a62:	6011      	str	r1, [r2, #0]
 8003a64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a68:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	fa92 f1a2 	rbit	r1, r2
 8003a72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a76:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003a7a:	6011      	str	r1, [r2, #0]
  return result;
 8003a7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a80:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	fab2 f282 	clz	r2, r2
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	f042 0220 	orr.w	r2, r2, #32
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	f002 021f 	and.w	r2, r2, #31
 8003a96:	2101      	movs	r1, #1
 8003a98:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d182      	bne.n	80039a8 <HAL_RCC_OscConfig+0xf2c>
 8003aa2:	e037      	b.n	8003b14 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e02e      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ab8:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_RCC_OscConfig+0x10a4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003ac0:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <HAL_RCC_OscConfig+0x10a4>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ac8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003acc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d117      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003ae0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ae4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000

08003b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b09e      	sub	sp, #120	; 0x78
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e162      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b90      	ldr	r3, [pc, #576]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d910      	bls.n	8003b6c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b8d      	ldr	r3, [pc, #564]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 0207 	bic.w	r2, r3, #7
 8003b52:	498b      	ldr	r1, [pc, #556]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b89      	ldr	r3, [pc, #548]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e14a      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b78:	4b82      	ldr	r3, [pc, #520]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	497f      	ldr	r1, [pc, #508]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80dc 	beq.w	8003d50 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d13c      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xf6>
 8003ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ba4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ba8:	fa93 f3a3 	rbit	r3, r3
 8003bac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb0:	fab3 f383 	clz	r3, r3
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d102      	bne.n	8003bca <HAL_RCC_ClockConfig+0xa6>
 8003bc4:	4b6f      	ldr	r3, [pc, #444]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	e00f      	b.n	8003bea <HAL_RCC_ClockConfig+0xc6>
 8003bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	667b      	str	r3, [r7, #100]	; 0x64
 8003bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003be6:	4b67      	ldr	r3, [pc, #412]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bee:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bf2:	fa92 f2a2 	rbit	r2, r2
 8003bf6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bfa:	fab2 f282 	clz	r2, r2
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	f042 0220 	orr.w	r2, r2, #32
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	f002 021f 	and.w	r2, r2, #31
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d17b      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0f3      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d13c      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x178>
 8003c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d102      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x128>
 8003c46:	4b4f      	ldr	r3, [pc, #316]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	e00f      	b.n	8003c6c <HAL_RCC_ClockConfig+0x148>
 8003c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c54:	fa93 f3a3 	rbit	r3, r3
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
 8003c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c68:	4b46      	ldr	r3, [pc, #280]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c70:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c74:	fa92 f2a2 	rbit	r2, r2
 8003c78:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c7c:	fab2 f282 	clz	r2, r2
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	f042 0220 	orr.w	r2, r2, #32
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	f002 021f 	and.w	r2, r2, #31
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d13a      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0b2      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x1a0>
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	e00d      	b.n	8003ce0 <HAL_RCC_ClockConfig+0x1bc>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	fa93 f3a3 	rbit	r3, r3
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	623b      	str	r3, [r7, #32]
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	61ba      	str	r2, [r7, #24]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	fa92 f2a2 	rbit	r2, r2
 8003cea:	617a      	str	r2, [r7, #20]
  return result;
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	fab2 f282 	clz	r2, r2
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	f042 0220 	orr.w	r2, r2, #32
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	f002 021f 	and.w	r2, r2, #31
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f202 	lsl.w	r2, r1, r2
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e079      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f023 0203 	bic.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	491a      	ldr	r1, [pc, #104]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d20:	f7fd fd2e 	bl	8001780 <HAL_GetTick>
 8003d24:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d28:	f7fd fd2a 	bl	8001780 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e061      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 020c 	and.w	r2, r3, #12
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d1eb      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d214      	bcs.n	8003d88 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 0207 	bic.w	r2, r3, #7
 8003d66:	4906      	ldr	r1, [pc, #24]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6e:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <HAL_RCC_ClockConfig+0x25c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e040      	b.n	8003e02 <HAL_RCC_ClockConfig+0x2de>
 8003d80:	40022000 	.word	0x40022000
 8003d84:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d94:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <HAL_RCC_ClockConfig+0x2e8>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	491a      	ldr	r1, [pc, #104]	; (8003e0c <HAL_RCC_ClockConfig+0x2e8>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003db2:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <HAL_RCC_ClockConfig+0x2e8>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4912      	ldr	r1, [pc, #72]	; (8003e0c <HAL_RCC_ClockConfig+0x2e8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dc6:	f000 f829 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8003dca:	4601      	mov	r1, r0
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <HAL_RCC_ClockConfig+0x2e8>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd4:	22f0      	movs	r2, #240	; 0xf0
 8003dd6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	fa92 f2a2 	rbit	r2, r2
 8003dde:	60fa      	str	r2, [r7, #12]
  return result;
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	fab2 f282 	clz	r2, r2
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	40d3      	lsrs	r3, r2
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <HAL_RCC_ClockConfig+0x2ec>)
 8003dec:	5cd3      	ldrb	r3, [r2, r3]
 8003dee:	fa21 f303 	lsr.w	r3, r1, r3
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <HAL_RCC_ClockConfig+0x2f0>)
 8003df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <HAL_RCC_ClockConfig+0x2f4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fd fc7c 	bl	80016f8 <HAL_InitTick>
  
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3778      	adds	r7, #120	; 0x78
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	0800625c 	.word	0x0800625c
 8003e14:	20000000 	.word	0x20000000
 8003e18:	20000004 	.word	0x20000004

08003e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b08b      	sub	sp, #44	; 0x2c
 8003e20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e36:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d002      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0x30>
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d003      	beq.n	8003e52 <HAL_RCC_GetSysClockFreq+0x36>
 8003e4a:	e03f      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e4c:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e4e:	623b      	str	r3, [r7, #32]
      break;
 8003e50:	e03f      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e58:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e5c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	fa92 f2a2 	rbit	r2, r2
 8003e64:	607a      	str	r2, [r7, #4]
  return result;
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	fab2 f282 	clz	r2, r2
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	40d3      	lsrs	r3, r2
 8003e70:	4a1d      	ldr	r2, [pc, #116]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e72:	5cd3      	ldrb	r3, [r2, r3]
 8003e74:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	220f      	movs	r2, #15
 8003e80:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	fa92 f2a2 	rbit	r2, r2
 8003e88:	60fa      	str	r2, [r7, #12]
  return result;
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	fab2 f282 	clz	r2, r2
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	40d3      	lsrs	r3, r2
 8003e94:	4a15      	ldr	r2, [pc, #84]	; (8003eec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e96:	5cd3      	ldrb	r3, [r2, r3]
 8003e98:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ea4:	4a0f      	ldr	r2, [pc, #60]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb4:	e007      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003eb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	623b      	str	r3, [r7, #32]
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ece:	623b      	str	r3, [r7, #32]
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	372c      	adds	r7, #44	; 0x2c
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	007a1200 	.word	0x007a1200
 8003ee8:	08006274 	.word	0x08006274
 8003eec:	08006284 	.word	0x08006284

08003ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef4:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	20000000 	.word	0x20000000

08003f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f0e:	f7ff ffef 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f12:	4601      	mov	r1, r0
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f1c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	fa92 f2a2 	rbit	r2, r2
 8003f28:	603a      	str	r2, [r7, #0]
  return result;
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	fab2 f282 	clz	r2, r2
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	40d3      	lsrs	r3, r2
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f36:	5cd3      	ldrb	r3, [r2, r3]
 8003f38:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	0800626c 	.word	0x0800626c

08003f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f52:	f7ff ffcd 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f56:	4601      	mov	r1, r0
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f60:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	fa92 f2a2 	rbit	r2, r2
 8003f6c:	603a      	str	r2, [r7, #0]
  return result;
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	fab2 f282 	clz	r2, r2
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	40d3      	lsrs	r3, r2
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f7a:	5cd3      	ldrb	r3, [r2, r3]
 8003f7c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	0800626c 	.word	0x0800626c

08003f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b092      	sub	sp, #72	; 0x48
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80d4 	beq.w	800415c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb4:	4b4e      	ldr	r3, [pc, #312]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10e      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc0:	4b4b      	ldr	r3, [pc, #300]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	4a4a      	ldr	r2, [pc, #296]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fca:	61d3      	str	r3, [r2, #28]
 8003fcc:	4b48      	ldr	r3, [pc, #288]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fde:	4b45      	ldr	r3, [pc, #276]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d118      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fea:	4b42      	ldr	r3, [pc, #264]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a41      	ldr	r2, [pc, #260]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff6:	f7fd fbc3 	bl	8001780 <HAL_GetTick>
 8003ffa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffc:	e008      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffe:	f7fd fbbf 	bl	8001780 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b64      	cmp	r3, #100	; 0x64
 800400a:	d901      	bls.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e1d6      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004010:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800401c:	4b34      	ldr	r3, [pc, #208]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004024:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8084 	beq.w	8004136 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004038:	429a      	cmp	r2, r3
 800403a:	d07c      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800403c:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004044:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004046:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800404a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	461a      	mov	r2, r3
 8004066:	2301      	movs	r3, #1
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	461a      	mov	r2, r3
 800408a:	2300      	movs	r3, #0
 800408c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800408e:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004092:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d04b      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409e:	f7fd fb6f 	bl	8001780 <HAL_GetTick>
 80040a2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a4:	e00a      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fd fb6b 	bl	8001780 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e180      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80040bc:	2302      	movs	r3, #2
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	fa93 f3a3 	rbit	r3, r3
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
 80040c8:	2302      	movs	r3, #2
 80040ca:	623b      	str	r3, [r7, #32]
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	61fb      	str	r3, [r7, #28]
  return result;
 80040d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	095b      	lsrs	r3, r3, #5
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d108      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80040ea:	4b01      	ldr	r3, [pc, #4]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	e00d      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80040f0:	40021000 	.word	0x40021000
 80040f4:	40007000 	.word	0x40007000
 80040f8:	10908100 	.word	0x10908100
 80040fc:	2302      	movs	r3, #2
 80040fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	fa93 f3a3 	rbit	r3, r3
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	4b9a      	ldr	r3, [pc, #616]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	2202      	movs	r2, #2
 800410e:	613a      	str	r2, [r7, #16]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	fa92 f2a2 	rbit	r2, r2
 8004116:	60fa      	str	r2, [r7, #12]
  return result;
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	fab2 f282 	clz	r2, r2
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	f002 021f 	and.w	r2, r2, #31
 800412a:	2101      	movs	r1, #1
 800412c:	fa01 f202 	lsl.w	r2, r1, r2
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0b7      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004136:	4b8f      	ldr	r3, [pc, #572]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	498c      	ldr	r1, [pc, #560]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004144:	4313      	orrs	r3, r2
 8004146:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004148:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800414c:	2b01      	cmp	r3, #1
 800414e:	d105      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004150:	4b88      	ldr	r3, [pc, #544]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	4a87      	ldr	r2, [pc, #540]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800415a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004168:	4b82      	ldr	r3, [pc, #520]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	f023 0203 	bic.w	r2, r3, #3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	497f      	ldr	r1, [pc, #508]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004186:	4b7b      	ldr	r3, [pc, #492]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	4978      	ldr	r1, [pc, #480]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004194:	4313      	orrs	r3, r2
 8004196:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041a4:	4b73      	ldr	r3, [pc, #460]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	4970      	ldr	r1, [pc, #448]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c2:	4b6c      	ldr	r3, [pc, #432]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	f023 0210 	bic.w	r2, r3, #16
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	4969      	ldr	r1, [pc, #420]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80041e0:	4b64      	ldr	r3, [pc, #400]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	4961      	ldr	r1, [pc, #388]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d008      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041fe:	4b5d      	ldr	r3, [pc, #372]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	f023 0220 	bic.w	r2, r3, #32
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	495a      	ldr	r1, [pc, #360]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800420c:	4313      	orrs	r3, r2
 800420e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800421c:	4b55      	ldr	r3, [pc, #340]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	4952      	ldr	r1, [pc, #328]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800422a:	4313      	orrs	r3, r2
 800422c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800423a:	4b4e      	ldr	r3, [pc, #312]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	494b      	ldr	r1, [pc, #300]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004248:	4313      	orrs	r3, r2
 800424a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004258:	4b46      	ldr	r3, [pc, #280]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	4943      	ldr	r1, [pc, #268]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004266:	4313      	orrs	r3, r2
 8004268:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004276:	4b3f      	ldr	r3, [pc, #252]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	493c      	ldr	r1, [pc, #240]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004294:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	4934      	ldr	r1, [pc, #208]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d008      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80042b2:	4b30      	ldr	r3, [pc, #192]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	492d      	ldr	r1, [pc, #180]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042d0:	4b28      	ldr	r3, [pc, #160]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042dc:	4925      	ldr	r1, [pc, #148]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d008      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80042ee:	4b21      	ldr	r3, [pc, #132]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	491e      	ldr	r1, [pc, #120]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	4916      	ldr	r1, [pc, #88]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800431a:	4313      	orrs	r3, r2
 800431c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004336:	490f      	ldr	r1, [pc, #60]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004338:	4313      	orrs	r3, r2
 800433a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	4907      	ldr	r1, [pc, #28]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00c      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004366:	4b03      	ldr	r3, [pc, #12]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	e002      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004372:	bf00      	nop
 8004374:	40021000 	.word	0x40021000
 8004378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437a:	4913      	ldr	r1, [pc, #76]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800437c:	4313      	orrs	r3, r2
 800437e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004398:	490b      	ldr	r1, [pc, #44]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800439a:	4313      	orrs	r3, r2
 800439c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d008      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b6:	4904      	ldr	r1, [pc, #16]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3748      	adds	r7, #72	; 0x48
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40021000 	.word	0x40021000

080043cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e054      	b.n	8004488 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d111      	bne.n	800440e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f001 f814 	bl	8005420 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a23      	ldr	r2, [pc, #140]	; (8004490 <HAL_TIM_PWM_Init+0xc4>)
 8004404:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3304      	adds	r3, #4
 800441e:	4619      	mov	r1, r3
 8004420:	4610      	mov	r0, r2
 8004422:	f000 fc33 	bl	8004c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	08001439 	.word	0x08001439

08004494 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0a2      	b.n	80045ee <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d111      	bne.n	80044d8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 ffaf 	bl	8005420 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d102      	bne.n	80044d0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4a      	ldr	r2, [pc, #296]	; (80045f8 <HAL_TIM_Encoder_Init+0x164>)
 80044ce:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6812      	ldr	r2, [r2, #0]
 80044ea:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80044ee:	f023 0307 	bic.w	r3, r3, #7
 80044f2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f000 fbc4 	bl	8004c8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452c:	f023 0303 	bic.w	r3, r3, #3
 8004530:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	4313      	orrs	r3, r2
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800454a:	f023 030c 	bic.w	r3, r3, #12
 800454e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800455a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	4313      	orrs	r3, r2
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	011a      	lsls	r2, r3, #4
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	031b      	lsls	r3, r3, #12
 800457a:	4313      	orrs	r3, r2
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004588:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004590:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	4313      	orrs	r3, r2
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	08001485 	.word	0x08001485

080045fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800460c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004614:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800461c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004624:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d110      	bne.n	800464e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d102      	bne.n	8004638 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004632:	7b7b      	ldrb	r3, [r7, #13]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d001      	beq.n	800463c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e069      	b.n	8004710 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800464c:	e031      	b.n	80046b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b04      	cmp	r3, #4
 8004652:	d110      	bne.n	8004676 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004654:	7bbb      	ldrb	r3, [r7, #14]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d102      	bne.n	8004660 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800465a:	7b3b      	ldrb	r3, [r7, #12]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d001      	beq.n	8004664 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e055      	b.n	8004710 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004674:	e01d      	b.n	80046b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d108      	bne.n	800468e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800467c:	7bbb      	ldrb	r3, [r7, #14]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d105      	bne.n	800468e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004682:	7b7b      	ldrb	r3, [r7, #13]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d102      	bne.n	800468e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004688:	7b3b      	ldrb	r3, [r7, #12]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d001      	beq.n	8004692 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e03e      	b.n	8004710 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2202      	movs	r2, #2
 800469e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_TIM_Encoder_Start+0xc4>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d008      	beq.n	80046d0 <HAL_TIM_Encoder_Start+0xd4>
 80046be:	e00f      	b.n	80046e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	2100      	movs	r1, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fe83 	bl	80053d4 <TIM_CCxChannelCmd>
      break;
 80046ce:	e016      	b.n	80046fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2201      	movs	r2, #1
 80046d6:	2104      	movs	r1, #4
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fe7b 	bl	80053d4 <TIM_CCxChannelCmd>
      break;
 80046de:	e00e      	b.n	80046fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2201      	movs	r2, #1
 80046e6:	2100      	movs	r1, #0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fe73 	bl	80053d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2201      	movs	r2, #1
 80046f4:	2104      	movs	r1, #4
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fe6c 	bl	80053d4 <TIM_CCxChannelCmd>
      break;
 80046fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0201 	orr.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d128      	bne.n	8004780 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b02      	cmp	r3, #2
 800473a:	d121      	bne.n	8004780 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0202 	mvn.w	r2, #2
 8004744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	4798      	blx	r3
 8004764:	e009      	b.n	800477a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b04      	cmp	r3, #4
 800478c:	d128      	bne.n	80047e0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b04      	cmp	r3, #4
 800479a:	d121      	bne.n	80047e0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0204 	mvn.w	r2, #4
 80047a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2202      	movs	r2, #2
 80047aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4798      	blx	r3
 80047c4:	e009      	b.n	80047da <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d128      	bne.n	8004840 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d121      	bne.n	8004840 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0208 	mvn.w	r2, #8
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2204      	movs	r2, #4
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	4798      	blx	r3
 8004824:	e009      	b.n	800483a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0310 	and.w	r3, r3, #16
 800484a:	2b10      	cmp	r3, #16
 800484c:	d128      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b10      	cmp	r3, #16
 800485a:	d121      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0210 	mvn.w	r2, #16
 8004864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2208      	movs	r2, #8
 800486a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	4798      	blx	r3
 8004884:	e009      	b.n	800489a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d110      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d109      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0201 	mvn.w	r2, #1
 80048c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048da:	2b80      	cmp	r3, #128	; 0x80
 80048dc:	d110      	bne.n	8004900 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e8:	2b80      	cmp	r3, #128	; 0x80
 80048ea:	d109      	bne.n	8004900 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490e:	d110      	bne.n	8004932 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	2b80      	cmp	r3, #128	; 0x80
 800491c:	d109      	bne.n	8004932 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d110      	bne.n	8004962 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b40      	cmp	r3, #64	; 0x40
 800494c:	d109      	bne.n	8004962 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b20      	cmp	r3, #32
 800496e:	d110      	bne.n	8004992 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b20      	cmp	r3, #32
 800497c:	d109      	bne.n	8004992 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0220 	mvn.w	r2, #32
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e0ff      	b.n	8004bba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b14      	cmp	r3, #20
 80049c6:	f200 80f0 	bhi.w	8004baa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	08004a25 	.word	0x08004a25
 80049d4:	08004bab 	.word	0x08004bab
 80049d8:	08004bab 	.word	0x08004bab
 80049dc:	08004bab 	.word	0x08004bab
 80049e0:	08004a65 	.word	0x08004a65
 80049e4:	08004bab 	.word	0x08004bab
 80049e8:	08004bab 	.word	0x08004bab
 80049ec:	08004bab 	.word	0x08004bab
 80049f0:	08004aa7 	.word	0x08004aa7
 80049f4:	08004bab 	.word	0x08004bab
 80049f8:	08004bab 	.word	0x08004bab
 80049fc:	08004bab 	.word	0x08004bab
 8004a00:	08004ae7 	.word	0x08004ae7
 8004a04:	08004bab 	.word	0x08004bab
 8004a08:	08004bab 	.word	0x08004bab
 8004a0c:	08004bab 	.word	0x08004bab
 8004a10:	08004b29 	.word	0x08004b29
 8004a14:	08004bab 	.word	0x08004bab
 8004a18:	08004bab 	.word	0x08004bab
 8004a1c:	08004bab 	.word	0x08004bab
 8004a20:	08004b69 	.word	0x08004b69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 f9cc 	bl	8004dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0208 	orr.w	r2, r2, #8
 8004a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0204 	bic.w	r2, r2, #4
 8004a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6999      	ldr	r1, [r3, #24]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	619a      	str	r2, [r3, #24]
      break;
 8004a62:	e0a5      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fa46 	bl	8004efc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6999      	ldr	r1, [r3, #24]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	021a      	lsls	r2, r3, #8
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	619a      	str	r2, [r3, #24]
      break;
 8004aa4:	e084      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fab9 	bl	8005024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0208 	orr.w	r2, r2, #8
 8004ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0204 	bic.w	r2, r2, #4
 8004ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69d9      	ldr	r1, [r3, #28]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	61da      	str	r2, [r3, #28]
      break;
 8004ae4:	e064      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fb2b 	bl	8005148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69d9      	ldr	r1, [r3, #28]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	021a      	lsls	r2, r3, #8
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	61da      	str	r2, [r3, #28]
      break;
 8004b26:	e043      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fb7a 	bl	8005228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0208 	orr.w	r2, r2, #8
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0204 	bic.w	r2, r2, #4
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b66:	e023      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fbc4 	bl	80052fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	021a      	lsls	r2, r3, #8
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ba8:	e002      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	75fb      	strb	r3, [r7, #23]
      break;
 8004bae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop

08004bc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a42      	ldr	r2, [pc, #264]	; (8004da8 <TIM_Base_SetConfig+0x11c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d013      	beq.n	8004ccc <TIM_Base_SetConfig+0x40>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004caa:	d00f      	beq.n	8004ccc <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a3f      	ldr	r2, [pc, #252]	; (8004dac <TIM_Base_SetConfig+0x120>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00b      	beq.n	8004ccc <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a3e      	ldr	r2, [pc, #248]	; (8004db0 <TIM_Base_SetConfig+0x124>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d007      	beq.n	8004ccc <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3d      	ldr	r2, [pc, #244]	; (8004db4 <TIM_Base_SetConfig+0x128>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3c      	ldr	r2, [pc, #240]	; (8004db8 <TIM_Base_SetConfig+0x12c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d108      	bne.n	8004cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a31      	ldr	r2, [pc, #196]	; (8004da8 <TIM_Base_SetConfig+0x11c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01f      	beq.n	8004d26 <TIM_Base_SetConfig+0x9a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cec:	d01b      	beq.n	8004d26 <TIM_Base_SetConfig+0x9a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2e      	ldr	r2, [pc, #184]	; (8004dac <TIM_Base_SetConfig+0x120>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d017      	beq.n	8004d26 <TIM_Base_SetConfig+0x9a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2d      	ldr	r2, [pc, #180]	; (8004db0 <TIM_Base_SetConfig+0x124>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <TIM_Base_SetConfig+0x9a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2c      	ldr	r2, [pc, #176]	; (8004db4 <TIM_Base_SetConfig+0x128>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00f      	beq.n	8004d26 <TIM_Base_SetConfig+0x9a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2c      	ldr	r2, [pc, #176]	; (8004dbc <TIM_Base_SetConfig+0x130>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00b      	beq.n	8004d26 <TIM_Base_SetConfig+0x9a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2b      	ldr	r2, [pc, #172]	; (8004dc0 <TIM_Base_SetConfig+0x134>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <TIM_Base_SetConfig+0x9a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2a      	ldr	r2, [pc, #168]	; (8004dc4 <TIM_Base_SetConfig+0x138>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <TIM_Base_SetConfig+0x9a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a25      	ldr	r2, [pc, #148]	; (8004db8 <TIM_Base_SetConfig+0x12c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d108      	bne.n	8004d38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <TIM_Base_SetConfig+0x11c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d013      	beq.n	8004d8c <TIM_Base_SetConfig+0x100>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a13      	ldr	r2, [pc, #76]	; (8004db4 <TIM_Base_SetConfig+0x128>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00f      	beq.n	8004d8c <TIM_Base_SetConfig+0x100>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <TIM_Base_SetConfig+0x130>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00b      	beq.n	8004d8c <TIM_Base_SetConfig+0x100>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <TIM_Base_SetConfig+0x134>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d007      	beq.n	8004d8c <TIM_Base_SetConfig+0x100>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <TIM_Base_SetConfig+0x138>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_Base_SetConfig+0x100>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0c      	ldr	r2, [pc, #48]	; (8004db8 <TIM_Base_SetConfig+0x12c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d103      	bne.n	8004d94 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	615a      	str	r2, [r3, #20]
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40012c00 	.word	0x40012c00
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40013400 	.word	0x40013400
 8004db8:	40015000 	.word	0x40015000
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400
 8004dc4:	40014800 	.word	0x40014800

08004dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f023 0201 	bic.w	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f023 0302 	bic.w	r3, r3, #2
 8004e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a30      	ldr	r2, [pc, #192]	; (8004ee4 <TIM_OC1_SetConfig+0x11c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d013      	beq.n	8004e50 <TIM_OC1_SetConfig+0x88>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ee8 <TIM_OC1_SetConfig+0x120>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00f      	beq.n	8004e50 <TIM_OC1_SetConfig+0x88>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a2e      	ldr	r2, [pc, #184]	; (8004eec <TIM_OC1_SetConfig+0x124>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <TIM_OC1_SetConfig+0x88>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a2d      	ldr	r2, [pc, #180]	; (8004ef0 <TIM_OC1_SetConfig+0x128>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <TIM_OC1_SetConfig+0x88>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a2c      	ldr	r2, [pc, #176]	; (8004ef4 <TIM_OC1_SetConfig+0x12c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_OC1_SetConfig+0x88>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ef8 <TIM_OC1_SetConfig+0x130>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10c      	bne.n	8004e6a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0308 	bic.w	r3, r3, #8
 8004e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f023 0304 	bic.w	r3, r3, #4
 8004e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <TIM_OC1_SetConfig+0x11c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d013      	beq.n	8004e9a <TIM_OC1_SetConfig+0xd2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a1c      	ldr	r2, [pc, #112]	; (8004ee8 <TIM_OC1_SetConfig+0x120>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00f      	beq.n	8004e9a <TIM_OC1_SetConfig+0xd2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <TIM_OC1_SetConfig+0x124>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00b      	beq.n	8004e9a <TIM_OC1_SetConfig+0xd2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1a      	ldr	r2, [pc, #104]	; (8004ef0 <TIM_OC1_SetConfig+0x128>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d007      	beq.n	8004e9a <TIM_OC1_SetConfig+0xd2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a19      	ldr	r2, [pc, #100]	; (8004ef4 <TIM_OC1_SetConfig+0x12c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d003      	beq.n	8004e9a <TIM_OC1_SetConfig+0xd2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a18      	ldr	r2, [pc, #96]	; (8004ef8 <TIM_OC1_SetConfig+0x130>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d111      	bne.n	8004ebe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	621a      	str	r2, [r3, #32]
}
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	40013400 	.word	0x40013400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800
 8004ef8:	40015000 	.word	0x40015000

08004efc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f023 0210 	bic.w	r2, r3, #16
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f023 0320 	bic.w	r3, r3, #32
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a2c      	ldr	r2, [pc, #176]	; (800500c <TIM_OC2_SetConfig+0x110>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d007      	beq.n	8004f70 <TIM_OC2_SetConfig+0x74>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a2b      	ldr	r2, [pc, #172]	; (8005010 <TIM_OC2_SetConfig+0x114>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_OC2_SetConfig+0x74>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a2a      	ldr	r2, [pc, #168]	; (8005014 <TIM_OC2_SetConfig+0x118>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d10d      	bne.n	8004f8c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a1f      	ldr	r2, [pc, #124]	; (800500c <TIM_OC2_SetConfig+0x110>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <TIM_OC2_SetConfig+0xc0>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a1e      	ldr	r2, [pc, #120]	; (8005010 <TIM_OC2_SetConfig+0x114>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00f      	beq.n	8004fbc <TIM_OC2_SetConfig+0xc0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a1e      	ldr	r2, [pc, #120]	; (8005018 <TIM_OC2_SetConfig+0x11c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00b      	beq.n	8004fbc <TIM_OC2_SetConfig+0xc0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a1d      	ldr	r2, [pc, #116]	; (800501c <TIM_OC2_SetConfig+0x120>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d007      	beq.n	8004fbc <TIM_OC2_SetConfig+0xc0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <TIM_OC2_SetConfig+0x124>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_OC2_SetConfig+0xc0>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a17      	ldr	r2, [pc, #92]	; (8005014 <TIM_OC2_SetConfig+0x118>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d113      	bne.n	8004fe4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fc2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fca:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40013400 	.word	0x40013400
 8005014:	40015000 	.word	0x40015000
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800

08005024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0303 	bic.w	r3, r3, #3
 800505e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2b      	ldr	r2, [pc, #172]	; (8005130 <TIM_OC3_SetConfig+0x10c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_OC3_SetConfig+0x72>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2a      	ldr	r2, [pc, #168]	; (8005134 <TIM_OC3_SetConfig+0x110>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_OC3_SetConfig+0x72>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a29      	ldr	r2, [pc, #164]	; (8005138 <TIM_OC3_SetConfig+0x114>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d10d      	bne.n	80050b2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800509c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <TIM_OC3_SetConfig+0x10c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d013      	beq.n	80050e2 <TIM_OC3_SetConfig+0xbe>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <TIM_OC3_SetConfig+0x110>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00f      	beq.n	80050e2 <TIM_OC3_SetConfig+0xbe>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a1d      	ldr	r2, [pc, #116]	; (800513c <TIM_OC3_SetConfig+0x118>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00b      	beq.n	80050e2 <TIM_OC3_SetConfig+0xbe>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a1c      	ldr	r2, [pc, #112]	; (8005140 <TIM_OC3_SetConfig+0x11c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d007      	beq.n	80050e2 <TIM_OC3_SetConfig+0xbe>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <TIM_OC3_SetConfig+0x120>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d003      	beq.n	80050e2 <TIM_OC3_SetConfig+0xbe>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a16      	ldr	r2, [pc, #88]	; (8005138 <TIM_OC3_SetConfig+0x114>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d113      	bne.n	800510a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40012c00 	.word	0x40012c00
 8005134:	40013400 	.word	0x40013400
 8005138:	40015000 	.word	0x40015000
 800513c:	40014000 	.word	0x40014000
 8005140:	40014400 	.word	0x40014400
 8005144:	40014800 	.word	0x40014800

08005148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	021b      	lsls	r3, r3, #8
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	031b      	lsls	r3, r3, #12
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a1a      	ldr	r2, [pc, #104]	; (8005210 <TIM_OC4_SetConfig+0xc8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <TIM_OC4_SetConfig+0x8c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a19      	ldr	r2, [pc, #100]	; (8005214 <TIM_OC4_SetConfig+0xcc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00f      	beq.n	80051d4 <TIM_OC4_SetConfig+0x8c>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a18      	ldr	r2, [pc, #96]	; (8005218 <TIM_OC4_SetConfig+0xd0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00b      	beq.n	80051d4 <TIM_OC4_SetConfig+0x8c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a17      	ldr	r2, [pc, #92]	; (800521c <TIM_OC4_SetConfig+0xd4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d007      	beq.n	80051d4 <TIM_OC4_SetConfig+0x8c>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a16      	ldr	r2, [pc, #88]	; (8005220 <TIM_OC4_SetConfig+0xd8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_OC4_SetConfig+0x8c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a15      	ldr	r2, [pc, #84]	; (8005224 <TIM_OC4_SetConfig+0xdc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d109      	bne.n	80051e8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	019b      	lsls	r3, r3, #6
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40013400 	.word	0x40013400
 8005218:	40014000 	.word	0x40014000
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800
 8005224:	40015000 	.word	0x40015000

08005228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800526c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <TIM_OC5_SetConfig+0xbc>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <TIM_OC5_SetConfig+0x82>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <TIM_OC5_SetConfig+0xc0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00f      	beq.n	80052aa <TIM_OC5_SetConfig+0x82>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a17      	ldr	r2, [pc, #92]	; (80052ec <TIM_OC5_SetConfig+0xc4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00b      	beq.n	80052aa <TIM_OC5_SetConfig+0x82>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a16      	ldr	r2, [pc, #88]	; (80052f0 <TIM_OC5_SetConfig+0xc8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d007      	beq.n	80052aa <TIM_OC5_SetConfig+0x82>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a15      	ldr	r2, [pc, #84]	; (80052f4 <TIM_OC5_SetConfig+0xcc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_OC5_SetConfig+0x82>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <TIM_OC5_SetConfig+0xd0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d109      	bne.n	80052be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	621a      	str	r2, [r3, #32]
}
 80052d8:	bf00      	nop
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40013400 	.word	0x40013400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800
 80052f8:	40015000 	.word	0x40015000

080052fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800532a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	051b      	lsls	r3, r3, #20
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a1a      	ldr	r2, [pc, #104]	; (80053bc <TIM_OC6_SetConfig+0xc0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <TIM_OC6_SetConfig+0x84>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <TIM_OC6_SetConfig+0xc4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00f      	beq.n	8005380 <TIM_OC6_SetConfig+0x84>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a18      	ldr	r2, [pc, #96]	; (80053c4 <TIM_OC6_SetConfig+0xc8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00b      	beq.n	8005380 <TIM_OC6_SetConfig+0x84>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a17      	ldr	r2, [pc, #92]	; (80053c8 <TIM_OC6_SetConfig+0xcc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d007      	beq.n	8005380 <TIM_OC6_SetConfig+0x84>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a16      	ldr	r2, [pc, #88]	; (80053cc <TIM_OC6_SetConfig+0xd0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC6_SetConfig+0x84>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a15      	ldr	r2, [pc, #84]	; (80053d0 <TIM_OC6_SetConfig+0xd4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d109      	bne.n	8005394 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	029b      	lsls	r3, r3, #10
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40012c00 	.word	0x40012c00
 80053c0:	40013400 	.word	0x40013400
 80053c4:	40014000 	.word	0x40014000
 80053c8:	40014400 	.word	0x40014400
 80053cc:	40014800 	.word	0x40014800
 80053d0:	40015000 	.word	0x40015000

080053d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	2201      	movs	r2, #1
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a1a      	ldr	r2, [r3, #32]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	43db      	mvns	r3, r3
 80053f6:	401a      	ands	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1a      	ldr	r2, [r3, #32]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	fa01 f303 	lsl.w	r3, r1, r3
 800540c:	431a      	orrs	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a1e      	ldr	r2, [pc, #120]	; (80054a4 <TIM_ResetCallback+0x84>)
 800542c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a1d      	ldr	r2, [pc, #116]	; (80054a8 <TIM_ResetCallback+0x88>)
 8005434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <TIM_ResetCallback+0x8c>)
 800543c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1b      	ldr	r2, [pc, #108]	; (80054b0 <TIM_ResetCallback+0x90>)
 8005444:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1a      	ldr	r2, [pc, #104]	; (80054b4 <TIM_ResetCallback+0x94>)
 800544c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <TIM_ResetCallback+0x98>)
 8005454:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a18      	ldr	r2, [pc, #96]	; (80054bc <TIM_ResetCallback+0x9c>)
 800545c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <TIM_ResetCallback+0xa0>)
 8005464:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a16      	ldr	r2, [pc, #88]	; (80054c4 <TIM_ResetCallback+0xa4>)
 800546c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a15      	ldr	r2, [pc, #84]	; (80054c8 <TIM_ResetCallback+0xa8>)
 8005474:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a14      	ldr	r2, [pc, #80]	; (80054cc <TIM_ResetCallback+0xac>)
 800547c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <TIM_ResetCallback+0xb0>)
 8005484:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a12      	ldr	r2, [pc, #72]	; (80054d4 <TIM_ResetCallback+0xb4>)
 800548c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#if defined(TIM_BDTR_BK2E)
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a11      	ldr	r2, [pc, #68]	; (80054d8 <TIM_ResetCallback+0xb8>)
 8005494:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* TIM_BDTR_BK2E */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	08004bc5 	.word	0x08004bc5
 80054a8:	08004bd9 	.word	0x08004bd9
 80054ac:	08004c51 	.word	0x08004c51
 80054b0:	08004c65 	.word	0x08004c65
 80054b4:	08004c01 	.word	0x08004c01
 80054b8:	08004c15 	.word	0x08004c15
 80054bc:	08004bed 	.word	0x08004bed
 80054c0:	08004c29 	.word	0x08004c29
 80054c4:	08004c3d 	.word	0x08004c3d
 80054c8:	08004c79 	.word	0x08004c79
 80054cc:	080055f5 	.word	0x080055f5
 80054d0:	08005609 	.word	0x08005609
 80054d4:	0800561d 	.word	0x0800561d
 80054d8:	08005631 	.word	0x08005631

080054dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e06d      	b.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a30      	ldr	r2, [pc, #192]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d009      	beq.n	8005532 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a2f      	ldr	r2, [pc, #188]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d004      	beq.n	8005532 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a2d      	ldr	r2, [pc, #180]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d108      	bne.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005538:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d01d      	beq.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005570:	d018      	beq.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1a      	ldr	r2, [pc, #104]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00e      	beq.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a15      	ldr	r2, [pc, #84]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a11      	ldr	r2, [pc, #68]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d10c      	bne.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40013400 	.word	0x40013400
 80055e4:	40015000 	.word	0x40015000
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800
 80055f0:	40014000 	.word	0x40014000

080055f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e040      	b.n	80056d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fb ffc2 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2224      	movs	r2, #36	; 0x24
 8005670:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0201 	bic.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f8c0 	bl	8005808 <UART_SetConfig>
 8005688:	4603      	mov	r3, r0
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e022      	b.n	80056d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fa8a 	bl	8005bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fb11 	bl	8005cf8 <UART_CheckIdleState>
 80056d6:	4603      	mov	r3, r0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	; 0x28
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	f040 8082 	bne.w	80057fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_UART_Transmit+0x26>
 8005700:	88fb      	ldrh	r3, [r7, #6]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e07a      	b.n	8005800 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_UART_Transmit+0x38>
 8005714:	2302      	movs	r3, #2
 8005716:	e073      	b.n	8005800 <HAL_UART_Transmit+0x120>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2221      	movs	r2, #33	; 0x21
 800572c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800572e:	f7fc f827 	bl	8001780 <HAL_GetTick>
 8005732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	88fa      	ldrh	r2, [r7, #6]
 8005738:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	88fa      	ldrh	r2, [r7, #6]
 8005740:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574c:	d108      	bne.n	8005760 <HAL_UART_Transmit+0x80>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d104      	bne.n	8005760 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	61bb      	str	r3, [r7, #24]
 800575e:	e003      	b.n	8005768 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005764:	2300      	movs	r3, #0
 8005766:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005770:	e02d      	b.n	80057ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2200      	movs	r2, #0
 800577a:	2180      	movs	r1, #128	; 0x80
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fb04 	bl	8005d8a <UART_WaitOnFlagUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e039      	b.n	8005800 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	881a      	ldrh	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800579e:	b292      	uxth	r2, r2
 80057a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	3302      	adds	r3, #2
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	e008      	b.n	80057bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	781a      	ldrb	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	b292      	uxth	r2, r2
 80057b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3301      	adds	r3, #1
 80057ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1cb      	bne.n	8005772 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2140      	movs	r1, #64	; 0x40
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fad0 	bl	8005d8a <UART_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e005      	b.n	8005800 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e000      	b.n	8005800 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80057fe:	2302      	movs	r3, #2
  }
}
 8005800:	4618      	mov	r0, r3
 8005802:	3720      	adds	r7, #32
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b92      	ldr	r3, [pc, #584]	; (8005a7c <UART_SetConfig+0x274>)
 8005834:	4013      	ands	r3, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	6979      	ldr	r1, [r7, #20]
 800583c:	430b      	orrs	r3, r1
 800583e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	430a      	orrs	r2, r1
 8005878:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a80      	ldr	r2, [pc, #512]	; (8005a80 <UART_SetConfig+0x278>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d120      	bne.n	80058c6 <UART_SetConfig+0xbe>
 8005884:	4b7f      	ldr	r3, [pc, #508]	; (8005a84 <UART_SetConfig+0x27c>)
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	2b03      	cmp	r3, #3
 800588e:	d817      	bhi.n	80058c0 <UART_SetConfig+0xb8>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <UART_SetConfig+0x90>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058a9 	.word	0x080058a9
 800589c:	080058b5 	.word	0x080058b5
 80058a0:	080058bb 	.word	0x080058bb
 80058a4:	080058af 	.word	0x080058af
 80058a8:	2301      	movs	r3, #1
 80058aa:	77fb      	strb	r3, [r7, #31]
 80058ac:	e0b5      	b.n	8005a1a <UART_SetConfig+0x212>
 80058ae:	2302      	movs	r3, #2
 80058b0:	77fb      	strb	r3, [r7, #31]
 80058b2:	e0b2      	b.n	8005a1a <UART_SetConfig+0x212>
 80058b4:	2304      	movs	r3, #4
 80058b6:	77fb      	strb	r3, [r7, #31]
 80058b8:	e0af      	b.n	8005a1a <UART_SetConfig+0x212>
 80058ba:	2308      	movs	r3, #8
 80058bc:	77fb      	strb	r3, [r7, #31]
 80058be:	e0ac      	b.n	8005a1a <UART_SetConfig+0x212>
 80058c0:	2310      	movs	r3, #16
 80058c2:	77fb      	strb	r3, [r7, #31]
 80058c4:	e0a9      	b.n	8005a1a <UART_SetConfig+0x212>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a6f      	ldr	r2, [pc, #444]	; (8005a88 <UART_SetConfig+0x280>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d124      	bne.n	800591a <UART_SetConfig+0x112>
 80058d0:	4b6c      	ldr	r3, [pc, #432]	; (8005a84 <UART_SetConfig+0x27c>)
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058dc:	d011      	beq.n	8005902 <UART_SetConfig+0xfa>
 80058de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058e2:	d817      	bhi.n	8005914 <UART_SetConfig+0x10c>
 80058e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e8:	d011      	beq.n	800590e <UART_SetConfig+0x106>
 80058ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058ee:	d811      	bhi.n	8005914 <UART_SetConfig+0x10c>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <UART_SetConfig+0xf4>
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f8:	d006      	beq.n	8005908 <UART_SetConfig+0x100>
 80058fa:	e00b      	b.n	8005914 <UART_SetConfig+0x10c>
 80058fc:	2300      	movs	r3, #0
 80058fe:	77fb      	strb	r3, [r7, #31]
 8005900:	e08b      	b.n	8005a1a <UART_SetConfig+0x212>
 8005902:	2302      	movs	r3, #2
 8005904:	77fb      	strb	r3, [r7, #31]
 8005906:	e088      	b.n	8005a1a <UART_SetConfig+0x212>
 8005908:	2304      	movs	r3, #4
 800590a:	77fb      	strb	r3, [r7, #31]
 800590c:	e085      	b.n	8005a1a <UART_SetConfig+0x212>
 800590e:	2308      	movs	r3, #8
 8005910:	77fb      	strb	r3, [r7, #31]
 8005912:	e082      	b.n	8005a1a <UART_SetConfig+0x212>
 8005914:	2310      	movs	r3, #16
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e07f      	b.n	8005a1a <UART_SetConfig+0x212>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a5b      	ldr	r2, [pc, #364]	; (8005a8c <UART_SetConfig+0x284>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d124      	bne.n	800596e <UART_SetConfig+0x166>
 8005924:	4b57      	ldr	r3, [pc, #348]	; (8005a84 <UART_SetConfig+0x27c>)
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800592c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005930:	d011      	beq.n	8005956 <UART_SetConfig+0x14e>
 8005932:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005936:	d817      	bhi.n	8005968 <UART_SetConfig+0x160>
 8005938:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800593c:	d011      	beq.n	8005962 <UART_SetConfig+0x15a>
 800593e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005942:	d811      	bhi.n	8005968 <UART_SetConfig+0x160>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <UART_SetConfig+0x148>
 8005948:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800594c:	d006      	beq.n	800595c <UART_SetConfig+0x154>
 800594e:	e00b      	b.n	8005968 <UART_SetConfig+0x160>
 8005950:	2300      	movs	r3, #0
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	e061      	b.n	8005a1a <UART_SetConfig+0x212>
 8005956:	2302      	movs	r3, #2
 8005958:	77fb      	strb	r3, [r7, #31]
 800595a:	e05e      	b.n	8005a1a <UART_SetConfig+0x212>
 800595c:	2304      	movs	r3, #4
 800595e:	77fb      	strb	r3, [r7, #31]
 8005960:	e05b      	b.n	8005a1a <UART_SetConfig+0x212>
 8005962:	2308      	movs	r3, #8
 8005964:	77fb      	strb	r3, [r7, #31]
 8005966:	e058      	b.n	8005a1a <UART_SetConfig+0x212>
 8005968:	2310      	movs	r3, #16
 800596a:	77fb      	strb	r3, [r7, #31]
 800596c:	e055      	b.n	8005a1a <UART_SetConfig+0x212>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a47      	ldr	r2, [pc, #284]	; (8005a90 <UART_SetConfig+0x288>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d124      	bne.n	80059c2 <UART_SetConfig+0x1ba>
 8005978:	4b42      	ldr	r3, [pc, #264]	; (8005a84 <UART_SetConfig+0x27c>)
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005980:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005984:	d011      	beq.n	80059aa <UART_SetConfig+0x1a2>
 8005986:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800598a:	d817      	bhi.n	80059bc <UART_SetConfig+0x1b4>
 800598c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005990:	d011      	beq.n	80059b6 <UART_SetConfig+0x1ae>
 8005992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005996:	d811      	bhi.n	80059bc <UART_SetConfig+0x1b4>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <UART_SetConfig+0x19c>
 800599c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059a0:	d006      	beq.n	80059b0 <UART_SetConfig+0x1a8>
 80059a2:	e00b      	b.n	80059bc <UART_SetConfig+0x1b4>
 80059a4:	2300      	movs	r3, #0
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e037      	b.n	8005a1a <UART_SetConfig+0x212>
 80059aa:	2302      	movs	r3, #2
 80059ac:	77fb      	strb	r3, [r7, #31]
 80059ae:	e034      	b.n	8005a1a <UART_SetConfig+0x212>
 80059b0:	2304      	movs	r3, #4
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e031      	b.n	8005a1a <UART_SetConfig+0x212>
 80059b6:	2308      	movs	r3, #8
 80059b8:	77fb      	strb	r3, [r7, #31]
 80059ba:	e02e      	b.n	8005a1a <UART_SetConfig+0x212>
 80059bc:	2310      	movs	r3, #16
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e02b      	b.n	8005a1a <UART_SetConfig+0x212>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a33      	ldr	r2, [pc, #204]	; (8005a94 <UART_SetConfig+0x28c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d124      	bne.n	8005a16 <UART_SetConfig+0x20e>
 80059cc:	4b2d      	ldr	r3, [pc, #180]	; (8005a84 <UART_SetConfig+0x27c>)
 80059ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80059d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059d8:	d011      	beq.n	80059fe <UART_SetConfig+0x1f6>
 80059da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059de:	d817      	bhi.n	8005a10 <UART_SetConfig+0x208>
 80059e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059e4:	d011      	beq.n	8005a0a <UART_SetConfig+0x202>
 80059e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059ea:	d811      	bhi.n	8005a10 <UART_SetConfig+0x208>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <UART_SetConfig+0x1f0>
 80059f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059f4:	d006      	beq.n	8005a04 <UART_SetConfig+0x1fc>
 80059f6:	e00b      	b.n	8005a10 <UART_SetConfig+0x208>
 80059f8:	2300      	movs	r3, #0
 80059fa:	77fb      	strb	r3, [r7, #31]
 80059fc:	e00d      	b.n	8005a1a <UART_SetConfig+0x212>
 80059fe:	2302      	movs	r3, #2
 8005a00:	77fb      	strb	r3, [r7, #31]
 8005a02:	e00a      	b.n	8005a1a <UART_SetConfig+0x212>
 8005a04:	2304      	movs	r3, #4
 8005a06:	77fb      	strb	r3, [r7, #31]
 8005a08:	e007      	b.n	8005a1a <UART_SetConfig+0x212>
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	77fb      	strb	r3, [r7, #31]
 8005a0e:	e004      	b.n	8005a1a <UART_SetConfig+0x212>
 8005a10:	2310      	movs	r3, #16
 8005a12:	77fb      	strb	r3, [r7, #31]
 8005a14:	e001      	b.n	8005a1a <UART_SetConfig+0x212>
 8005a16:	2310      	movs	r3, #16
 8005a18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a22:	d16c      	bne.n	8005afe <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8005a24:	7ffb      	ldrb	r3, [r7, #31]
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d838      	bhi.n	8005a9c <UART_SetConfig+0x294>
 8005a2a:	a201      	add	r2, pc, #4	; (adr r2, 8005a30 <UART_SetConfig+0x228>)
 8005a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a30:	08005a55 	.word	0x08005a55
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a65 	.word	0x08005a65
 8005a3c:	08005a9d 	.word	0x08005a9d
 8005a40:	08005a6b 	.word	0x08005a6b
 8005a44:	08005a9d 	.word	0x08005a9d
 8005a48:	08005a9d 	.word	0x08005a9d
 8005a4c:	08005a9d 	.word	0x08005a9d
 8005a50:	08005a73 	.word	0x08005a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a54:	f7fe fa58 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 8005a58:	61b8      	str	r0, [r7, #24]
        break;
 8005a5a:	e024      	b.n	8005aa6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a5c:	f7fe fa76 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 8005a60:	61b8      	str	r0, [r7, #24]
        break;
 8005a62:	e020      	b.n	8005aa6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <UART_SetConfig+0x290>)
 8005a66:	61bb      	str	r3, [r7, #24]
        break;
 8005a68:	e01d      	b.n	8005aa6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a6a:	f7fe f9d7 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8005a6e:	61b8      	str	r0, [r7, #24]
        break;
 8005a70:	e019      	b.n	8005aa6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a76:	61bb      	str	r3, [r7, #24]
        break;
 8005a78:	e015      	b.n	8005aa6 <UART_SetConfig+0x29e>
 8005a7a:	bf00      	nop
 8005a7c:	efff69f3 	.word	0xefff69f3
 8005a80:	40013800 	.word	0x40013800
 8005a84:	40021000 	.word	0x40021000
 8005a88:	40004400 	.word	0x40004400
 8005a8c:	40004800 	.word	0x40004800
 8005a90:	40004c00 	.word	0x40004c00
 8005a94:	40005000 	.word	0x40005000
 8005a98:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	77bb      	strb	r3, [r7, #30]
        break;
 8005aa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d075      	beq.n	8005b98 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	005a      	lsls	r2, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	441a      	add	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b0f      	cmp	r3, #15
 8005ac8:	d916      	bls.n	8005af8 <UART_SetConfig+0x2f0>
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad0:	d212      	bcs.n	8005af8 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	f023 030f 	bic.w	r3, r3, #15
 8005ada:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	89fb      	ldrh	r3, [r7, #14]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	89fa      	ldrh	r2, [r7, #14]
 8005af4:	60da      	str	r2, [r3, #12]
 8005af6:	e04f      	b.n	8005b98 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	77bb      	strb	r3, [r7, #30]
 8005afc:	e04c      	b.n	8005b98 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005afe:	7ffb      	ldrb	r3, [r7, #31]
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d828      	bhi.n	8005b56 <UART_SetConfig+0x34e>
 8005b04:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <UART_SetConfig+0x304>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b41 	.word	0x08005b41
 8005b18:	08005b57 	.word	0x08005b57
 8005b1c:	08005b47 	.word	0x08005b47
 8005b20:	08005b57 	.word	0x08005b57
 8005b24:	08005b57 	.word	0x08005b57
 8005b28:	08005b57 	.word	0x08005b57
 8005b2c:	08005b4f 	.word	0x08005b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b30:	f7fe f9ea 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 8005b34:	61b8      	str	r0, [r7, #24]
        break;
 8005b36:	e013      	b.n	8005b60 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b38:	f7fe fa08 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 8005b3c:	61b8      	str	r0, [r7, #24]
        break;
 8005b3e:	e00f      	b.n	8005b60 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b40:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <UART_SetConfig+0x3a8>)
 8005b42:	61bb      	str	r3, [r7, #24]
        break;
 8005b44:	e00c      	b.n	8005b60 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b46:	f7fe f969 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8005b4a:	61b8      	str	r0, [r7, #24]
        break;
 8005b4c:	e008      	b.n	8005b60 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b52:	61bb      	str	r3, [r7, #24]
        break;
 8005b54:	e004      	b.n	8005b60 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	77bb      	strb	r3, [r7, #30]
        break;
 8005b5e:	bf00      	nop
    }

    if (pclk != 0U)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d018      	beq.n	8005b98 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	085a      	lsrs	r2, r3, #1
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	441a      	add	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	2b0f      	cmp	r3, #15
 8005b80:	d908      	bls.n	8005b94 <UART_SetConfig+0x38c>
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b88:	d204      	bcs.n	8005b94 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	60da      	str	r2, [r3, #12]
 8005b92:	e001      	b.n	8005b98 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ba4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	007a1200 	.word	0x007a1200

08005bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	f003 0310 	and.w	r3, r3, #16
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01a      	beq.n	8005cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cb2:	d10a      	bne.n	8005cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	605a      	str	r2, [r3, #4]
  }
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d08:	f7fb fd3a 	bl	8001780 <HAL_GetTick>
 8005d0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d10e      	bne.n	8005d3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f82d 	bl	8005d8a <UART_WaitOnFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e023      	b.n	8005d82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d10e      	bne.n	8005d66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f817 	bl	8005d8a <UART_WaitOnFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e00d      	b.n	8005d82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b09c      	sub	sp, #112	; 0x70
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	603b      	str	r3, [r7, #0]
 8005d96:	4613      	mov	r3, r2
 8005d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9a:	e0a5      	b.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	f000 80a1 	beq.w	8005ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fb fceb 	bl	8001780 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x32>
 8005db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d13e      	bne.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ddc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005de0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e6      	bne.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	663b      	str	r3, [r7, #96]	; 0x60
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e5      	bne.n	8005dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e067      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d04f      	beq.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e56:	d147      	bne.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
 8005e82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e6      	bne.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005eb4:	623a      	str	r2, [r7, #32]
 8005eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	69f9      	ldr	r1, [r7, #28]
 8005eba:	6a3a      	ldr	r2, [r7, #32]
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e5      	bne.n	8005e94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e010      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69da      	ldr	r2, [r3, #28]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	bf0c      	ite	eq
 8005ef8:	2301      	moveq	r3, #1
 8005efa:	2300      	movne	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	461a      	mov	r2, r3
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	f43f af4a 	beq.w	8005d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3770      	adds	r7, #112	; 0x70
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <__libc_init_array>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	4d0d      	ldr	r5, [pc, #52]	; (8005f4c <__libc_init_array+0x38>)
 8005f18:	4c0d      	ldr	r4, [pc, #52]	; (8005f50 <__libc_init_array+0x3c>)
 8005f1a:	1b64      	subs	r4, r4, r5
 8005f1c:	10a4      	asrs	r4, r4, #2
 8005f1e:	2600      	movs	r6, #0
 8005f20:	42a6      	cmp	r6, r4
 8005f22:	d109      	bne.n	8005f38 <__libc_init_array+0x24>
 8005f24:	4d0b      	ldr	r5, [pc, #44]	; (8005f54 <__libc_init_array+0x40>)
 8005f26:	4c0c      	ldr	r4, [pc, #48]	; (8005f58 <__libc_init_array+0x44>)
 8005f28:	f000 f87c 	bl	8006024 <_init>
 8005f2c:	1b64      	subs	r4, r4, r5
 8005f2e:	10a4      	asrs	r4, r4, #2
 8005f30:	2600      	movs	r6, #0
 8005f32:	42a6      	cmp	r6, r4
 8005f34:	d105      	bne.n	8005f42 <__libc_init_array+0x2e>
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3c:	4798      	blx	r3
 8005f3e:	3601      	adds	r6, #1
 8005f40:	e7ee      	b.n	8005f20 <__libc_init_array+0xc>
 8005f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f46:	4798      	blx	r3
 8005f48:	3601      	adds	r6, #1
 8005f4a:	e7f2      	b.n	8005f32 <__libc_init_array+0x1e>
 8005f4c:	080062bc 	.word	0x080062bc
 8005f50:	080062bc 	.word	0x080062bc
 8005f54:	080062bc 	.word	0x080062bc
 8005f58:	080062c0 	.word	0x080062c0

08005f5c <__itoa>:
 8005f5c:	1e93      	subs	r3, r2, #2
 8005f5e:	2b22      	cmp	r3, #34	; 0x22
 8005f60:	b510      	push	{r4, lr}
 8005f62:	460c      	mov	r4, r1
 8005f64:	d904      	bls.n	8005f70 <__itoa+0x14>
 8005f66:	2300      	movs	r3, #0
 8005f68:	700b      	strb	r3, [r1, #0]
 8005f6a:	461c      	mov	r4, r3
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	bd10      	pop	{r4, pc}
 8005f70:	2a0a      	cmp	r2, #10
 8005f72:	d109      	bne.n	8005f88 <__itoa+0x2c>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	da07      	bge.n	8005f88 <__itoa+0x2c>
 8005f78:	232d      	movs	r3, #45	; 0x2d
 8005f7a:	700b      	strb	r3, [r1, #0]
 8005f7c:	4240      	negs	r0, r0
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4421      	add	r1, r4
 8005f82:	f000 f80d 	bl	8005fa0 <__utoa>
 8005f86:	e7f1      	b.n	8005f6c <__itoa+0x10>
 8005f88:	2100      	movs	r1, #0
 8005f8a:	e7f9      	b.n	8005f80 <__itoa+0x24>

08005f8c <itoa>:
 8005f8c:	f7ff bfe6 	b.w	8005f5c <__itoa>

08005f90 <memset>:
 8005f90:	4402      	add	r2, r0
 8005f92:	4603      	mov	r3, r0
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d100      	bne.n	8005f9a <memset+0xa>
 8005f98:	4770      	bx	lr
 8005f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f9e:	e7f9      	b.n	8005f94 <memset+0x4>

08005fa0 <__utoa>:
 8005fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fa2:	4c1f      	ldr	r4, [pc, #124]	; (8006020 <__utoa+0x80>)
 8005fa4:	b08b      	sub	sp, #44	; 0x2c
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	466e      	mov	r6, sp
 8005fac:	f104 0c20 	add.w	ip, r4, #32
 8005fb0:	6820      	ldr	r0, [r4, #0]
 8005fb2:	6861      	ldr	r1, [r4, #4]
 8005fb4:	4637      	mov	r7, r6
 8005fb6:	c703      	stmia	r7!, {r0, r1}
 8005fb8:	3408      	adds	r4, #8
 8005fba:	4564      	cmp	r4, ip
 8005fbc:	463e      	mov	r6, r7
 8005fbe:	d1f7      	bne.n	8005fb0 <__utoa+0x10>
 8005fc0:	7921      	ldrb	r1, [r4, #4]
 8005fc2:	7139      	strb	r1, [r7, #4]
 8005fc4:	1e91      	subs	r1, r2, #2
 8005fc6:	6820      	ldr	r0, [r4, #0]
 8005fc8:	6038      	str	r0, [r7, #0]
 8005fca:	2922      	cmp	r1, #34	; 0x22
 8005fcc:	f04f 0100 	mov.w	r1, #0
 8005fd0:	d904      	bls.n	8005fdc <__utoa+0x3c>
 8005fd2:	7019      	strb	r1, [r3, #0]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	b00b      	add	sp, #44	; 0x2c
 8005fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fdc:	1e58      	subs	r0, r3, #1
 8005fde:	4684      	mov	ip, r0
 8005fe0:	fbb5 f7f2 	udiv	r7, r5, r2
 8005fe4:	fb02 5617 	mls	r6, r2, r7, r5
 8005fe8:	3628      	adds	r6, #40	; 0x28
 8005fea:	446e      	add	r6, sp
 8005fec:	460c      	mov	r4, r1
 8005fee:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005ff2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005ff6:	462e      	mov	r6, r5
 8005ff8:	42b2      	cmp	r2, r6
 8005ffa:	f101 0101 	add.w	r1, r1, #1
 8005ffe:	463d      	mov	r5, r7
 8006000:	d9ee      	bls.n	8005fe0 <__utoa+0x40>
 8006002:	2200      	movs	r2, #0
 8006004:	545a      	strb	r2, [r3, r1]
 8006006:	1919      	adds	r1, r3, r4
 8006008:	1aa5      	subs	r5, r4, r2
 800600a:	42aa      	cmp	r2, r5
 800600c:	dae3      	bge.n	8005fd6 <__utoa+0x36>
 800600e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006012:	780e      	ldrb	r6, [r1, #0]
 8006014:	7006      	strb	r6, [r0, #0]
 8006016:	3201      	adds	r2, #1
 8006018:	f801 5901 	strb.w	r5, [r1], #-1
 800601c:	e7f4      	b.n	8006008 <__utoa+0x68>
 800601e:	bf00      	nop
 8006020:	08006294 	.word	0x08006294

08006024 <_init>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr

08006030 <_fini>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	bf00      	nop
 8006034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006036:	bc08      	pop	{r3}
 8006038:	469e      	mov	lr, r3
 800603a:	4770      	bx	lr
