
FFBController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d9c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e8  080062e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080062e8  080062e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062e8  080062e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e8  080062e8  000162e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080062f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000005d8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005e4  200005e4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001299b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a49  00000000  00000000  000329d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00035420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd0  00000000  00000000  00036218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021955  00000000  00000000  00036ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a88  00000000  00000000  0005883d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb277  00000000  00000000  0006c2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013753c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003914  00000000  00000000  0013758c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005f18 	.word	0x08005f18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08005f18 	.word	0x08005f18

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <ADC_Init>:
 *
 * @note Postcondition	: ADC3 will be running
 *
 ** **************************************************************************** */
void ADC_Init(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0


	__HAL_RCC_ADC34_CLK_ENABLE();
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <ADC_Init+0x34>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <ADC_Init+0x34>)
 80001f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <ADC_Init+0x34>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]

	ADC_InitGPIO();
 8000202:	f000 f873 	bl	80002ec <ADC_InitGPIO>

	ADC_Enable();
 8000206:	f000 f809 	bl	800021c <ADC_Enable>

	ADC_Configure();
 800020a:	f000 f843 	bl	8000294 <ADC_Configure>




}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000

0800021c <ADC_Enable>:
 *
 * @note Postcondition	: ADC3 will be enabled and ready for configuration
 *
 ** **************************************************************************** */
void ADC_Enable(void)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
	/****************************
	 * Enable voltage regulator *
	 ****************************/

	//Reset and enable voltage regulator
	ADC3->CR = 0;
 8000222:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <ADC_Enable+0x74>)
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
	ADC3->CR = ADC_CR_ADVREGEN;
 8000228:	4b19      	ldr	r3, [pc, #100]	; (8000290 <ADC_Enable+0x74>)
 800022a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800022e:	609a      	str	r2, [r3, #8]

	//Wait for regulator to fully turn on
	for (int i = 0; i < 10000; i++)
 8000230:	2300      	movs	r3, #0
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	e003      	b.n	800023e <ADC_Enable+0x22>
	{
		__asm volatile("nop");
 8000236:	bf00      	nop
	for (int i = 0; i < 10000; i++)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3301      	adds	r3, #1
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f242 720f 	movw	r2, #9999	; 0x270f
 8000244:	4293      	cmp	r3, r2
 8000246:	ddf6      	ble.n	8000236 <ADC_Enable+0x1a>
	/*************
	 * Calibrate *
	 *************/

	//Start ADC Calibration
	ADC3->CR |= ADC_CR_ADCAL;
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <ADC_Enable+0x74>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a10      	ldr	r2, [pc, #64]	; (8000290 <ADC_Enable+0x74>)
 800024e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000252:	6093      	str	r3, [r2, #8]

	//Wait until calibration is finished
	while (ADC3->CR & ADC_CR_ADCAL_Msk);
 8000254:	bf00      	nop
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <ADC_Enable+0x74>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	2b00      	cmp	r3, #0
 800025c:	dbfb      	blt.n	8000256 <ADC_Enable+0x3a>

	//Wait additional 4 cycles according to datasheet
	__asm volatile("nop");
 800025e:	bf00      	nop
	__asm volatile("nop");
 8000260:	bf00      	nop
	__asm volatile("nop");
 8000262:	bf00      	nop
	__asm volatile("nop");
 8000264:	bf00      	nop
	/***************
	 * Turn ADC on *
	 ***************/

	//Enable ADC
	ADC3->CR |= ADC_CR_ADEN;
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <ADC_Enable+0x74>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	4a09      	ldr	r2, [pc, #36]	; (8000290 <ADC_Enable+0x74>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	6093      	str	r3, [r2, #8]

	//Wait until ADC is ready
	while ((ADC3->ISR & ADC_ISR_ADRDY_Msk) != 1);
 8000272:	bf00      	nop
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <ADC_Enable+0x74>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	d1f9      	bne.n	8000274 <ADC_Enable+0x58>

}
 8000280:	bf00      	nop
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	50000400 	.word	0x50000400

08000294 <ADC_Configure>:
 * 							- Channel 1, 2, 3, 5
 * 							- EOC interrupt enabled
 *
 ** **************************************************************************** */
void ADC_Configure(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
	//Clear interrupts
	uint16_t interrupts = ADC3->ISR;
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <ADC_Configure+0x50>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	80fb      	strh	r3, [r7, #6]
	ADC3->ISR = interrupts;
 80002a0:	4a10      	ldr	r2, [pc, #64]	; (80002e4 <ADC_Configure+0x50>)
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	6013      	str	r3, [r2, #0]

	//Enable EOC and EOS interrupts
	ADC3->IER |= ADC_IER_EOCIE | ADC_IER_EOSIE;
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <ADC_Configure+0x50>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <ADC_Configure+0x50>)
 80002ac:	f043 030c 	orr.w	r3, r3, #12
 80002b0:	6053      	str	r3, [r2, #4]

	//Configure in continuous mode, overrun overwrite
	ADC3->CFGR |= ADC_CFGR_OVRMOD | ADC_CFGR_AUTDLY;
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <ADC_Configure+0x50>)
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <ADC_Configure+0x50>)
 80002b8:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80002bc:	60d3      	str	r3, [r2, #12]

	//Configure conversion sequence
	ADC3->SQR1 |= 					  4 |
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <ADC_Configure+0x50>)
 80002c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002c2:	4908      	ldr	r1, [pc, #32]	; (80002e4 <ADC_Configure+0x50>)
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <ADC_Configure+0x54>)
 80002c6:	4313      	orrs	r3, r2
 80002c8:	630b      	str	r3, [r1, #48]	; 0x30
				(2 << ADC_SQR1_SQ2_Pos) |
				(3 << ADC_SQR1_SQ3_Pos) |
				(5 << ADC_SQR1_SQ4_Pos);

	//Start running the ADC
	ADC3->CR |= ADC_CR_ADSTART;
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <ADC_Configure+0x50>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <ADC_Configure+0x50>)
 80002d0:	f043 0304 	orr.w	r3, r3, #4
 80002d4:	6093      	str	r3, [r2, #8]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	50000400 	.word	0x50000400
 80002e8:	050c2044 	.word	0x050c2044

080002ec <ADC_InitGPIO>:
 *
 * @note Postcondition	: GPIO will be configured for required ADC channels
 *
 ** **************************************************************************** */
void ADC_InitGPIO(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <ADC_InitGPIO+0x8c>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a20      	ldr	r2, [pc, #128]	; (8000378 <ADC_InitGPIO+0x8c>)
 80002f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <ADC_InitGPIO+0x8c>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800030a:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <ADC_InitGPIO+0x8c>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a1a      	ldr	r2, [pc, #104]	; (8000378 <ADC_InitGPIO+0x8c>)
 8000310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000314:	6153      	str	r3, [r2, #20]
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <ADC_InitGPIO+0x8c>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000322:	f107 030c 	add.w	r3, r7, #12
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000332:	2303      	movs	r3, #3
 8000334:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]

	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 800033a:	f242 0302 	movw	r3, #8194	; 0x2002
 800033e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	4619      	mov	r1, r3
 8000346:	480d      	ldr	r0, [pc, #52]	; (800037c <ADC_InitGPIO+0x90>)
 8000348:	f002 f86c 	bl	8002424 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 800034c:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000350:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	4619      	mov	r1, r3
 8000358:	4809      	ldr	r0, [pc, #36]	; (8000380 <ADC_InitGPIO+0x94>)
 800035a:	f002 f863 	bl	8002424 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	202f      	movs	r0, #47	; 0x2f
 8000364:	f002 f827 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000368:	202f      	movs	r0, #47	; 0x2f
 800036a:	f002 f840 	bl	80023ee <HAL_NVIC_EnableIRQ>
}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	48000400 	.word	0x48000400
 8000380:	48001000 	.word	0x48001000

08000384 <ADC3_IRQHandler>:


void ADC3_IRQHandler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	if (ADC3->ISR & ADC_ISR_EOC_Msk)
 8000388:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <ADC3_IRQHandler+0x54>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	2b00      	cmp	r3, #0
 8000392:	d010      	beq.n	80003b6 <ADC3_IRQHandler+0x32>
	{
		adc_values[channel_state] = ADC3->DR;
 8000394:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <ADC3_IRQHandler+0x54>)
 8000396:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000398:	4b10      	ldr	r3, [pc, #64]	; (80003dc <ADC3_IRQHandler+0x58>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	b289      	uxth	r1, r1
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <ADC3_IRQHandler+0x5c>)
 80003a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		channel_state++;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <ADC3_IRQHandler+0x58>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	3301      	adds	r3, #1
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <ADC3_IRQHandler+0x58>)
 80003b4:	701a      	strb	r2, [r3, #0]
	}

	if (ADC3->ISR & ADC_ISR_EOS_Msk)
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <ADC3_IRQHandler+0x54>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f003 0308 	and.w	r3, r3, #8
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d005      	beq.n	80003ce <ADC3_IRQHandler+0x4a>
	{
		//Clear flag
		ADC3->ISR = ADC_ISR_EOS;
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <ADC3_IRQHandler+0x54>)
 80003c4:	2208      	movs	r2, #8
 80003c6:	601a      	str	r2, [r3, #0]

		//Reset channel state
		channel_state = C_CHANNEL_1;
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <ADC3_IRQHandler+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
	}
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	50000400 	.word	0x50000400
 80003dc:	20000028 	.word	0x20000028
 80003e0:	2000002c 	.word	0x2000002c

080003e4 <ES_CalculateConditionForce>:
 *
 * @note Postcondition	: None
 *
 ** **************************************************************************** */
int16_t ES_CalculateConditionForce(int16_t metric, struct Condition condition)
{
 80003e4:	b490      	push	{r4, r7}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4604      	mov	r4, r0
 80003ec:	4638      	mov	r0, r7
 80003ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80003f2:	4623      	mov	r3, r4
 80003f4:	81fb      	strh	r3, [r7, #14]
	int16_t force = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	82fb      	strh	r3, [r7, #22]
	if (metric < (condition.center_point_offset - condition.dead_band))
 80003fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80003fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000402:	4619      	mov	r1, r3
 8000404:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	429a      	cmp	r2, r3
 800040c:	da12      	bge.n	8000434 <ES_CalculateConditionForce+0x50>
	{
		force = condition.negative_coefficient * (metric * (condition.center_point_offset - condition.dead_band));
 800040e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000412:	b29a      	uxth	r2, r3
 8000414:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000418:	4619      	mov	r1, r3
 800041a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800041e:	1acb      	subs	r3, r1, r3
 8000420:	b299      	uxth	r1, r3
 8000422:	89fb      	ldrh	r3, [r7, #14]
 8000424:	fb11 f303 	smulbb	r3, r1, r3
 8000428:	b29b      	uxth	r3, r3
 800042a:	fb12 f303 	smulbb	r3, r2, r3
 800042e:	b29b      	uxth	r3, r3
 8000430:	82fb      	strh	r3, [r7, #22]
 8000432:	e01b      	b.n	800046c <ES_CalculateConditionForce+0x88>
	}
	else if (metric > (condition.center_point_offset + condition.dead_band))
 8000434:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000438:	f9b7 3000 	ldrsh.w	r3, [r7]
 800043c:	4619      	mov	r1, r3
 800043e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000442:	440b      	add	r3, r1
 8000444:	429a      	cmp	r2, r3
 8000446:	dd11      	ble.n	800046c <ES_CalculateConditionForce+0x88>
	{
		force = condition.positive_coefficient * (metric * (condition.center_point_offset + condition.dead_band));
 8000448:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800044c:	b29a      	uxth	r2, r3
 800044e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000452:	4619      	mov	r1, r3
 8000454:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000458:	440b      	add	r3, r1
 800045a:	b299      	uxth	r1, r3
 800045c:	89fb      	ldrh	r3, [r7, #14]
 800045e:	fb11 f303 	smulbb	r3, r1, r3
 8000462:	b29b      	uxth	r3, r3
 8000464:	fb12 f303 	smulbb	r3, r2, r3
 8000468:	b29b      	uxth	r3, r3
 800046a:	82fb      	strh	r3, [r7, #22]
	}

	return force;
 800046c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000470:	4618      	mov	r0, r3
 8000472:	3718      	adds	r7, #24
 8000474:	46bd      	mov	sp, r7
 8000476:	bc90      	pop	{r4, r7}
 8000478:	4770      	bx	lr

0800047a <ES_CalculateEnvelope>:


float ES_CalculateEnvelope(struct Effect effect)
{
 800047a:	b084      	sub	sp, #16
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	f107 0c10 	add.w	ip, r7, #16
 8000486:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float scale_factor = 0;
 800048a:	f04f 0300 	mov.w	r3, #0
 800048e:	607b      	str	r3, [r7, #4]
	if (effect.tick < effect.envelope.attack_time)
 8000490:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000492:	8bbb      	ldrh	r3, [r7, #28]
 8000494:	429a      	cmp	r2, r3
 8000496:	d20e      	bcs.n	80004b6 <ES_CalculateEnvelope+0x3c>
	{
		scale_factor = (float)effect.tick / (float)effect.envelope.attack_time;
 8000498:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800049a:	ee07 3a90 	vmov	s15, r3
 800049e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80004a2:	8bbb      	ldrh	r3, [r7, #28]
 80004a4:	ee07 3a90 	vmov	s15, r3
 80004a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80004b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80004b4:	e023      	b.n	80004fe <ES_CalculateEnvelope+0x84>
	}
	else if (effect.tick < (effect.effect_block.duration + effect.envelope.attack_time))
 80004b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80004b8:	461a      	mov	r2, r3
 80004ba:	8a7b      	ldrh	r3, [r7, #18]
 80004bc:	4619      	mov	r1, r3
 80004be:	8bbb      	ldrh	r3, [r7, #28]
 80004c0:	440b      	add	r3, r1
 80004c2:	429a      	cmp	r2, r3
 80004c4:	da03      	bge.n	80004ce <ES_CalculateEnvelope+0x54>
	{
		scale_factor = 1;
 80004c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	e017      	b.n	80004fe <ES_CalculateEnvelope+0x84>
	}
	else
	{
		scale_factor = ((float)effect.tick - (effect.effect_block.duration + effect.envelope.attack_time))
 80004ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80004d0:	ee07 3a90 	vmov	s15, r3
 80004d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004d8:	8a7b      	ldrh	r3, [r7, #18]
 80004da:	461a      	mov	r2, r3
 80004dc:	8bbb      	ldrh	r3, [r7, #28]
 80004de:	4413      	add	r3, r2
 80004e0:	ee07 3a90 	vmov	s15, r3
 80004e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004e8:	ee77 6a67 	vsub.f32	s13, s14, s15
						/ (float)effect.envelope.fade_time;
 80004ec:	8c3b      	ldrh	r3, [r7, #32]
 80004ee:	ee07 3a90 	vmov	s15, r3
 80004f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
		scale_factor = ((float)effect.tick - (effect.effect_block.duration + effect.envelope.attack_time))
 80004f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80004fa:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return scale_factor;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	ee07 3a90 	vmov	s15, r3
}
 8000504:	eeb0 0a67 	vmov.f32	s0, s15
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	b004      	add	sp, #16
 8000512:	4770      	bx	lr

08000514 <ES_CalculateNetForce>:
 *
 * @note Postcondition	: None
 *
 ** **************************************************************************** */
int16_t ES_CalculateNetForce(void)
{
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	ed2d 8b02 	vpush	{d8}
 800051a:	b08b      	sub	sp, #44	; 0x2c
 800051c:	af08      	add	r7, sp, #32
	int16_t net_force = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	80fb      	strh	r3, [r7, #6]
	int16_t present_force = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	80bb      	strh	r3, [r7, #4]

	for (int i = 0; i < MAX_EFFECTS; i++)
 8000526:	2300      	movs	r3, #0
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	e0eb      	b.n	8000704 <ES_CalculateNetForce+0x1f0>
	{
		if (effects[i].running && effects[i].active)
 800052c:	497b      	ldr	r1, [pc, #492]	; (800071c <ES_CalculateNetForce+0x208>)
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	4613      	mov	r3, r2
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	4413      	add	r3, r2
 8000536:	011b      	lsls	r3, r3, #4
 8000538:	440b      	add	r3, r1
 800053a:	332c      	adds	r3, #44	; 0x2c
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	f000 80dd 	beq.w	80006fe <ES_CalculateNetForce+0x1ea>
 8000544:	4975      	ldr	r1, [pc, #468]	; (800071c <ES_CalculateNetForce+0x208>)
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	4613      	mov	r3, r2
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4413      	add	r3, r2
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	440b      	add	r3, r1
 8000552:	332d      	adds	r3, #45	; 0x2d
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	f000 80d1 	beq.w	80006fe <ES_CalculateNetForce+0x1ea>
		{
			switch (effects[i].effect_block.effect_type)
 800055c:	496f      	ldr	r1, [pc, #444]	; (800071c <ES_CalculateNetForce+0x208>)
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	4613      	mov	r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4413      	add	r3, r2
 8000566:	011b      	lsls	r3, r3, #4
 8000568:	440b      	add	r3, r1
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b0b      	cmp	r3, #11
 800056e:	f200 809f 	bhi.w	80006b0 <ES_CalculateNetForce+0x19c>
 8000572:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <ES_CalculateNetForce+0x64>)
 8000574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000578:	080005a9 	.word	0x080005a9
 800057c:	080006b1 	.word	0x080006b1
 8000580:	080006b1 	.word	0x080006b1
 8000584:	080006b1 	.word	0x080006b1
 8000588:	080006b1 	.word	0x080006b1
 800058c:	080006b1 	.word	0x080006b1
 8000590:	080006b1 	.word	0x080006b1
 8000594:	080006b1 	.word	0x080006b1
 8000598:	08000601 	.word	0x08000601
 800059c:	08000635 	.word	0x08000635
 80005a0:	08000673 	.word	0x08000673
 80005a4:	080006b1 	.word	0x080006b1
			{
			case ET_ConstantForce:

				present_force = effects[i].constant_force.magnitude * ES_CalculateEnvelope(effects[i]);
 80005a8:	495c      	ldr	r1, [pc, #368]	; (800071c <ES_CalculateNetForce+0x208>)
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	4613      	mov	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	4413      	add	r3, r2
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	440b      	add	r3, r1
 80005b6:	332a      	adds	r3, #42	; 0x2a
 80005b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005bc:	ee07 3a90 	vmov	s15, r3
 80005c0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80005c4:	4955      	ldr	r1, [pc, #340]	; (800071c <ES_CalculateNetForce+0x208>)
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	4613      	mov	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	18ce      	adds	r6, r1, r3
 80005d2:	466d      	mov	r5, sp
 80005d4:	f106 0410 	add.w	r4, r6, #16
 80005d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80005e4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005e8:	f7ff ff47 	bl	800047a <ES_CalculateEnvelope>
 80005ec:	eef0 7a40 	vmov.f32	s15, s0
 80005f0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80005f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005f8:	ee17 3a90 	vmov	r3, s15
 80005fc:	80bb      	strh	r3, [r7, #4]

			break;
 80005fe:	e058      	b.n	80006b2 <ES_CalculateNetForce+0x19e>
			case ET_SawtoothDown:

			break;
			case ET_Spring:

				present_force = ES_CalculateConditionForce(Motor_GetPosition(), effects[i].condition);
 8000600:	f000 fa6c 	bl	8000adc <Motor_GetPosition>
 8000604:	4603      	mov	r3, r0
 8000606:	b218      	sxth	r0, r3
 8000608:	4944      	ldr	r1, [pc, #272]	; (800071c <ES_CalculateNetForce+0x208>)
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	440b      	add	r3, r1
 8000616:	3310      	adds	r3, #16
 8000618:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800061c:	4611      	mov	r1, r2
 800061e:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8000622:	4622      	mov	r2, r4
 8000624:	f8d3 400a 	ldr.w	r4, [r3, #10]
 8000628:	4623      	mov	r3, r4
 800062a:	f7ff fedb 	bl	80003e4 <ES_CalculateConditionForce>
 800062e:	4603      	mov	r3, r0
 8000630:	80bb      	strh	r3, [r7, #4]

			break;
 8000632:	e03e      	b.n	80006b2 <ES_CalculateNetForce+0x19e>
			case ET_Damper:

				present_force = ES_CalculateConditionForce(Motor_GetSpeed(), effects[i].condition);
 8000634:	f000 fa20 	bl	8000a78 <Motor_GetSpeed>
 8000638:	eef0 7a40 	vmov.f32	s15, s0
 800063c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000640:	ee17 3a90 	vmov	r3, s15
 8000644:	b218      	sxth	r0, r3
 8000646:	4935      	ldr	r1, [pc, #212]	; (800071c <ES_CalculateNetForce+0x208>)
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	440b      	add	r3, r1
 8000654:	3310      	adds	r3, #16
 8000656:	f8d3 2002 	ldr.w	r2, [r3, #2]
 800065a:	4611      	mov	r1, r2
 800065c:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8000660:	4622      	mov	r2, r4
 8000662:	f8d3 400a 	ldr.w	r4, [r3, #10]
 8000666:	4623      	mov	r3, r4
 8000668:	f7ff febc 	bl	80003e4 <ES_CalculateConditionForce>
 800066c:	4603      	mov	r3, r0
 800066e:	80bb      	strh	r3, [r7, #4]

			break;
 8000670:	e01f      	b.n	80006b2 <ES_CalculateNetForce+0x19e>
			case ET_Inertia:

				present_force = ES_CalculateConditionForce(Motor_GetAcceleration(), effects[i].condition);
 8000672:	f000 fa0f 	bl	8000a94 <Motor_GetAcceleration>
 8000676:	eef0 7a40 	vmov.f32	s15, s0
 800067a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800067e:	ee17 3a90 	vmov	r3, s15
 8000682:	b218      	sxth	r0, r3
 8000684:	4925      	ldr	r1, [pc, #148]	; (800071c <ES_CalculateNetForce+0x208>)
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	440b      	add	r3, r1
 8000692:	3310      	adds	r3, #16
 8000694:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8000698:	4611      	mov	r1, r2
 800069a:	f8d3 4006 	ldr.w	r4, [r3, #6]
 800069e:	4622      	mov	r2, r4
 80006a0:	f8d3 400a 	ldr.w	r4, [r3, #10]
 80006a4:	4623      	mov	r3, r4
 80006a6:	f7ff fe9d 	bl	80003e4 <ES_CalculateConditionForce>
 80006aa:	4603      	mov	r3, r0
 80006ac:	80bb      	strh	r3, [r7, #4]

			break;
 80006ae:	e000      	b.n	80006b2 <ES_CalculateNetForce+0x19e>
			case ET_Friction:

			break;
			default:

			break;
 80006b0:	bf00      	nop
			}

			net_force += present_force * ((float)effects[i].effect_block.gain/100);
 80006b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b6:	ee07 3a90 	vmov	s15, r3
 80006ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006ca:	4914      	ldr	r1, [pc, #80]	; (800071c <ES_CalculateNetForce+0x208>)
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	4613      	mov	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	440b      	add	r3, r1
 80006d8:	3308      	adds	r3, #8
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	ee07 3a90 	vmov	s15, r3
 80006e0:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80006e4:	eddf 5a0e 	vldr	s11, [pc, #56]	; 8000720 <ES_CalculateNetForce+0x20c>
 80006e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80006ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006f8:	ee17 3a90 	vmov	r3, s15
 80006fc:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < MAX_EFFECTS; i++)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	2b09      	cmp	r3, #9
 8000708:	f77f af10 	ble.w	800052c <ES_CalculateNetForce+0x18>

		}
	}

	return net_force;
 800070c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000710:	4618      	mov	r0, r3
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	ecbd 8b02 	vpop	{d8}
 800071a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800071c:	20000034 	.word	0x20000034
 8000720:	42c80000 	.word	0x42c80000

08000724 <ES_PlayEffects>:
	}
}


void ES_PlayEffects(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	int16_t force = ES_CalculateNetForce();
 800072a:	f7ff fef3 	bl	8000514 <ES_CalculateNetForce>
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]

	if (force < 0)
 8000732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000736:	2b00      	cmp	r3, #0
 8000738:	da08      	bge.n	800074c <ES_PlayEffects+0x28>
	{
		Motor_SetDirection(MD_Left);
 800073a:	2001      	movs	r0, #1
 800073c:	f000 f918 	bl	8000970 <Motor_SetDirection>
		Motor_SetForce(force);
 8000740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f937 	bl	80009b8 <Motor_SetForce>
				effects[i].tick = 0;
			}
		}
	}
*/
}
 800074a:	e007      	b.n	800075c <ES_PlayEffects+0x38>
		Motor_SetDirection(MD_Right);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 f90f 	bl	8000970 <Motor_SetDirection>
		Motor_SetForce(force);
 8000752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f92e 	bl	80009b8 <Motor_SetForce>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <EXTI3_IRQHandler>:

    HAL_NVIC_EnableIRQ(EXTI3_IRQn);

}

void EXTI3_IRQHandler(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <EXTI3_IRQHandler+0x48>)
 800076a:	2208      	movs	r2, #8
 800076c:	615a      	str	r2, [r3, #20]

	myprint("PLEASE WORK\r\n");
 800076e:	4810      	ldr	r0, [pc, #64]	; (80007b0 <EXTI3_IRQHandler+0x4c>)
 8000770:	f000 fa0e 	bl	8000b90 <myprint>

	if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_2))	//Forward
 8000774:	2104      	movs	r1, #4
 8000776:	480f      	ldr	r0, [pc, #60]	; (80007b4 <EXTI3_IRQHandler+0x50>)
 8000778:	f001 ffde 	bl	8002738 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d009      	beq.n	8000796 <EXTI3_IRQHandler+0x32>
	{
		rotary_position++;
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <EXTI3_IRQHandler+0x54>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	b21b      	sxth	r3, r3
 8000788:	b29b      	uxth	r3, r3
 800078a:	3301      	adds	r3, #1
 800078c:	b29b      	uxth	r3, r3
 800078e:	b21a      	sxth	r2, r3
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <EXTI3_IRQHandler+0x54>)
 8000792:	801a      	strh	r2, [r3, #0]
	else		//Backward
	{
		rotary_position--;
	}

}
 8000794:	e008      	b.n	80007a8 <EXTI3_IRQHandler+0x44>
		rotary_position--;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <EXTI3_IRQHandler+0x54>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	b21b      	sxth	r3, r3
 800079c:	b29b      	uxth	r3, r3
 800079e:	3b01      	subs	r3, #1
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <EXTI3_IRQHandler+0x54>)
 80007a6:	801a      	strh	r2, [r3, #0]
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40010400 	.word	0x40010400
 80007b0:	08005f30 	.word	0x08005f30
 80007b4:	48001400 	.word	0x48001400
 80007b8:	20000214 	.word	0x20000214

080007bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_GPIO_Init+0x74>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <MX_GPIO_Init+0x74>)
 80007c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_GPIO_Init+0x74>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_GPIO_Init+0x74>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <MX_GPIO_Init+0x74>)
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_GPIO_Init+0x74>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_GPIO_Init+0x74>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <MX_GPIO_Init+0x74>)
 80007f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_GPIO_Init+0x74>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_GPIO_Init+0x74>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <MX_GPIO_Init+0x74>)
 8000810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_GPIO_Init+0x74>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083a:	f001 fc7b 	bl	8002134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083e:	f000 f821 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000842:	f7ff ffbb 	bl	80007bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000846:	f001 fbcd 	bl	8001fe4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800084a:	f001 fa0d 	bl	8001c68 <MX_TIM3_Init>
  MX_TIM15_Init();
 800084e:	f001 fa61 	bl	8001d14 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  //Start rotary encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000852:	213c      	movs	r1, #60	; 0x3c
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <main+0x48>)
 8000856:	f003 ff07 	bl	8004668 <HAL_TIM_Encoder_Start>

  Motor_Start();
 800085a:	f000 f8e7 	bl	8000a2c <Motor_Start>

  //Initialize pedals/peripherals
  ADC_Init();
 800085e:	f7ff fcc1 	bl	80001e4 <ADC_Init>

  //Find zero position


  myprint("Starting USB...\n\r");
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <main+0x4c>)
 8000864:	f000 f994 	bl	8000b90 <myprint>
  myusb_Initialize();
 8000868:	f000 fa22 	bl	8000cb0 <myusb_Initialize>

  uint8_t direction = 0; //0 = right, 1 = left
 800086c:	2300      	movs	r3, #0
 800086e:	71fb      	strb	r3, [r7, #7]
  volatile int16_t rotation_value = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	80bb      	strh	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  myprint_dec(0);
 8000874:	2000      	movs	r0, #0
 8000876:	f000 f9ed 	bl	8000c54 <myprint_dec>
 800087a:	e7fb      	b.n	8000874 <main+0x40>
 800087c:	200003e4 	.word	0x200003e4
 8000880:	08005f40 	.word	0x08005f40

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b0a6      	sub	sp, #152	; 0x98
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800088e:	2228      	movs	r2, #40	; 0x28
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f005 faf6 	bl	8005e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2258      	movs	r2, #88	; 0x58
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 fae8 	bl	8005e84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008b4:	2303      	movs	r3, #3
 80008b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008bc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008be:	2301      	movs	r3, #1
 80008c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c2:	2310      	movs	r3, #16
 80008c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c8:	2302      	movs	r3, #2
 80008ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 ff55 	bl	8002798 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008f4:	f000 f836 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2302      	movs	r3, #2
 80008fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000908:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800090e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000912:	2101      	movs	r1, #1
 8000914:	4618      	mov	r0, r3
 8000916:	f002 ff93 	bl	8003840 <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000920:	f000 f820 	bl	8000964 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_TIM15
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <SystemClock_Config+0xdc>)
 8000926:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8000928:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800092c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLLCLK;
 800092e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000932:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_PLLCLK;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 800093a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV2;
 8000940:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4618      	mov	r0, r3
 800094a:	f003 f9af 	bl	8003cac <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000954:	f000 f806 	bl	8000964 <Error_Handler>
  }
}
 8000958:	bf00      	nop
 800095a:	3798      	adds	r7, #152	; 0x98
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	00620104 	.word	0x00620104

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <Motor_SetDirection>:

uint32_t motor_force = 0;
enum MotorDirection motor_direction = MD_Right;

void Motor_SetDirection(enum MotorDirection direction)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
	motor_direction = direction;
 800097a:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <Motor_SetDirection+0x40>)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	7013      	strb	r3, [r2, #0]
	if (direction == MD_Right)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d108      	bne.n	8000998 <Motor_SetDirection+0x28>
	{
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000986:	2100      	movs	r1, #0
 8000988:	480a      	ldr	r0, [pc, #40]	; (80009b4 <Motor_SetDirection+0x44>)
 800098a:	f003 fc11 	bl	80041b0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 800098e:	2104      	movs	r1, #4
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <Motor_SetDirection+0x44>)
 8000992:	f003 fd19 	bl	80043c8 <HAL_TIM_PWM_Stop>
	{
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
	}

}
 8000996:	e007      	b.n	80009a8 <Motor_SetDirection+0x38>
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000998:	2104      	movs	r1, #4
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <Motor_SetDirection+0x44>)
 800099c:	f003 fc08 	bl	80041b0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80009a0:	2100      	movs	r1, #0
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <Motor_SetDirection+0x44>)
 80009a4:	f003 fd10 	bl	80043c8 <HAL_TIM_PWM_Stop>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000228 	.word	0x20000228
 80009b4:	200004a0 	.word	0x200004a0

080009b8 <Motor_SetForce>:

void Motor_SetForce(uint32_t force)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	motor_force = 150;
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <Motor_SetForce+0x68>)
 80009c2:	2296      	movs	r2, #150	; 0x96
 80009c4:	601a      	str	r2, [r3, #0]
	if (force + motor_force > 1000)
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <Motor_SetForce+0x68>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009d2:	d904      	bls.n	80009de <Motor_SetForce+0x26>
	{
		motor_force = 1000;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <Motor_SetForce+0x68>)
 80009d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	e005      	b.n	80009ea <Motor_SetForce+0x32>
	}
	else
	{
		motor_force += force;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <Motor_SetForce+0x68>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <Motor_SetForce+0x68>)
 80009e8:	6013      	str	r3, [r2, #0]
	}
	motor_force /= 2;
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <Motor_SetForce+0x68>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	085b      	lsrs	r3, r3, #1
 80009f0:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <Motor_SetForce+0x68>)
 80009f2:	6013      	str	r3, [r2, #0]

	if (motor_direction == MD_Right)
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <Motor_SetForce+0x6c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d105      	bne.n	8000a08 <Motor_SetForce+0x50>
	{
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, motor_force);
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <Motor_SetForce+0x70>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <Motor_SetForce+0x68>)
 8000a02:	6812      	ldr	r2, [r2, #0]
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, motor_force);
	}
}
 8000a06:	e004      	b.n	8000a12 <Motor_SetForce+0x5a>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, motor_force);
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <Motor_SetForce+0x70>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <Motor_SetForce+0x68>)
 8000a0e:	6812      	ldr	r2, [r2, #0]
 8000a10:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000224 	.word	0x20000224
 8000a24:	20000228 	.word	0x20000228
 8000a28:	200004a0 	.word	0x200004a0

08000a2c <Motor_Start>:

void Motor_Start(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000a30:	2100      	movs	r1, #0
 8000a32:	4809      	ldr	r0, [pc, #36]	; (8000a58 <Motor_Start+0x2c>)
 8000a34:	f003 fbbc 	bl	80041b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4807      	ldr	r0, [pc, #28]	; (8000a58 <Motor_Start+0x2c>)
 8000a3c:	f003 fbb8 	bl	80041b0 <HAL_TIM_PWM_Start>
	Motor_SetForce(0);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff ffb9 	bl	80009b8 <Motor_SetForce>
	Motor_SetDirection(MD_Right);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff ff92 	bl	8000970 <Motor_SetDirection>
	//LL_TIM_EnableCounter(TIM15);
	ready = 1;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <Motor_Start+0x30>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200004a0 	.word	0x200004a0
 8000a5c:	20000220 	.word	0x20000220

08000a60 <Motor_IsReady>:
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
}

uint8_t Motor_IsReady(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
	return ready;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <Motor_IsReady+0x14>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000220 	.word	0x20000220

08000a78 <Motor_GetSpeed>:

float Motor_GetSpeed(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
	return motor_speed;
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <Motor_GetSpeed+0x18>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	ee07 3a90 	vmov	s15, r3
}
 8000a84:	eeb0 0a67 	vmov.f32	s0, s15
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	20000218 	.word	0x20000218

08000a94 <Motor_GetAcceleration>:

float Motor_GetAcceleration(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
	uint16_t delta = motor_speed - previous_motor_speed;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <Motor_GetAcceleration+0x40>)
 8000a9c:	ed93 7a00 	vldr	s14, [r3]
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <Motor_GetAcceleration+0x44>)
 8000aa2:	edd3 7a00 	vldr	s15, [r3]
 8000aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aae:	ee17 3a90 	vmov	r3, s15
 8000ab2:	80fb      	strh	r3, [r7, #6]

	return delta * 1000;
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aba:	fb02 f303 	mul.w	r3, r2, r3
 8000abe:	ee07 3a90 	vmov	s15, r3
 8000ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	20000218 	.word	0x20000218
 8000ad8:	2000021c 	.word	0x2000021c

08000adc <Motor_GetPosition>:

uint16_t Motor_GetPosition(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
	return rotary_position;
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <Motor_GetPosition+0x18>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	b29b      	uxth	r3, r3
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000214 	.word	0x20000214

08000af8 <Motor_CalculateSpeed>:

//Called every 1ms
void Motor_CalculateSpeed(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
	int16_t delta = (rotary_position - previous_rotary_position);
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <Motor_CalculateSpeed+0x88>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <Motor_CalculateSpeed+0x8c>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b21b      	sxth	r3, r3
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	80fb      	strh	r3, [r7, #6]
	previous_rotary_position = rotary_position;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <Motor_CalculateSpeed+0x88>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <Motor_CalculateSpeed+0x8c>)
 8000b1c:	801a      	strh	r2, [r3, #0]

	if (delta < 0) delta *= -1000;
 8000b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da0b      	bge.n	8000b3e <Motor_CalculateSpeed+0x46>
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	0192      	lsls	r2, r2, #6
 8000b2c:	1ad2      	subs	r2, r2, r3
 8000b2e:	0192      	lsls	r2, r2, #6
 8000b30:	441a      	add	r2, r3
 8000b32:	0052      	lsls	r2, r2, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	80fb      	strh	r3, [r7, #6]
 8000b3c:	e008      	b.n	8000b50 <Motor_CalculateSpeed+0x58>
	else delta *= 1000;
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	461a      	mov	r2, r3
 8000b42:	0152      	lsls	r2, r2, #5
 8000b44:	1ad2      	subs	r2, r2, r3
 8000b46:	0092      	lsls	r2, r2, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	80fb      	strh	r3, [r7, #6]

	motor_speed = delta / 28;
 8000b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <Motor_CalculateSpeed+0x90>)
 8000b56:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5a:	441a      	add	r2, r3
 8000b5c:	1112      	asrs	r2, r2, #4
 8000b5e:	17db      	asrs	r3, r3, #31
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	ee07 3a90 	vmov	s15, r3
 8000b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <Motor_CalculateSpeed+0x94>)
 8000b6e:	edc3 7a00 	vstr	s15, [r3]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000214 	.word	0x20000214
 8000b84:	20000216 	.word	0x20000216
 8000b88:	92492493 	.word	0x92492493
 8000b8c:	20000218 	.word	0x20000218

08000b90 <myprint>:
#include "stdio.h"
#include "string.h"
#include "stdlib.h"

void myprint(char* string)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0b6      	sub	sp, #216	; 0xd8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	uint8_t buffer[200];
	uint16_t len = strlen(string);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fb1b 	bl	80001d4 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2

	for(int i = 0; i < len; i++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000baa:	e010      	b.n	8000bce <myprint+0x3e>
	{
		buffer[i] = string[i];
 8000bac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	7819      	ldrb	r1, [r3, #0]
 8000bb6:	f107 0208 	add.w	r2, r7, #8
 8000bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000bbe:	4413      	add	r3, r2
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++)
 8000bc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000bc8:	3301      	adds	r3, #1
 8000bca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000bce:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8000bd2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	dbe8      	blt.n	8000bac <myprint+0x1c>
	}

	HAL_UART_Transmit(&huart3, buffer, len, 0xFFFF);
 8000bda:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8000bde:	f107 0108 	add.w	r1, r7, #8
 8000be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <myprint+0x64>)
 8000be8:	f004 fcf4 	bl	80055d4 <HAL_UART_Transmit>
}
 8000bec:	bf00      	nop
 8000bee:	37d8      	adds	r7, #216	; 0xd8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000055c 	.word	0x2000055c

08000bf8 <myprint_hex>:

void myprint_hex(int reg)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	char buffer[20];
	for (int i = 0; i < 20; i++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	e008      	b.n	8000c18 <myprint_hex+0x20>
	{
		buffer[i] = '\0';
 8000c06:	f107 0208 	add.w	r2, r7, #8
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++)
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3301      	adds	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	2b13      	cmp	r3, #19
 8000c1c:	ddf3      	ble.n	8000c06 <myprint_hex+0xe>
	}
	itoa(reg, buffer, 16);
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2210      	movs	r2, #16
 8000c24:	4619      	mov	r1, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f005 f92a 	bl	8005e80 <itoa>
	HAL_UART_Transmit(&huart3, buffer, 20, 0xFFFF);
 8000c2c:	f107 0108 	add.w	r1, r7, #8
 8000c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c34:	2214      	movs	r2, #20
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <myprint_hex+0x54>)
 8000c38:	f004 fccc 	bl	80055d4 <HAL_UART_Transmit>

	myprint("\r\n");
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <myprint_hex+0x58>)
 8000c3e:	f7ff ffa7 	bl	8000b90 <myprint>
}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000055c 	.word	0x2000055c
 8000c50:	08005f54 	.word	0x08005f54

08000c54 <myprint_dec>:

void myprint_dec(int reg)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	char buffer[20];
	for (int i = 0; i < 20; i++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
 8000c60:	e008      	b.n	8000c74 <myprint_dec+0x20>
	{
		buffer[i] = '\0';
 8000c62:	f107 0208 	add.w	r2, r7, #8
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	4413      	add	r3, r2
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++)
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3301      	adds	r3, #1
 8000c72:	61fb      	str	r3, [r7, #28]
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	2b13      	cmp	r3, #19
 8000c78:	ddf3      	ble.n	8000c62 <myprint_dec+0xe>
	}
	itoa(reg, buffer, 10);
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	220a      	movs	r2, #10
 8000c80:	4619      	mov	r1, r3
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f005 f8fc 	bl	8005e80 <itoa>
	HAL_UART_Transmit(&huart3, buffer, 20, 0xFFFF);
 8000c88:	f107 0108 	add.w	r1, r7, #8
 8000c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c90:	2214      	movs	r2, #20
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <myprint_dec+0x54>)
 8000c94:	f004 fc9e 	bl	80055d4 <HAL_UART_Transmit>

	myprint("\r\n");
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <myprint_dec+0x58>)
 8000c9a:	f7ff ff79 	bl	8000b90 <myprint>
}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000055c 	.word	0x2000055c
 8000cac:	08005f54 	.word	0x08005f54

08000cb0 <myusb_Initialize>:
/*
 * Memory locations found in stm32f303xe.h
 */

void myusb_Initialize(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
	//Initialize Descriptors
	DescriptorInitialization();
 8000cb6:	f000 f8c5 	bl	8000e44 <DescriptorInitialization>

	//Initialize data in report
	report.members.report_id = 1;
 8000cba:	4b59      	ldr	r3, [pc, #356]	; (8000e20 <myusb_Initialize+0x170>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
	report.members.brake = 0;
 8000cc0:	4b57      	ldr	r3, [pc, #348]	; (8000e20 <myusb_Initialize+0x170>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	80da      	strh	r2, [r3, #6]
	report.members.throttle = 0;
 8000cc6:	4b56      	ldr	r3, [pc, #344]	; (8000e20 <myusb_Initialize+0x170>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	809a      	strh	r2, [r3, #4]
	report.members.clutch = 0;
 8000ccc:	4b54      	ldr	r3, [pc, #336]	; (8000e20 <myusb_Initialize+0x170>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	811a      	strh	r2, [r3, #8]
	report.members.handbrake = 0;
 8000cd2:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <myusb_Initialize+0x170>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	815a      	strh	r2, [r3, #10]
	report.members.buttons_low = 0;
 8000cd8:	4b51      	ldr	r3, [pc, #324]	; (8000e20 <myusb_Initialize+0x170>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	705a      	strb	r2, [r3, #1]
	report.members.buttons_mid = 0;
 8000cde:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <myusb_Initialize+0x170>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	709a      	strb	r2, [r3, #2]
	report.members.buttons_high = 0;
 8000ce4:	4b4e      	ldr	r3, [pc, #312]	; (8000e20 <myusb_Initialize+0x170>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	70da      	strb	r2, [r3, #3]
	report.members.steering = 0;
 8000cea:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <myusb_Initialize+0x170>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	819a      	strh	r2, [r3, #12]

	//myprint_dec(sizeof(ReportDescriptor));

	//Map USBz to registers
	USBz = USB;
 8000cf0:	4b4c      	ldr	r3, [pc, #304]	; (8000e24 <myusb_Initialize+0x174>)
 8000cf2:	4a4d      	ldr	r2, [pc, #308]	; (8000e28 <myusb_Initialize+0x178>)
 8000cf4:	601a      	str	r2, [r3, #0]
	my_btable = (BTableLayout*)0x40006000;
 8000cf6:	4b4d      	ldr	r3, [pc, #308]	; (8000e2c <myusb_Initialize+0x17c>)
 8000cf8:	4a4d      	ldr	r2, [pc, #308]	; (8000e30 <myusb_Initialize+0x180>)
 8000cfa:	601a      	str	r2, [r3, #0]

	//Enable clocks
	__HAL_RCC_USB_CLK_ENABLE();
 8000cfc:	4b4d      	ldr	r3, [pc, #308]	; (8000e34 <myusb_Initialize+0x184>)
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	4a4c      	ldr	r2, [pc, #304]	; (8000e34 <myusb_Initialize+0x184>)
 8000d02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d06:	61d3      	str	r3, [r2, #28]
 8000d08:	4b4a      	ldr	r3, [pc, #296]	; (8000e34 <myusb_Initialize+0x184>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]

	//Initialize interrupts + remapping
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8000d14:	4b48      	ldr	r3, [pc, #288]	; (8000e38 <myusb_Initialize+0x188>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a47      	ldr	r2, [pc, #284]	; (8000e38 <myusb_Initialize+0x188>)
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	204a      	movs	r0, #74	; 0x4a
 8000d26:	f001 fb46 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8000d2a:	204a      	movs	r0, #74	; 0x4a
 8000d2c:	f001 fb5f 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	204b      	movs	r0, #75	; 0x4b
 8000d36:	f001 fb3e 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8000d3a:	204b      	movs	r0, #75	; 0x4b
 8000d3c:	f001 fb57 	bl	80023ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USBWakeUp_RMP_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	204c      	movs	r0, #76	; 0x4c
 8000d46:	f001 fb36 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USBWakeUp_RMP_IRQn);
 8000d4a:	204c      	movs	r0, #76	; 0x4c
 8000d4c:	f001 fb4f 	bl	80023ee <HAL_NVIC_EnableIRQ>

	//Configure USB GPIO
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d50:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <myusb_Initialize+0x184>)
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	4a37      	ldr	r2, [pc, #220]	; (8000e34 <myusb_Initialize+0x184>)
 8000d56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d5a:	6153      	str	r3, [r2, #20]
 8000d5c:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <myusb_Initialize+0x184>)
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d78:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d7c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000d8a:	230e      	movs	r3, #14
 8000d8c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f001 fb44 	bl	8002424 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d9c:	2340      	movs	r3, #64	; 0x40
 8000d9e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	4619      	mov	r1, r3
 8000db2:	4822      	ldr	r0, [pc, #136]	; (8000e3c <myusb_Initialize+0x18c>)
 8000db4:	f001 fb36 	bl	8002424 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2140      	movs	r1, #64	; 0x40
 8000dbc:	481f      	ldr	r0, [pc, #124]	; (8000e3c <myusb_Initialize+0x18c>)
 8000dbe:	f001 fcd3 	bl	8002768 <HAL_GPIO_WritePin>

	//Start USB peripheral
	USBz->CNTR = 1;	//Start transceiver
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <myusb_Initialize+0x174>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	for (int i = 0; i < 1000; i++)	//Delay according to datasheet
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
 8000dd0:	e003      	b.n	8000dda <myusb_Initialize+0x12a>
	{
		__asm volatile("nop");
 8000dd2:	bf00      	nop
	for (int i = 0; i < 1000; i++)	//Delay according to datasheet
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000de0:	dbf7      	blt.n	8000dd2 <myusb_Initialize+0x122>
	}

	//De-assert reset
	USBz->CNTR = 0;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <myusb_Initialize+0x174>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	//Clear pending interrupts
	USBz->ISTR = 0U;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <myusb_Initialize+0x174>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	//Enable these USB Interrupts
	USBz->CNTR |= USB_CNTR_RESETM | USB_CNTR_CTRM | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ESOFM;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <myusb_Initialize+0x174>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000dfe:	b299      	uxth	r1, r3
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <myusb_Initialize+0x174>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <myusb_Initialize+0x190>)
 8000e06:	430b      	orrs	r3, r1
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40

	//Enable pull up to start enumeration
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2140      	movs	r1, #64	; 0x40
 8000e12:	480a      	ldr	r0, [pc, #40]	; (8000e3c <myusb_Initialize+0x18c>)
 8000e14:	f001 fca8 	bl	8002768 <HAL_GPIO_WritePin>

}
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200003b8 	.word	0x200003b8
 8000e24:	2000026c 	.word	0x2000026c
 8000e28:	40005c00 	.word	0x40005c00
 8000e2c:	20000270 	.word	0x20000270
 8000e30:	40006000 	.word	0x40006000
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	48001800 	.word	0x48001800
 8000e40:	ffff9d00 	.word	0xffff9d00

08000e44 <DescriptorInitialization>:

void DescriptorInitialization(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
	//Just device descriptor until I reach further requests
	device.descriptor.bLength = 18;
 8000e48:	4b48      	ldr	r3, [pc, #288]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e4a:	2212      	movs	r2, #18
 8000e4c:	701a      	strb	r2, [r3, #0]
	device.descriptor.bDescriptorType = 0x01;
 8000e4e:	4b47      	ldr	r3, [pc, #284]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	705a      	strb	r2, [r3, #1]
	device.descriptor.bcdUSB = 0x0110;
 8000e54:	4b45      	ldr	r3, [pc, #276]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e56:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000e5a:	805a      	strh	r2, [r3, #2]
	device.descriptor.bDeviceClass = 0x00;
 8000e5c:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	711a      	strb	r2, [r3, #4]
	device.descriptor.bDeviceSubClass = 0x00;
 8000e62:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	715a      	strb	r2, [r3, #5]
	device.descriptor.bDeviceProtocol = 0x00;
 8000e68:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	719a      	strb	r2, [r3, #6]
	device.descriptor.bMaxPacketSize0 = 64;
 8000e6e:	4b3f      	ldr	r3, [pc, #252]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e70:	2240      	movs	r2, #64	; 0x40
 8000e72:	71da      	strb	r2, [r3, #7]
	device.descriptor.idVendor = 0x045e;	//03ED
 8000e74:	4b3d      	ldr	r3, [pc, #244]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e76:	f240 425e 	movw	r2, #1118	; 0x45e
 8000e7a:	811a      	strh	r2, [r3, #8]
	device.descriptor.idProduct = 0x007D;	//2FF4
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e7e:	227d      	movs	r2, #125	; 0x7d
 8000e80:	815a      	strh	r2, [r3, #10]
	device.descriptor.bcdDevice = 0x0100;
 8000e82:	4b3a      	ldr	r3, [pc, #232]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e88:	819a      	strh	r2, [r3, #12]
	device.descriptor.iManufacturer = 0x00;
 8000e8a:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	739a      	strb	r2, [r3, #14]
	device.descriptor.iProduct = 0x00;
 8000e90:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	73da      	strb	r2, [r3, #15]
	device.descriptor.iSerialNumber = 0x00;
 8000e96:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	741a      	strb	r2, [r3, #16]
	device.descriptor.bNumConfigurations = 1;
 8000e9c:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <DescriptorInitialization+0x128>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	745a      	strb	r2, [r3, #17]

	configuration.descriptor.bLength = 0x09;
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <DescriptorInitialization+0x12c>)
 8000ea4:	2209      	movs	r2, #9
 8000ea6:	701a      	strb	r2, [r3, #0]
	configuration.descriptor.bDescriptorType = 0x02;
 8000ea8:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <DescriptorInitialization+0x12c>)
 8000eaa:	2202      	movs	r2, #2
 8000eac:	705a      	strb	r2, [r3, #1]
	configuration.descriptor.wTotalLength = 0x22;
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <DescriptorInitialization+0x12c>)
 8000eb0:	2222      	movs	r2, #34	; 0x22
 8000eb2:	805a      	strh	r2, [r3, #2]
	configuration.descriptor.bNumInterfaces = 0x01;
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <DescriptorInitialization+0x12c>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	711a      	strb	r2, [r3, #4]
	configuration.descriptor.bConfigurationValue = 0x01;
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <DescriptorInitialization+0x12c>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	715a      	strb	r2, [r3, #5]
	configuration.descriptor.iConfiguration = 0x00;
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <DescriptorInitialization+0x12c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	719a      	strb	r2, [r3, #6]
	configuration.descriptor.bmAttributes = 0xC0;
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <DescriptorInitialization+0x12c>)
 8000ec8:	22c0      	movs	r2, #192	; 0xc0
 8000eca:	71da      	strb	r2, [r3, #7]
	configuration.descriptor.MaxPower = 0x00;
 8000ecc:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <DescriptorInitialization+0x12c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	721a      	strb	r2, [r3, #8]

	interface.descriptor.bLength = 0x09;
 8000ed2:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <DescriptorInitialization+0x130>)
 8000ed4:	2209      	movs	r2, #9
 8000ed6:	701a      	strb	r2, [r3, #0]
	interface.descriptor.bDescriptorType = 0x04;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <DescriptorInitialization+0x130>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	705a      	strb	r2, [r3, #1]
	interface.descriptor.bInterfaceNumber = 0x00;
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <DescriptorInitialization+0x130>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	709a      	strb	r2, [r3, #2]
	interface.descriptor.bAlternateSetting = 0x00;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <DescriptorInitialization+0x130>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	70da      	strb	r2, [r3, #3]
	interface.descriptor.bNumEndpoints = 0x01;
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <DescriptorInitialization+0x130>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	711a      	strb	r2, [r3, #4]
	interface.descriptor.bInterfaceClass = 0x03;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <DescriptorInitialization+0x130>)
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	715a      	strb	r2, [r3, #5]
	interface.descriptor.bInterfaceSubClass = 0x00;
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <DescriptorInitialization+0x130>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	719a      	strb	r2, [r3, #6]
	interface.descriptor.bInterfaceProtocol = 0x00;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <DescriptorInitialization+0x130>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	71da      	strb	r2, [r3, #7]
	interface.descriptor.iInterface = 0x00;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <DescriptorInitialization+0x130>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	721a      	strb	r2, [r3, #8]

	endpoint.descriptor.bLength = 0x07;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <DescriptorInitialization+0x134>)
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	701a      	strb	r2, [r3, #0]
	endpoint.descriptor.bDescriptorType = 0x05;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <DescriptorInitialization+0x134>)
 8000f10:	2205      	movs	r2, #5
 8000f12:	705a      	strb	r2, [r3, #1]
	endpoint.descriptor.bEndpointAddress = 0x81;
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <DescriptorInitialization+0x134>)
 8000f16:	2281      	movs	r2, #129	; 0x81
 8000f18:	709a      	strb	r2, [r3, #2]
	endpoint.descriptor.bmAttributes = 0x03;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <DescriptorInitialization+0x134>)
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	70da      	strb	r2, [r3, #3]
	endpoint.descriptor.wMaxPacketSize = 0x40; //64 bytes
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <DescriptorInitialization+0x134>)
 8000f22:	2240      	movs	r2, #64	; 0x40
 8000f24:	809a      	strh	r2, [r3, #4]
	endpoint.descriptor.bInterval = 0x1;		//1ms
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <DescriptorInitialization+0x134>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	719a      	strb	r2, [r3, #6]

	hid.descriptor.bLength = 0x09;
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <DescriptorInitialization+0x138>)
 8000f2e:	2209      	movs	r2, #9
 8000f30:	701a      	strb	r2, [r3, #0]
	hid.descriptor.bDescriptorType = 0x21;
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <DescriptorInitialization+0x138>)
 8000f34:	2221      	movs	r2, #33	; 0x21
 8000f36:	705a      	strb	r2, [r3, #1]
	hid.descriptor.bcdHID = 0x111;
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <DescriptorInitialization+0x138>)
 8000f3a:	f240 1211 	movw	r2, #273	; 0x111
 8000f3e:	805a      	strh	r2, [r3, #2]
	hid.descriptor.bCountryCode = 0x00;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <DescriptorInitialization+0x138>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	711a      	strb	r2, [r3, #4]
	hid.descriptor.bNumDescriptors = 0x01;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <DescriptorInitialization+0x138>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	715a      	strb	r2, [r3, #5]
	hid.descriptor.bDescriptorTypeReport = 0x22;
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <DescriptorInitialization+0x138>)
 8000f4e:	2222      	movs	r2, #34	; 0x22
 8000f50:	719a      	strb	r2, [r3, #6]
	hid.descriptor.wDescriptorLength = 117;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <DescriptorInitialization+0x138>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f042 0275 	orr.w	r2, r2, #117	; 0x75
 8000f5a:	71da      	strb	r2, [r3, #7]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	721a      	strb	r2, [r3, #8]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	2000022c 	.word	0x2000022c
 8000f70:	20000240 	.word	0x20000240
 8000f74:	2000024c 	.word	0x2000024c
 8000f78:	20000258 	.word	0x20000258
 8000f7c:	20000260 	.word	0x20000260

08000f80 <ReadEndpoint>:
/* -----------FUNCTIONS--------------*/
/*-----------------------------------*/

//Reads single byte past buffer if num_bytes is odd. Shouldn't result in any issues...
void ReadEndpoint(uint8_t endpoint, uint8_t num_bytes)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	460a      	mov	r2, r1
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	71bb      	strb	r3, [r7, #6]
	if (num_bytes != 0)
 8000f90:	79bb      	ldrb	r3, [r7, #6]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d02a      	beq.n	8000fec <ReadEndpoint+0x6c>
	{
		if ((num_bytes % 2) != 0)
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <ReadEndpoint+0x28>
		{
			num_bytes += 1;
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	71bb      	strb	r3, [r7, #6]
		}
		//Get offset to endpoint n RX buffer
		uint16_t offset = *(volatile uint16_t*)((endpoint*8 + 4) + 0x40006000);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	00da      	lsls	r2, r3, #3
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <ReadEndpoint+0x78>)
 8000fae:	4413      	add	r3, r2
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	827b      	strh	r3, [r7, #18]

		//Point to RX buffer
		volatile uint16_t* location = ((uint16_t*)(0x40006000 + offset));
 8000fb4:	8a7b      	ldrh	r3, [r7, #18]
 8000fb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fba:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000fbe:	60fb      	str	r3, [r7, #12]

		for (int i = 0; i < (num_bytes/2); i++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e00b      	b.n	8000fde <ReadEndpoint+0x5e>
		{
			read_buffer[i] = ((uint16_t*)location)[i];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	4413      	add	r3, r2
 8000fce:	8819      	ldrh	r1, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <ReadEndpoint+0x7c>)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < (num_bytes/2); i++)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	085b      	lsrs	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	dbec      	blt.n	8000fc6 <ReadEndpoint+0x46>
		}
	}
}
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40006004 	.word	0x40006004
 8000ffc:	20000274 	.word	0x20000274

08001000 <WriteEndpoint>:

//Reads single byte past data_buffer if num_bytes is odd. Shouldn't result in any issues...
void WriteEndpoint(uint8_t endpoint, uint16_t* data_buffer, uint8_t num_bytes)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
	//Get offset to endpoint n TX buffer
	uint16_t offset = *(uint16_t*)((endpoint*8) + 0x40006000);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001016:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	827b      	strh	r3, [r7, #18]

	//Point to TX buffer
	volatile uint16_t* location = ((uint16_t*)(0x40006000 + offset));
 8001020:	8a7b      	ldrh	r3, [r7, #18]
 8001022:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001026:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800102a:	60fb      	str	r3, [r7, #12]

	my_btable[endpoint].COUNT_TX = num_bytes;
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <WriteEndpoint+0xd0>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	79ba      	ldrb	r2, [r7, #6]
 8001038:	b292      	uxth	r2, r2
 800103a:	805a      	strh	r2, [r3, #2]

	if ((num_bytes%2) != 0)
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <WriteEndpoint+0x54>
		num_bytes = (num_bytes/2) + 1;
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	085b      	lsrs	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	3301      	adds	r3, #1
 8001050:	71bb      	strb	r3, [r7, #6]
 8001052:	e002      	b.n	800105a <WriteEndpoint+0x5a>
	else
		num_bytes = num_bytes/2;
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	085b      	lsrs	r3, r3, #1
 8001058:	71bb      	strb	r3, [r7, #6]

	for (int i = 0; i < num_bytes; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e00c      	b.n	800107a <WriteEndpoint+0x7a>
	{
		location[i] = data_buffer[i];
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	441a      	add	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	68f9      	ldr	r1, [r7, #12]
 800106e:	440b      	add	r3, r1
 8001070:	8812      	ldrh	r2, [r2, #0]
 8001072:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	429a      	cmp	r2, r3
 8001080:	dbee      	blt.n	8001060 <WriteEndpoint+0x60>
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	72fb      	strb	r3, [r7, #11]
 8001086:	2303      	movs	r3, #3
 8001088:	813b      	strh	r3, [r7, #8]
	}
}

__attribute__((always_inline)) inline static void SetTXResponse(uint8_t endpoint, uint16_t response)
{
	*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) = 0x8FBF & (*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) ^ (response << 4));
 800108a:	7afb      	ldrb	r3, [r7, #11]
 800108c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8001090:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	b21a      	sxth	r2, r3
 800109a:	893b      	ldrh	r3, [r7, #8]
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4053      	eors	r3, r2
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	7afb      	ldrb	r3, [r7, #11]
 80010a8:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80010ac:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f422 43e0 	bic.w	r3, r2, #28672	; 0x7000
 80010b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010bc:	b29b      	uxth	r3, r3
 80010be:	800b      	strh	r3, [r1, #0]
}
 80010c0:	bf00      	nop
}
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000270 	.word	0x20000270

080010d4 <EndpointTX>:
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	e883 0006 	stmia.w	r3, {r1, r2}
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
	if (endpoint_0_tx.tx_length == 0)
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <EndpointTX+0xa8>)
 80010e6:	88db      	ldrh	r3, [r3, #6]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10d      	bne.n	8001108 <EndpointTX+0x34>
		WriteEndpoint(endpoint, endpoint_0_tx.buffer, 0);
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <EndpointTX+0xa8>)
 80010ee:	6819      	ldr	r1, [r3, #0]
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	2200      	movs	r2, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff83 	bl	8001000 <WriteEndpoint>
		endpoint_0_tx.tx_finished = 1;
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <EndpointTX+0xa8>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	711a      	strb	r2, [r3, #4]
		endpoint_0_tx.tx_increments = 0;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <EndpointTX+0xa8>)
 8001102:	2200      	movs	r2, #0
 8001104:	715a      	strb	r2, [r3, #5]
}
 8001106:	e034      	b.n	8001172 <EndpointTX+0x9e>
	else if (endpoint_0_tx.tx_length >= 64)
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <EndpointTX+0xa8>)
 800110a:	88db      	ldrh	r3, [r3, #6]
 800110c:	2b3f      	cmp	r3, #63	; 0x3f
 800110e:	d91a      	bls.n	8001146 <EndpointTX+0x72>
		WriteEndpoint(endpoint, endpoint_0_tx.buffer + (endpoint_0_tx.tx_increments * 64), 64);
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <EndpointTX+0xa8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	; (800117c <EndpointTX+0xa8>)
 8001116:	7952      	ldrb	r2, [r2, #5]
 8001118:	0192      	lsls	r2, r2, #6
 800111a:	1899      	adds	r1, r3, r2
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2240      	movs	r2, #64	; 0x40
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff6d 	bl	8001000 <WriteEndpoint>
		endpoint_0_tx.tx_length -= 64;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <EndpointTX+0xa8>)
 8001128:	88db      	ldrh	r3, [r3, #6]
 800112a:	3b40      	subs	r3, #64	; 0x40
 800112c:	b29a      	uxth	r2, r3
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <EndpointTX+0xa8>)
 8001130:	80da      	strh	r2, [r3, #6]
		endpoint_0_tx.tx_finished = 0;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <EndpointTX+0xa8>)
 8001134:	2200      	movs	r2, #0
 8001136:	711a      	strb	r2, [r3, #4]
		endpoint_0_tx.tx_increments++;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <EndpointTX+0xa8>)
 800113a:	795b      	ldrb	r3, [r3, #5]
 800113c:	3301      	adds	r3, #1
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <EndpointTX+0xa8>)
 8001142:	715a      	strb	r2, [r3, #5]
}
 8001144:	e015      	b.n	8001172 <EndpointTX+0x9e>
		WriteEndpoint(endpoint, endpoint_0_tx.buffer + (endpoint_0_tx.tx_increments * 64), endpoint_0_tx.tx_length);
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <EndpointTX+0xa8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a0c      	ldr	r2, [pc, #48]	; (800117c <EndpointTX+0xa8>)
 800114c:	7952      	ldrb	r2, [r2, #5]
 800114e:	0192      	lsls	r2, r2, #6
 8001150:	1899      	adds	r1, r3, r2
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <EndpointTX+0xa8>)
 8001154:	88db      	ldrh	r3, [r3, #6]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff50 	bl	8001000 <WriteEndpoint>
		endpoint_0_tx.tx_length = 0;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <EndpointTX+0xa8>)
 8001162:	2200      	movs	r2, #0
 8001164:	80da      	strh	r2, [r3, #6]
		endpoint_0_tx.tx_finished = 1;
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <EndpointTX+0xa8>)
 8001168:	2201      	movs	r2, #1
 800116a:	711a      	strb	r2, [r3, #4]
		endpoint_0_tx.tx_increments = 0;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <EndpointTX+0xa8>)
 800116e:	2200      	movs	r2, #0
 8001170:	715a      	strb	r2, [r3, #5]
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200003c8 	.word	0x200003c8

08001180 <USB_HP_IRQHandler>:
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <USB_LP_IRQHandler>:
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	if (USBz->ISTR & USB_ISTR_CTR)
 8001194:	4b7f      	ldr	r3, [pc, #508]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800119c:	b29b      	uxth	r3, r3
 800119e:	b21b      	sxth	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	da01      	bge.n	80011a8 <USB_LP_IRQHandler+0x18>
		EndpointCallback();
 80011a4:	f000 f902 	bl	80013ac <EndpointCallback>
	if (USBz->ISTR & USB_ISTR_PMAOVR)
 80011a8:	4b7a      	ldr	r3, [pc, #488]	; (8001394 <USB_LP_IRQHandler+0x204>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <USB_LP_IRQHandler+0x3c>
		USBz->ISTR = ~USB_ISTR_PMAOVR;
 80011ba:	4b76      	ldr	r3, [pc, #472]	; (8001394 <USB_LP_IRQHandler+0x204>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80011c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		myprint("PMAOVR Interrupt\r\n");
 80011c6:	4874      	ldr	r0, [pc, #464]	; (8001398 <USB_LP_IRQHandler+0x208>)
 80011c8:	f7ff fce2 	bl	8000b90 <myprint>
	if (USBz->ISTR & USB_ISTR_ERR)
 80011cc:	4b71      	ldr	r3, [pc, #452]	; (8001394 <USB_LP_IRQHandler+0x204>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <USB_LP_IRQHandler+0x5a>
		USBz->ISTR = ~USB_ISTR_ERR;
 80011de:	4b6d      	ldr	r3, [pc, #436]	; (8001394 <USB_LP_IRQHandler+0x204>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 80011e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	if (USBz->ISTR & USB_ISTR_SUSP)
 80011ea:	4b6a      	ldr	r3, [pc, #424]	; (8001394 <USB_LP_IRQHandler+0x204>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d020      	beq.n	800123e <USB_LP_IRQHandler+0xae>
		USBz->CNTR |= USB_CNTR_FSUSP;
 80011fc:	4b65      	ldr	r3, [pc, #404]	; (8001394 <USB_LP_IRQHandler+0x204>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b63      	ldr	r3, [pc, #396]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0208 	orr.w	r2, r2, #8
 800120e:	b292      	uxth	r2, r2
 8001210:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		USBz->ISTR = ~USB_ISTR_SUSP;
 8001214:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 800121c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		USBz->CNTR |= USB_CNTR_LPMODE;
 8001220:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b5a      	ldr	r3, [pc, #360]	; (8001394 <USB_LP_IRQHandler+0x204>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0204 	orr.w	r2, r2, #4
 8001232:	b292      	uxth	r2, r2
 8001234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		myprint("SUSP Interrupt\r\n");
 8001238:	4858      	ldr	r0, [pc, #352]	; (800139c <USB_LP_IRQHandler+0x20c>)
 800123a:	f7ff fca9 	bl	8000b90 <myprint>
	if (USBz->ISTR & USB_ISTR_WKUP)
 800123e:	4b55      	ldr	r3, [pc, #340]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001246:	b29b      	uxth	r3, r3
 8001248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d029      	beq.n	80012a4 <USB_LP_IRQHandler+0x114>
		USBz->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001250:	4b50      	ldr	r3, [pc, #320]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b4e      	ldr	r3, [pc, #312]	; (8001394 <USB_LP_IRQHandler+0x204>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0204 	bic.w	r2, r2, #4
 8001262:	b292      	uxth	r2, r2
 8001264:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		USBz->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001268:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <USB_LP_IRQHandler+0x204>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b48      	ldr	r3, [pc, #288]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0208 	bic.w	r2, r2, #8
 800127a:	b292      	uxth	r2, r2
 800127c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		USBz->ISTR = ~USB_ISTR_WKUP;
 8001280:	4b44      	ldr	r3, [pc, #272]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8001288:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		USBz->CNTR |= USB_CNTR_RESETM | USB_CNTR_CTRM | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ESOFM | USB_CNTR_PMAOVRM | USB_CNTR_ERRM | USB_CNTR_SOFM;	//Enable these USB Interrupts
 800128c:	4b41      	ldr	r3, [pc, #260]	; (8001394 <USB_LP_IRQHandler+0x204>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800129e:	b292      	uxth	r2, r2
 80012a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	if (USBz->ISTR & USB_ISTR_RESET)
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <USB_LP_IRQHandler+0x204>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d04e      	beq.n	8001354 <USB_LP_IRQHandler+0x1c4>
		USBz->ISTR = ~USB_ISTR_RESET;
 80012b6:	4b37      	ldr	r3, [pc, #220]	; (8001394 <USB_LP_IRQHandler+0x204>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80012be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		USBz->BTABLE = 0;
 80012c2:	4b34      	ldr	r3, [pc, #208]	; (8001394 <USB_LP_IRQHandler+0x204>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		USBz->EP0R = USB_EP_CONTROL | (2 << 4) | (3 << 12);
 80012cc:	4b31      	ldr	r3, [pc, #196]	; (8001394 <USB_LP_IRQHandler+0x204>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f243 2220 	movw	r2, #12832	; 0x3220
 80012d4:	801a      	strh	r2, [r3, #0]
		USBz->EP1R = USB_EP_INTERRUPT | (3 << 4) | (3 << 12) | USB_EP_DTOG_RX | USB_EP_DTOG_TX | 0x1;
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <USB_LP_IRQHandler+0x204>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f247 6271 	movw	r2, #30321	; 0x7671
 80012de:	809a      	strh	r2, [r3, #4]
		my_btable[0].ADDR_TX = (uint16_t)0x20;
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <USB_LP_IRQHandler+0x210>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2220      	movs	r2, #32
 80012e6:	801a      	strh	r2, [r3, #0]
		my_btable[0].COUNT_TX = (uint16_t)0;
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <USB_LP_IRQHandler+0x210>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	805a      	strh	r2, [r3, #2]
		my_btable[0].ADDR_RX = (uint16_t)0x60;
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <USB_LP_IRQHandler+0x210>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2260      	movs	r2, #96	; 0x60
 80012f6:	809a      	strh	r2, [r3, #4]
		my_btable[0].COUNT_RX = (uint16_t)0x8400;
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <USB_LP_IRQHandler+0x210>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 8001300:	80da      	strh	r2, [r3, #6]
		my_btable[1].ADDR_TX = (uint16_t)0xA0;
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <USB_LP_IRQHandler+0x210>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3308      	adds	r3, #8
 8001308:	22a0      	movs	r2, #160	; 0xa0
 800130a:	801a      	strh	r2, [r3, #0]
		my_btable[1].COUNT_TX = (uint16_t)0;
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <USB_LP_IRQHandler+0x210>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3308      	adds	r3, #8
 8001312:	2200      	movs	r2, #0
 8001314:	805a      	strh	r2, [r3, #2]
		my_btable[1].ADDR_RX = (uint16_t)0xE0;
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <USB_LP_IRQHandler+0x210>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3308      	adds	r3, #8
 800131c:	22e0      	movs	r2, #224	; 0xe0
 800131e:	809a      	strh	r2, [r3, #4]
		my_btable[1].COUNT_RX = (uint16_t)0x8400;
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <USB_LP_IRQHandler+0x210>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3308      	adds	r3, #8
 8001326:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 800132a:	80da      	strh	r2, [r3, #6]
		USBz->CNTR |= USB_CNTR_RESETM | USB_CNTR_CTRM | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ESOFM;
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <USB_LP_IRQHandler+0x204>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001334:	b299      	uxth	r1, r3
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <USB_LP_IRQHandler+0x214>)
 800133c:	430b      	orrs	r3, r1
 800133e:	b29b      	uxth	r3, r3
 8001340:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		USBz->DADDR = USB_DADDR_EF;
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		myprint("Reset Interrupt\r\n");
 800134e:	4816      	ldr	r0, [pc, #88]	; (80013a8 <USB_LP_IRQHandler+0x218>)
 8001350:	f7ff fc1e 	bl	8000b90 <myprint>
	if (USBz->ISTR & USB_ISTR_SOF)
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800135c:	b29b      	uxth	r3, r3
 800135e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <USB_LP_IRQHandler+0x1e2>
		USBz->ISTR = ~USB_ISTR_SOF;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800136e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	if (USBz->ISTR & USB_ISTR_ESOF)
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800137a:	b29b      	uxth	r3, r3
 800137c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <USB_LP_IRQHandler+0x200>
		USBz->ISTR = ~USB_ISTR_ESOF;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <USB_LP_IRQHandler+0x204>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800138c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000026c 	.word	0x2000026c
 8001398:	08005f58 	.word	0x08005f58
 800139c:	08005f6c 	.word	0x08005f6c
 80013a0:	20000270 	.word	0x20000270
 80013a4:	ffff9d00 	.word	0xffff9d00
 80013a8:	08005f80 	.word	0x08005f80

080013ac <EndpointCallback>:
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
	while (USBz->ISTR & USB_ISTR_CTR)
 80013b2:	e114      	b.n	80015de <EndpointCallback+0x232>
		uint16_t ep = USBz->ISTR & USB_ISTR_EP_ID;
 80013b4:	4b91      	ldr	r3, [pc, #580]	; (80015fc <EndpointCallback+0x250>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	82fb      	strh	r3, [r7, #22]
		uint16_t dir = USBz->ISTR & USB_ISTR_DIR;
 80013c4:	4b8d      	ldr	r3, [pc, #564]	; (80015fc <EndpointCallback+0x250>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	82bb      	strh	r3, [r7, #20]
		switch(ep)
 80013d4:	8afb      	ldrh	r3, [r7, #22]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <EndpointCallback+0x36>
 80013da:	2b01      	cmp	r3, #1
 80013dc:	f000 80a7 	beq.w	800152e <EndpointCallback+0x182>
 80013e0:	e0fd      	b.n	80015de <EndpointCallback+0x232>
			if (!dir) //IN
 80013e2:	8abb      	ldrh	r3, [r7, #20]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d127      	bne.n	8001438 <EndpointCallback+0x8c>
				if ((address > 0))
 80013e8:	4b85      	ldr	r3, [pc, #532]	; (8001600 <EndpointCallback+0x254>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00c      	beq.n	800140a <EndpointCallback+0x5e>
					USBz->DADDR = address | (1 << 7);	//Set address and enable
 80013f0:	4b83      	ldr	r3, [pc, #524]	; (8001600 <EndpointCallback+0x254>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b80      	ldr	r3, [pc, #512]	; (80015fc <EndpointCallback+0x250>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b292      	uxth	r2, r2
 8001400:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					address = 0;
 8001404:	4b7e      	ldr	r3, [pc, #504]	; (8001600 <EndpointCallback+0x254>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
				if (endpoint_0_tx.tx_finished != 1)
 800140a:	4b7e      	ldr	r3, [pc, #504]	; (8001604 <EndpointCallback+0x258>)
 800140c:	791b      	ldrb	r3, [r3, #4]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d005      	beq.n	800141e <EndpointCallback+0x72>
					EndpointTX(0, endpoint_0_tx);
 8001412:	4b7c      	ldr	r3, [pc, #496]	; (8001604 <EndpointCallback+0x258>)
 8001414:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fe5b 	bl	80010d4 <EndpointTX>
				USBz->EP0R = ((~USB_EP_CTR_TX) & USBz->EP0R) & 0x8F8F;
 800141e:	4b77      	ldr	r3, [pc, #476]	; (80015fc <EndpointCallback+0x250>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4a75      	ldr	r2, [pc, #468]	; (80015fc <EndpointCallback+0x250>)
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800142e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001432:	b29b      	uxth	r3, r3
 8001434:	8013      	strh	r3, [r2, #0]
 8001436:	e0d2      	b.n	80015de <EndpointCallback+0x232>
				if (USBz->EP0R & USB_EP_SETUP)	//SETUP
 8001438:	4b70      	ldr	r3, [pc, #448]	; (80015fc <EndpointCallback+0x250>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001444:	2b00      	cmp	r3, #0
 8001446:	d039      	beq.n	80014bc <EndpointCallback+0x110>
					uint8_t num_bytes = my_btable[0].COUNT_RX;
 8001448:	4b6f      	ldr	r3, [pc, #444]	; (8001608 <EndpointCallback+0x25c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	88db      	ldrh	r3, [r3, #6]
 800144e:	b29b      	uxth	r3, r3
 8001450:	743b      	strb	r3, [r7, #16]
					if (num_bytes > 0)
 8001452:	7c3b      	ldrb	r3, [r7, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d004      	beq.n	8001462 <EndpointCallback+0xb6>
						ReadEndpoint(0, num_bytes);
 8001458:	7c3b      	ldrb	r3, [r7, #16]
 800145a:	4619      	mov	r1, r3
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff fd8f 	bl	8000f80 <ReadEndpoint>
					USBz->EP0R = ((~USB_EP_CTR_RX) & USBz->EP0R) & 0x8F8F;
 8001462:	4b66      	ldr	r3, [pc, #408]	; (80015fc <EndpointCallback+0x250>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	b299      	uxth	r1, r3
 800146a:	4b64      	ldr	r3, [pc, #400]	; (80015fc <EndpointCallback+0x250>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001472:	400b      	ands	r3, r1
 8001474:	b29b      	uxth	r3, r3
 8001476:	8013      	strh	r3, [r2, #0]
					SetupCallback();
 8001478:	f000 f8d2 	bl	8001620 <SetupCallback>
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	2303      	movs	r3, #3
 8001482:	81bb      	strh	r3, [r7, #12]


__attribute__((always_inline)) inline static void SetRXResponse(uint8_t endpoint, uint16_t response)
{
	*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) = 0xBF8F & (*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) ^ (response << 12));
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800148a:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	b21a      	sxth	r2, r3
 8001494:	89bb      	ldrh	r3, [r7, #12]
 8001496:	031b      	lsls	r3, r3, #12
 8001498:	b21b      	sxth	r3, r3
 800149a:	4053      	eors	r3, r2
 800149c:	b21b      	sxth	r3, r3
 800149e:	b29a      	uxth	r2, r3
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80014a6:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 80014b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	800b      	strh	r3, [r1, #0]
}
 80014ba:	e037      	b.n	800152c <EndpointCallback+0x180>
				else if (USBz->EP0R & USB_EP_CTR_RX) //OUT
 80014bc:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <EndpointCallback+0x250>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f280 8089 	bge.w	80015de <EndpointCallback+0x232>
					USBz->EP0R = ((~USB_EP_CTR_RX) & USBz->EP0R) & 0x8F8F;
 80014cc:	4b4b      	ldr	r3, [pc, #300]	; (80015fc <EndpointCallback+0x250>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	b299      	uxth	r1, r3
 80014d4:	4b49      	ldr	r3, [pc, #292]	; (80015fc <EndpointCallback+0x250>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014dc:	400b      	ands	r3, r1
 80014de:	b29b      	uxth	r3, r3
 80014e0:	8013      	strh	r3, [r2, #0]
					uint8_t num_bytes = my_btable[0].COUNT_RX;
 80014e2:	4b49      	ldr	r3, [pc, #292]	; (8001608 <EndpointCallback+0x25c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	88db      	ldrh	r3, [r3, #6]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	747b      	strb	r3, [r7, #17]
 80014ec:	2300      	movs	r3, #0
 80014ee:	72fb      	strb	r3, [r7, #11]
 80014f0:	2303      	movs	r3, #3
 80014f2:	813b      	strh	r3, [r7, #8]
	*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) = 0xBF8F & (*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) ^ (response << 12));
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80014fa:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	b21a      	sxth	r2, r3
 8001504:	893b      	ldrh	r3, [r7, #8]
 8001506:	031b      	lsls	r3, r3, #12
 8001508:	b21b      	sxth	r3, r3
 800150a:	4053      	eors	r3, r2
 800150c:	b21b      	sxth	r3, r3
 800150e:	b29a      	uxth	r2, r3
 8001510:	7afb      	ldrb	r3, [r7, #11]
 8001512:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8001516:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4619      	mov	r1, r3
 800151e:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 8001522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001526:	b29b      	uxth	r3, r3
 8001528:	800b      	strh	r3, [r1, #0]
}
 800152a:	bf00      	nop
		break;
 800152c:	e057      	b.n	80015de <EndpointCallback+0x232>
			if (dir) //OUT/SETUP
 800152e:	8abb      	ldrh	r3, [r7, #20]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d042      	beq.n	80015ba <EndpointCallback+0x20e>
				uint8_t num_bytes = my_btable[1].COUNT_RX;
 8001534:	4b34      	ldr	r3, [pc, #208]	; (8001608 <EndpointCallback+0x25c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3308      	adds	r3, #8
 800153a:	88db      	ldrh	r3, [r3, #6]
 800153c:	b29b      	uxth	r3, r3
 800153e:	74fb      	strb	r3, [r7, #19]
				if (num_bytes > 0)
 8001540:	7cfb      	ldrb	r3, [r7, #19]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d012      	beq.n	800156c <EndpointCallback+0x1c0>
					ReadEndpoint(1, num_bytes);
 8001546:	7cfb      	ldrb	r3, [r7, #19]
 8001548:	4619      	mov	r1, r3
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff fd18 	bl	8000f80 <ReadEndpoint>
					myprint("Report ID: ");
 8001550:	482e      	ldr	r0, [pc, #184]	; (800160c <EndpointCallback+0x260>)
 8001552:	f7ff fb1d 	bl	8000b90 <myprint>
					uint8_t report_id = read_buffer[0];
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <EndpointCallback+0x264>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	74bb      	strb	r3, [r7, #18]
					myprint_dec(report_id);
 800155e:	7cbb      	ldrb	r3, [r7, #18]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fb77 	bl	8000c54 <myprint_dec>
					myprint("\r\n");
 8001566:	482b      	ldr	r0, [pc, #172]	; (8001614 <EndpointCallback+0x268>)
 8001568:	f7ff fb12 	bl	8000b90 <myprint>
				myprint("EP1 OUT!\r\n");
 800156c:	482a      	ldr	r0, [pc, #168]	; (8001618 <EndpointCallback+0x26c>)
 800156e:	f7ff fb0f 	bl	8000b90 <myprint>
				myprint_dec(num_bytes);
 8001572:	7cfb      	ldrb	r3, [r7, #19]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fb6d 	bl	8000c54 <myprint_dec>
 800157a:	2301      	movs	r3, #1
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	2303      	movs	r3, #3
 8001580:	80bb      	strh	r3, [r7, #4]
	*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) = 0xBF8F & (*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) ^ (response << 12));
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8001588:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	b21a      	sxth	r2, r3
 8001592:	88bb      	ldrh	r3, [r7, #4]
 8001594:	031b      	lsls	r3, r3, #12
 8001596:	b21b      	sxth	r3, r3
 8001598:	4053      	eors	r3, r2
 800159a:	b21b      	sxth	r3, r3
 800159c:	b29a      	uxth	r2, r3
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80015a4:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 80015b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	800b      	strh	r3, [r1, #0]
}
 80015b8:	e010      	b.n	80015dc <EndpointCallback+0x230>
				WriteEndpoint(1, report.data, 14);
 80015ba:	220e      	movs	r2, #14
 80015bc:	4917      	ldr	r1, [pc, #92]	; (800161c <EndpointCallback+0x270>)
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fd1e 	bl	8001000 <WriteEndpoint>
				USBz->EP1R = ((~USB_EP_CTR_TX) & USBz->EP1R) & 0x8F8F;
 80015c4:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <EndpointCallback+0x250>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	889b      	ldrh	r3, [r3, #4]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <EndpointCallback+0x250>)
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015d8:	b29b      	uxth	r3, r3
 80015da:	8093      	strh	r3, [r2, #4]
		break;
 80015dc:	bf00      	nop
	while (USBz->ISTR & USB_ISTR_CTR)
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <EndpointCallback+0x250>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f6ff aee2 	blt.w	80013b4 <EndpointCallback+0x8>
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000026c 	.word	0x2000026c
 8001600:	200003b4 	.word	0x200003b4
 8001604:	200003c8 	.word	0x200003c8
 8001608:	20000270 	.word	0x20000270
 800160c:	08005f94 	.word	0x08005f94
 8001610:	20000274 	.word	0x20000274
 8001614:	08005fa0 	.word	0x08005fa0
 8001618:	08005fa4 	.word	0x08005fa4
 800161c:	200003b8 	.word	0x200003b8

08001620 <SetupCallback>:
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
	uint8_t bmRequestType = ((uint8_t*)read_buffer)[0];
 8001626:	4ba5      	ldr	r3, [pc, #660]	; (80018bc <SetupCallback+0x29c>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	74fb      	strb	r3, [r7, #19]
	uint8_t bRequest = ((uint8_t*)read_buffer)[1];
 800162c:	4ba3      	ldr	r3, [pc, #652]	; (80018bc <SetupCallback+0x29c>)
 800162e:	785b      	ldrb	r3, [r3, #1]
 8001630:	74bb      	strb	r3, [r7, #18]
	uint16_t wValue = read_buffer[1];
 8001632:	4ba2      	ldr	r3, [pc, #648]	; (80018bc <SetupCallback+0x29c>)
 8001634:	885b      	ldrh	r3, [r3, #2]
 8001636:	823b      	strh	r3, [r7, #16]
	uint16_t wIndex = read_buffer[2];
 8001638:	4ba0      	ldr	r3, [pc, #640]	; (80018bc <SetupCallback+0x29c>)
 800163a:	889b      	ldrh	r3, [r3, #4]
 800163c:	81fb      	strh	r3, [r7, #14]
	uint16_t wLength = read_buffer[3];
 800163e:	4b9f      	ldr	r3, [pc, #636]	; (80018bc <SetupCallback+0x29c>)
 8001640:	88db      	ldrh	r3, [r3, #6]
 8001642:	81bb      	strh	r3, [r7, #12]
	uint8_t wValueHigh = wValue >> 8;
 8001644:	8a3b      	ldrh	r3, [r7, #16]
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	b29b      	uxth	r3, r3
 800164a:	72fb      	strb	r3, [r7, #11]
	uint8_t wValueLow = wValue & 0xFF;
 800164c:	8a3b      	ldrh	r3, [r7, #16]
 800164e:	72bb      	strb	r3, [r7, #10]
	USBRequestDirection direction 	= (bmRequestType & 0x80) ? REQUEST_D2H : REQUEST_H2D;
 8001650:	7cfb      	ldrb	r3, [r7, #19]
 8001652:	09db      	lsrs	r3, r3, #7
 8001654:	727b      	strb	r3, [r7, #9]
	USBRequestType type 			= (bmRequestType & 0x60) >> 5;
 8001656:	7cfb      	ldrb	r3, [r7, #19]
 8001658:	115b      	asrs	r3, r3, #5
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	723b      	strb	r3, [r7, #8]
	USBRequestRecipient recipient 	= bmRequestType & 0x1F;
 8001662:	7cfb      	ldrb	r3, [r7, #19]
 8001664:	f003 031f 	and.w	r3, r3, #31
 8001668:	71fb      	strb	r3, [r7, #7]
	if (type == 0)
 800166a:	7a3b      	ldrb	r3, [r7, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	f040 8183 	bne.w	8001978 <SetupCallback+0x358>
		switch(bRequest)
 8001672:	7cbb      	ldrb	r3, [r7, #18]
 8001674:	2b12      	cmp	r3, #18
 8001676:	f200 817b 	bhi.w	8001970 <SetupCallback+0x350>
 800167a:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <SetupCallback+0x60>)
 800167c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001680:	080016cd 	.word	0x080016cd
 8001684:	080016d5 	.word	0x080016d5
 8001688:	08001971 	.word	0x08001971
 800168c:	080016f5 	.word	0x080016f5
 8001690:	08001971 	.word	0x08001971
 8001694:	080016fd 	.word	0x080016fd
 8001698:	0800173d 	.word	0x0800173d
 800169c:	08001929 	.word	0x08001929
 80016a0:	08001931 	.word	0x08001931
 80016a4:	08001939 	.word	0x08001939
 80016a8:	08001959 	.word	0x08001959
 80016ac:	08001971 	.word	0x08001971
 80016b0:	08001971 	.word	0x08001971
 80016b4:	08001971 	.word	0x08001971
 80016b8:	08001971 	.word	0x08001971
 80016bc:	08001971 	.word	0x08001971
 80016c0:	08001971 	.word	0x08001971
 80016c4:	08001961 	.word	0x08001961
 80016c8:	08001969 	.word	0x08001969
			myprint("\t\tGET_STATUS\r\n");
 80016cc:	487c      	ldr	r0, [pc, #496]	; (80018c0 <SetupCallback+0x2a0>)
 80016ce:	f7ff fa5f 	bl	8000b90 <myprint>
			break;
 80016d2:	e209      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tCLEAR_FEATURE\r\n");
 80016d4:	487b      	ldr	r0, [pc, #492]	; (80018c4 <SetupCallback+0x2a4>)
 80016d6:	f7ff fa5b 	bl	8000b90 <myprint>
			endpoint_0_tx.buffer = configuration_buffer;
 80016da:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <SetupCallback+0x2a8>)
 80016dc:	4a7b      	ldr	r2, [pc, #492]	; (80018cc <SetupCallback+0x2ac>)
 80016de:	601a      	str	r2, [r3, #0]
			endpoint_0_tx.tx_length = 0;
 80016e0:	4b79      	ldr	r3, [pc, #484]	; (80018c8 <SetupCallback+0x2a8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	80da      	strh	r2, [r3, #6]
			EndpointTX(0, endpoint_0_tx);
 80016e6:	4b78      	ldr	r3, [pc, #480]	; (80018c8 <SetupCallback+0x2a8>)
 80016e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fcf1 	bl	80010d4 <EndpointTX>
			break;
 80016f2:	e1f9      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tSET_FEATURE\r\n");
 80016f4:	4876      	ldr	r0, [pc, #472]	; (80018d0 <SetupCallback+0x2b0>)
 80016f6:	f7ff fa4b 	bl	8000b90 <myprint>
			break;
 80016fa:	e1f5      	b.n	8001ae8 <SetupCallback+0x4c8>
			address = wValue & 0x7F;
 80016fc:	8a3b      	ldrh	r3, [r7, #16]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b73      	ldr	r3, [pc, #460]	; (80018d4 <SetupCallback+0x2b4>)
 8001708:	701a      	strb	r2, [r3, #0]
			my_btable[0].COUNT_TX = 0;
 800170a:	4b73      	ldr	r3, [pc, #460]	; (80018d8 <SetupCallback+0x2b8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2200      	movs	r2, #0
 8001710:	805a      	strh	r2, [r3, #2]
			USBz->EP0R = (1 << 4) | (USBz->EP0R & 0x8F9F);
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <SetupCallback+0x2bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	b29b      	uxth	r3, r3
 800171a:	b21b      	sxth	r3, r3
 800171c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001724:	b21b      	sxth	r3, r3
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	b21a      	sxth	r2, r3
 800172c:	4b6b      	ldr	r3, [pc, #428]	; (80018dc <SetupCallback+0x2bc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b292      	uxth	r2, r2
 8001732:	801a      	strh	r2, [r3, #0]
			myprint("\t\tSET_ADDRESS\r\n");
 8001734:	486a      	ldr	r0, [pc, #424]	; (80018e0 <SetupCallback+0x2c0>)
 8001736:	f7ff fa2b 	bl	8000b90 <myprint>
			break;
 800173a:	e1d5      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tGET_DESCRIPTOR\r\n");
 800173c:	4869      	ldr	r0, [pc, #420]	; (80018e4 <SetupCallback+0x2c4>)
 800173e:	f7ff fa27 	bl	8000b90 <myprint>
			descriptor_type = (wValue >> 8) & 0xFF;
 8001742:	8a3b      	ldrh	r3, [r7, #16]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	b29b      	uxth	r3, r3
 8001748:	71bb      	strb	r3, [r7, #6]
			switch(descriptor_type)
 800174a:	79bb      	ldrb	r3, [r7, #6]
 800174c:	2b22      	cmp	r3, #34	; 0x22
 800174e:	f000 809f 	beq.w	8001890 <SetupCallback+0x270>
 8001752:	2b22      	cmp	r3, #34	; 0x22
 8001754:	f300 80dc 	bgt.w	8001910 <SetupCallback+0x2f0>
 8001758:	2b01      	cmp	r3, #1
 800175a:	d002      	beq.n	8001762 <SetupCallback+0x142>
 800175c:	2b02      	cmp	r3, #2
 800175e:	d012      	beq.n	8001786 <SetupCallback+0x166>
 8001760:	e0d6      	b.n	8001910 <SetupCallback+0x2f0>
				myprint("\t\t\tDevice\r\n");
 8001762:	4861      	ldr	r0, [pc, #388]	; (80018e8 <SetupCallback+0x2c8>)
 8001764:	f7ff fa14 	bl	8000b90 <myprint>
				endpoint_0_tx.buffer = device.data;
 8001768:	4b57      	ldr	r3, [pc, #348]	; (80018c8 <SetupCallback+0x2a8>)
 800176a:	4a60      	ldr	r2, [pc, #384]	; (80018ec <SetupCallback+0x2cc>)
 800176c:	601a      	str	r2, [r3, #0]
				endpoint_0_tx.tx_length = device.descriptor.bLength;
 800176e:	4b5f      	ldr	r3, [pc, #380]	; (80018ec <SetupCallback+0x2cc>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b54      	ldr	r3, [pc, #336]	; (80018c8 <SetupCallback+0x2a8>)
 8001776:	80da      	strh	r2, [r3, #6]
				EndpointTX(0, endpoint_0_tx);
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <SetupCallback+0x2a8>)
 800177a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fca8 	bl	80010d4 <EndpointTX>
				break;
 8001784:	e0cf      	b.n	8001926 <SetupCallback+0x306>
				myprint("\t\t\tConfiguration\r\n");
 8001786:	485a      	ldr	r0, [pc, #360]	; (80018f0 <SetupCallback+0x2d0>)
 8001788:	f7ff fa02 	bl	8000b90 <myprint>
				if (wLength == 9)
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	2b09      	cmp	r3, #9
 8001790:	d10e      	bne.n	80017b0 <SetupCallback+0x190>
					endpoint_0_tx.buffer = configuration.data;
 8001792:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <SetupCallback+0x2a8>)
 8001794:	4a57      	ldr	r2, [pc, #348]	; (80018f4 <SetupCallback+0x2d4>)
 8001796:	601a      	str	r2, [r3, #0]
					endpoint_0_tx.tx_length = configuration.descriptor.bLength;
 8001798:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <SetupCallback+0x2d4>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <SetupCallback+0x2a8>)
 80017a0:	80da      	strh	r2, [r3, #6]
					EndpointTX(0, endpoint_0_tx);
 80017a2:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <SetupCallback+0x2a8>)
 80017a4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff fc93 	bl	80010d4 <EndpointTX>
				break;
 80017ae:	e0ba      	b.n	8001926 <SetupCallback+0x306>
					int configuration_buffer_index = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
					for (int i = 0; i < configuration.descriptor.bLength; i++, configuration_buffer_index++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
 80017b8:	e00e      	b.n	80017d8 <SetupCallback+0x1b8>
						configuration_buffer[configuration_buffer_index] = configuration.data[i];
 80017ba:	4a4e      	ldr	r2, [pc, #312]	; (80018f4 <SetupCallback+0x2d4>)
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	4413      	add	r3, r2
 80017c0:	7819      	ldrb	r1, [r3, #0]
 80017c2:	4a42      	ldr	r2, [pc, #264]	; (80018cc <SetupCallback+0x2ac>)
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	4413      	add	r3, r2
 80017c8:	460a      	mov	r2, r1
 80017ca:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < configuration.descriptor.bLength; i++, configuration_buffer_index++)
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	3301      	adds	r3, #1
 80017d0:	623b      	str	r3, [r7, #32]
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	3301      	adds	r3, #1
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
 80017d8:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <SetupCallback+0x2d4>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	4293      	cmp	r3, r2
 80017e2:	dbea      	blt.n	80017ba <SetupCallback+0x19a>
					for (int i = 0; i < interface.descriptor.bLength; i++, configuration_buffer_index++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	e00e      	b.n	8001808 <SetupCallback+0x1e8>
						configuration_buffer[configuration_buffer_index] = interface.data[i];
 80017ea:	4a43      	ldr	r2, [pc, #268]	; (80018f8 <SetupCallback+0x2d8>)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	4413      	add	r3, r2
 80017f0:	7819      	ldrb	r1, [r3, #0]
 80017f2:	4a36      	ldr	r2, [pc, #216]	; (80018cc <SetupCallback+0x2ac>)
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	4413      	add	r3, r2
 80017f8:	460a      	mov	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < interface.descriptor.bLength; i++, configuration_buffer_index++)
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	3301      	adds	r3, #1
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	3301      	adds	r3, #1
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
 8001808:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <SetupCallback+0x2d8>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4293      	cmp	r3, r2
 8001812:	dbea      	blt.n	80017ea <SetupCallback+0x1ca>
					for (int i = 0; i < endpoint.descriptor.bLength; i++, configuration_buffer_index++)
 8001814:	2300      	movs	r3, #0
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	e00e      	b.n	8001838 <SetupCallback+0x218>
						configuration_buffer[configuration_buffer_index] = endpoint.data[i];
 800181a:	4a38      	ldr	r2, [pc, #224]	; (80018fc <SetupCallback+0x2dc>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	4413      	add	r3, r2
 8001820:	7819      	ldrb	r1, [r3, #0]
 8001822:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <SetupCallback+0x2ac>)
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	4413      	add	r3, r2
 8001828:	460a      	mov	r2, r1
 800182a:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < endpoint.descriptor.bLength; i++, configuration_buffer_index++)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	3301      	adds	r3, #1
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	3301      	adds	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
 8001838:	4b30      	ldr	r3, [pc, #192]	; (80018fc <SetupCallback+0x2dc>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4293      	cmp	r3, r2
 8001842:	dbea      	blt.n	800181a <SetupCallback+0x1fa>
					for (int i = 0; i < hid.descriptor.bLength; i++, configuration_buffer_index++)
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e00e      	b.n	8001868 <SetupCallback+0x248>
						configuration_buffer[configuration_buffer_index] = hid.data[i];
 800184a:	4a2d      	ldr	r2, [pc, #180]	; (8001900 <SetupCallback+0x2e0>)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	4413      	add	r3, r2
 8001850:	7819      	ldrb	r1, [r3, #0]
 8001852:	4a1e      	ldr	r2, [pc, #120]	; (80018cc <SetupCallback+0x2ac>)
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	4413      	add	r3, r2
 8001858:	460a      	mov	r2, r1
 800185a:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < hid.descriptor.bLength; i++, configuration_buffer_index++)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	3301      	adds	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <SetupCallback+0x2e0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	4293      	cmp	r3, r2
 8001872:	dbea      	blt.n	800184a <SetupCallback+0x22a>
					endpoint_0_tx.buffer = configuration_buffer;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <SetupCallback+0x2a8>)
 8001876:	4a15      	ldr	r2, [pc, #84]	; (80018cc <SetupCallback+0x2ac>)
 8001878:	601a      	str	r2, [r3, #0]
					endpoint_0_tx.tx_length = configuration_buffer_index;
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <SetupCallback+0x2a8>)
 8001880:	80da      	strh	r2, [r3, #6]
					EndpointTX(0, endpoint_0_tx);
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <SetupCallback+0x2a8>)
 8001884:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fc23 	bl	80010d4 <EndpointTX>
				break;
 800188e:	e04a      	b.n	8001926 <SetupCallback+0x306>
				myprint("\t\t\tHID Report\r\n");
 8001890:	481c      	ldr	r0, [pc, #112]	; (8001904 <SetupCallback+0x2e4>)
 8001892:	f7ff f97d 	bl	8000b90 <myprint>
				endpoint_0_tx.buffer = ReportDescriptor;
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <SetupCallback+0x2a8>)
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <SetupCallback+0x2e8>)
 800189a:	601a      	str	r2, [r3, #0]
				endpoint_0_tx.tx_length = hid.descriptor.wDescriptorLength;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <SetupCallback+0x2e0>)
 800189e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <SetupCallback+0x2a8>)
 80018a6:	80da      	strh	r2, [r3, #6]
				EndpointTX(0, endpoint_0_tx);
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <SetupCallback+0x2a8>)
 80018aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7ff fc10 	bl	80010d4 <EndpointTX>
				test_flag = 1;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <SetupCallback+0x2ec>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
				break;
 80018ba:	e034      	b.n	8001926 <SetupCallback+0x306>
 80018bc:	20000274 	.word	0x20000274
 80018c0:	08005fb0 	.word	0x08005fb0
 80018c4:	08005fc0 	.word	0x08005fc0
 80018c8:	200003c8 	.word	0x200003c8
 80018cc:	200002b4 	.word	0x200002b4
 80018d0:	08005fd4 	.word	0x08005fd4
 80018d4:	200003b4 	.word	0x200003b4
 80018d8:	20000270 	.word	0x20000270
 80018dc:	2000026c 	.word	0x2000026c
 80018e0:	08005fe4 	.word	0x08005fe4
 80018e4:	08005ff4 	.word	0x08005ff4
 80018e8:	08006008 	.word	0x08006008
 80018ec:	2000022c 	.word	0x2000022c
 80018f0:	08006014 	.word	0x08006014
 80018f4:	20000240 	.word	0x20000240
 80018f8:	2000024c 	.word	0x2000024c
 80018fc:	20000258 	.word	0x20000258
 8001900:	20000260 	.word	0x20000260
 8001904:	08006028 	.word	0x08006028
 8001908:	08006210 	.word	0x08006210
 800190c:	200003c6 	.word	0x200003c6
				myprint("\t\t\tDefault: ");
 8001910:	4877      	ldr	r0, [pc, #476]	; (8001af0 <SetupCallback+0x4d0>)
 8001912:	f7ff f93d 	bl	8000b90 <myprint>
				myprint_hex(descriptor_type);
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff f96d 	bl	8000bf8 <myprint_hex>
				myprint("\r\n");
 800191e:	4875      	ldr	r0, [pc, #468]	; (8001af4 <SetupCallback+0x4d4>)
 8001920:	f7ff f936 	bl	8000b90 <myprint>
				break;
 8001924:	bf00      	nop
			break;
 8001926:	e0df      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tSET_DESCRIPTOR\r\n");
 8001928:	4873      	ldr	r0, [pc, #460]	; (8001af8 <SetupCallback+0x4d8>)
 800192a:	f7ff f931 	bl	8000b90 <myprint>
			break;
 800192e:	e0db      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tGET_CONFIGURATION\r\n");
 8001930:	4872      	ldr	r0, [pc, #456]	; (8001afc <SetupCallback+0x4dc>)
 8001932:	f7ff f92d 	bl	8000b90 <myprint>
			break;
 8001936:	e0d7      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tSET_CONFIGURATION\r\n");
 8001938:	4871      	ldr	r0, [pc, #452]	; (8001b00 <SetupCallback+0x4e0>)
 800193a:	f7ff f929 	bl	8000b90 <myprint>
			endpoint_0_tx.buffer = configuration_buffer;
 800193e:	4b71      	ldr	r3, [pc, #452]	; (8001b04 <SetupCallback+0x4e4>)
 8001940:	4a71      	ldr	r2, [pc, #452]	; (8001b08 <SetupCallback+0x4e8>)
 8001942:	601a      	str	r2, [r3, #0]
			endpoint_0_tx.tx_length = 0;
 8001944:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <SetupCallback+0x4e4>)
 8001946:	2200      	movs	r2, #0
 8001948:	80da      	strh	r2, [r3, #6]
			EndpointTX(0, endpoint_0_tx);
 800194a:	4b6e      	ldr	r3, [pc, #440]	; (8001b04 <SetupCallback+0x4e4>)
 800194c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff fbbf 	bl	80010d4 <EndpointTX>
			break;
 8001956:	e0c7      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tGET_INTERFACE\r\n");
 8001958:	486c      	ldr	r0, [pc, #432]	; (8001b0c <SetupCallback+0x4ec>)
 800195a:	f7ff f919 	bl	8000b90 <myprint>
			break;
 800195e:	e0c3      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tSET_INTERFACE\r\n");
 8001960:	486b      	ldr	r0, [pc, #428]	; (8001b10 <SetupCallback+0x4f0>)
 8001962:	f7ff f915 	bl	8000b90 <myprint>
			break;
 8001966:	e0bf      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tSYNCH_FRAME\r\n");
 8001968:	486a      	ldr	r0, [pc, #424]	; (8001b14 <SetupCallback+0x4f4>)
 800196a:	f7ff f911 	bl	8000b90 <myprint>
			break;
 800196e:	e0bb      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tWE SHOULDN'T BE HERE IN THE SETUP\r\n");
 8001970:	4869      	ldr	r0, [pc, #420]	; (8001b18 <SetupCallback+0x4f8>)
 8001972:	f7ff f90d 	bl	8000b90 <myprint>
			break;
 8001976:	e0b7      	b.n	8001ae8 <SetupCallback+0x4c8>
	else if (type == 1)	//Class
 8001978:	7a3b      	ldrb	r3, [r7, #8]
 800197a:	2b01      	cmp	r3, #1
 800197c:	f040 80b0 	bne.w	8001ae0 <SetupCallback+0x4c0>
		switch(bRequest)
 8001980:	7cbb      	ldrb	r3, [r7, #18]
 8001982:	3b01      	subs	r3, #1
 8001984:	2b0a      	cmp	r3, #10
 8001986:	f200 80a7 	bhi.w	8001ad8 <SetupCallback+0x4b8>
 800198a:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <SetupCallback+0x370>)
 800198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001990:	080019bd 	.word	0x080019bd
 8001994:	08001a99 	.word	0x08001a99
 8001998:	08001aa1 	.word	0x08001aa1
 800199c:	08001ad9 	.word	0x08001ad9
 80019a0:	08001ad9 	.word	0x08001ad9
 80019a4:	08001ad9 	.word	0x08001ad9
 80019a8:	08001ad9 	.word	0x08001ad9
 80019ac:	08001ad9 	.word	0x08001ad9
 80019b0:	08001aa9 	.word	0x08001aa9
 80019b4:	08001ab1 	.word	0x08001ab1
 80019b8:	08001ad1 	.word	0x08001ad1
			myprint("\t\tGET_REPORT\r\n");
 80019bc:	4857      	ldr	r0, [pc, #348]	; (8001b1c <SetupCallback+0x4fc>)
 80019be:	f7ff f8e7 	bl	8000b90 <myprint>
			switch (wValueHigh)
 80019c2:	7afb      	ldrb	r3, [r7, #11]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d00e      	beq.n	80019e6 <SetupCallback+0x3c6>
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	dc5f      	bgt.n	8001a8c <SetupCallback+0x46c>
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d002      	beq.n	80019d6 <SetupCallback+0x3b6>
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d004      	beq.n	80019de <SetupCallback+0x3be>
 80019d4:	e05a      	b.n	8001a8c <SetupCallback+0x46c>
				myprint("\t\t\tInput\r\n");
 80019d6:	4852      	ldr	r0, [pc, #328]	; (8001b20 <SetupCallback+0x500>)
 80019d8:	f7ff f8da 	bl	8000b90 <myprint>
				break;
 80019dc:	e05b      	b.n	8001a96 <SetupCallback+0x476>
				myprint("\t\t\tOutput\r\n");
 80019de:	4851      	ldr	r0, [pc, #324]	; (8001b24 <SetupCallback+0x504>)
 80019e0:	f7ff f8d6 	bl	8000b90 <myprint>
				break;
 80019e4:	e057      	b.n	8001a96 <SetupCallback+0x476>
				myprint("\t\t\tFeature\r\n");
 80019e6:	4850      	ldr	r0, [pc, #320]	; (8001b28 <SetupCallback+0x508>)
 80019e8:	f7ff f8d2 	bl	8000b90 <myprint>
				switch(wValueLow)
 80019ec:	7abb      	ldrb	r3, [r7, #10]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d02e      	beq.n	8001a50 <SetupCallback+0x430>
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	dc4e      	bgt.n	8001a94 <SetupCallback+0x474>
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d002      	beq.n	8001a00 <SetupCallback+0x3e0>
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d004      	beq.n	8001a08 <SetupCallback+0x3e8>
				break;
 80019fe:	e049      	b.n	8001a94 <SetupCallback+0x474>
					myprint("\t\t\t\t1\r\n");
 8001a00:	484a      	ldr	r0, [pc, #296]	; (8001b2c <SetupCallback+0x50c>)
 8001a02:	f7ff f8c5 	bl	8000b90 <myprint>
					break;
 8001a06:	e040      	b.n	8001a8a <SetupCallback+0x46a>
					block_load_report.report.report_id = 2;
 8001a08:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <SetupCallback+0x510>)
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	701a      	strb	r2, [r3, #0]
					block_load_report.report.ram_pool_available = 0xFFFF;
 8001a0e:	4b48      	ldr	r3, [pc, #288]	; (8001b30 <SetupCallback+0x510>)
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	70da      	strb	r2, [r3, #3]
 8001a16:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1a:	711a      	strb	r2, [r3, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	715a      	strb	r2, [r3, #5]
 8001a20:	2200      	movs	r2, #0
 8001a22:	719a      	strb	r2, [r3, #6]
					block_load_report.report.effect_block_index = 1;
 8001a24:	4b42      	ldr	r3, [pc, #264]	; (8001b30 <SetupCallback+0x510>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	705a      	strb	r2, [r3, #1]
					block_load_report.report.block_load_status = 1;
 8001a2a:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <SetupCallback+0x510>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	709a      	strb	r2, [r3, #2]
					endpoint_0_tx.buffer = block_load_report.data+1;
 8001a30:	4a40      	ldr	r2, [pc, #256]	; (8001b34 <SetupCallback+0x514>)
 8001a32:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <SetupCallback+0x4e4>)
 8001a34:	601a      	str	r2, [r3, #0]
					endpoint_0_tx.tx_length = 6;
 8001a36:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <SetupCallback+0x4e4>)
 8001a38:	2206      	movs	r2, #6
 8001a3a:	80da      	strh	r2, [r3, #6]
					EndpointTX(0, endpoint_0_tx);
 8001a3c:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <SetupCallback+0x4e4>)
 8001a3e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff fb46 	bl	80010d4 <EndpointTX>
					myprint("\t\t\t\t2\r\n");
 8001a48:	483b      	ldr	r0, [pc, #236]	; (8001b38 <SetupCallback+0x518>)
 8001a4a:	f7ff f8a1 	bl	8000b90 <myprint>
					break;
 8001a4e:	e01c      	b.n	8001a8a <SetupCallback+0x46a>
					pool_report.report.report_id = 3;
 8001a50:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <SetupCallback+0x51c>)
 8001a52:	2203      	movs	r2, #3
 8001a54:	701a      	strb	r2, [r3, #0]
					pool_report.report.ram_pool_size = 0xFFFF;
 8001a56:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <SetupCallback+0x51c>)
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	705a      	strb	r2, [r3, #1]
 8001a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a62:	709a      	strb	r2, [r3, #2]
					pool_report.report.simultaneous_effects_max = 5;
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <SetupCallback+0x51c>)
 8001a66:	2205      	movs	r2, #5
 8001a68:	70da      	strb	r2, [r3, #3]
					pool_report.report.device_manage_pool_shared_parameter_blocks = 0;
 8001a6a:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <SetupCallback+0x51c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	711a      	strb	r2, [r3, #4]
					endpoint_0_tx.buffer = pool_report.data;
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <SetupCallback+0x4e4>)
 8001a72:	4a32      	ldr	r2, [pc, #200]	; (8001b3c <SetupCallback+0x51c>)
 8001a74:	601a      	str	r2, [r3, #0]
					endpoint_0_tx.tx_length = 5;
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <SetupCallback+0x4e4>)
 8001a78:	2205      	movs	r2, #5
 8001a7a:	80da      	strh	r2, [r3, #6]
					EndpointTX(0, endpoint_0_tx);
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <SetupCallback+0x4e4>)
 8001a7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fb26 	bl	80010d4 <EndpointTX>
					break;
 8001a88:	bf00      	nop
				break;
 8001a8a:	e003      	b.n	8001a94 <SetupCallback+0x474>
				myprint("GET_REPORT SHOULDN'T BE HERE\r\n");
 8001a8c:	482c      	ldr	r0, [pc, #176]	; (8001b40 <SetupCallback+0x520>)
 8001a8e:	f7ff f87f 	bl	8000b90 <myprint>
				break;
 8001a92:	e000      	b.n	8001a96 <SetupCallback+0x476>
				break;
 8001a94:	bf00      	nop
		break;
 8001a96:	e027      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tGET_IDLE\r\n");
 8001a98:	482a      	ldr	r0, [pc, #168]	; (8001b44 <SetupCallback+0x524>)
 8001a9a:	f7ff f879 	bl	8000b90 <myprint>
		break;
 8001a9e:	e023      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tGET_PROTOCOL\r\n");
 8001aa0:	4829      	ldr	r0, [pc, #164]	; (8001b48 <SetupCallback+0x528>)
 8001aa2:	f7ff f875 	bl	8000b90 <myprint>
		break;
 8001aa6:	e01f      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tSET_REPORT\r\n");
 8001aa8:	4828      	ldr	r0, [pc, #160]	; (8001b4c <SetupCallback+0x52c>)
 8001aaa:	f7ff f871 	bl	8000b90 <myprint>
		break;
 8001aae:	e01b      	b.n	8001ae8 <SetupCallback+0x4c8>
			endpoint_0_tx.buffer = configuration_buffer;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <SetupCallback+0x4e4>)
 8001ab2:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <SetupCallback+0x4e8>)
 8001ab4:	601a      	str	r2, [r3, #0]
			endpoint_0_tx.tx_length = 0;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <SetupCallback+0x4e4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	80da      	strh	r2, [r3, #6]
			EndpointTX(0, endpoint_0_tx);
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <SetupCallback+0x4e4>)
 8001abe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff fb06 	bl	80010d4 <EndpointTX>
			myprint("\t\tSET_IDLE\r\n");
 8001ac8:	4821      	ldr	r0, [pc, #132]	; (8001b50 <SetupCallback+0x530>)
 8001aca:	f7ff f861 	bl	8000b90 <myprint>
		break;
 8001ace:	e00b      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tSET_PROTOCOL\r\n");
 8001ad0:	4820      	ldr	r0, [pc, #128]	; (8001b54 <SetupCallback+0x534>)
 8001ad2:	f7ff f85d 	bl	8000b90 <myprint>
		break;
 8001ad6:	e007      	b.n	8001ae8 <SetupCallback+0x4c8>
			myprint("\t\tWE SHOULDN'T BE HERE IN THE CLASS SETUP\r\n");
 8001ad8:	481f      	ldr	r0, [pc, #124]	; (8001b58 <SetupCallback+0x538>)
 8001ada:	f7ff f859 	bl	8000b90 <myprint>
		break;
 8001ade:	e003      	b.n	8001ae8 <SetupCallback+0x4c8>
		myprint("HERE!!!!!\r\n");
 8001ae0:	481e      	ldr	r0, [pc, #120]	; (8001b5c <SetupCallback+0x53c>)
 8001ae2:	f7ff f855 	bl	8000b90 <myprint>
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	; 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	08006038 	.word	0x08006038
 8001af4:	08005fa0 	.word	0x08005fa0
 8001af8:	08006048 	.word	0x08006048
 8001afc:	0800605c 	.word	0x0800605c
 8001b00:	08006074 	.word	0x08006074
 8001b04:	200003c8 	.word	0x200003c8
 8001b08:	200002b4 	.word	0x200002b4
 8001b0c:	0800608c 	.word	0x0800608c
 8001b10:	080060a0 	.word	0x080060a0
 8001b14:	080060b4 	.word	0x080060b4
 8001b18:	080060c4 	.word	0x080060c4
 8001b1c:	080060ec 	.word	0x080060ec
 8001b20:	080060fc 	.word	0x080060fc
 8001b24:	08006108 	.word	0x08006108
 8001b28:	08006114 	.word	0x08006114
 8001b2c:	08006124 	.word	0x08006124
 8001b30:	200003d8 	.word	0x200003d8
 8001b34:	200003d9 	.word	0x200003d9
 8001b38:	0800612c 	.word	0x0800612c
 8001b3c:	200003d0 	.word	0x200003d0
 8001b40:	08006134 	.word	0x08006134
 8001b44:	08006154 	.word	0x08006154
 8001b48:	08006164 	.word	0x08006164
 8001b4c:	08006178 	.word	0x08006178
 8001b50:	08006188 	.word	0x08006188
 8001b54:	08006198 	.word	0x08006198
 8001b58:	080061ac 	.word	0x080061ac
 8001b5c:	080061d8 	.word	0x080061d8

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6193      	str	r3, [r2, #24]
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_MspInit+0x44>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <NMI_Handler+0x4>

08001bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <BusFault_Handler+0x4>

08001bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <UsageFault_Handler+0x4>

08001bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	/****Must complete SysTick_Handler in < 72,000 cycles. Preferably far less to allow other interrupts to run....****/
	if (Motor_IsReady()) Motor_CalculateSpeed();
 8001bf4:	f7fe ff34 	bl	8000a60 <Motor_IsReady>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SysTick_Handler+0x12>
 8001bfe:	f7fe ff7b 	bl	8000af8 <Motor_CalculateSpeed>

	count++;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <SysTick_Handler+0x4c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <SysTick_Handler+0x4c>)
 8001c0a:	6013      	str	r3, [r2, #0]
	if (count == 10)
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <SysTick_Handler+0x4c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b0a      	cmp	r3, #10
 8001c12:	d108      	bne.n	8001c26 <SysTick_Handler+0x36>
	{
		ADC3->CR |= ADC_CR_ADSTART;
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <SysTick_Handler+0x50>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <SysTick_Handler+0x50>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	6093      	str	r3, [r2, #8]
		count = 0;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <SysTick_Handler+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c26:	f000 facb 	bl	80021c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  if (Motor_IsReady()) ES_PlayEffects();
 8001c2a:	f7fe ff19 	bl	8000a60 <Motor_IsReady>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SysTick_Handler+0x48>
 8001c34:	f7fe fd76 	bl	8000724 <ES_PlayEffects>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200003e0 	.word	0x200003e0
 8001c40:	50000400 	.word	0x50000400

08001c44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2224      	movs	r2, #36	; 0x24
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 f904 	bl	8005e84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <MX_TIM3_Init+0xa4>)
 8001c88:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <MX_TIM3_Init+0xa8>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <MX_TIM3_Init+0xa4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <MX_TIM3_Init+0xa4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <MX_TIM3_Init+0xa4>)
 8001c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <MX_TIM3_Init+0xa4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <MX_TIM3_Init+0xa4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cac:	2303      	movs	r3, #3
 8001cae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001ccc:	230f      	movs	r3, #15
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480d      	ldr	r0, [pc, #52]	; (8001d0c <MX_TIM3_Init+0xa4>)
 8001cd8:	f002 fc12 	bl	8004500 <HAL_TIM_Encoder_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001ce2:	f7fe fe3f 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cee:	463b      	mov	r3, r7
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <MX_TIM3_Init+0xa4>)
 8001cf4:	f003 fae6 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001cfe:	f7fe fe31 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	3730      	adds	r7, #48	; 0x30
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200003e4 	.word	0x200003e4
 8001d10:	40000400 	.word	0x40000400

08001d14 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b096      	sub	sp, #88	; 0x58
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	615a      	str	r2, [r3, #20]
 8001d38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	222c      	movs	r2, #44	; 0x2c
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f004 f89f 	bl	8005e84 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d46:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001d48:	4a3a      	ldr	r2, [pc, #232]	; (8001e34 <MX_TIM15_Init+0x120>)
 8001d4a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 5;
 8001d4c:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001d4e:	2205      	movs	r2, #5
 8001d50:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001d58:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001d5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d5e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d60:	4b33      	ldr	r3, [pc, #204]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d66:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d6c:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001d72:	482f      	ldr	r0, [pc, #188]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001d74:	f002 f9b8 	bl	80040e8 <HAL_TIM_PWM_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001d7e:	f7fe fdf1 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001d8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4827      	ldr	r0, [pc, #156]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001d92:	f003 fa97 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001d9c:	f7fe fde2 	bl	8000964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da0:	2360      	movs	r3, #96	; 0x60
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da8:	2300      	movs	r3, #0
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dac:	2300      	movs	r3, #0
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001db4:	2300      	movs	r3, #0
 8001db6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	481a      	ldr	r0, [pc, #104]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001dc6:	f002 fcdd 	bl	8004784 <HAL_TIM_PWM_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001dd0:	f7fe fdc8 	bl	8000964 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dd8:	2204      	movs	r2, #4
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4814      	ldr	r0, [pc, #80]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001dde:	f002 fcd1 	bl	8004784 <HAL_TIM_PWM_ConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001de8:	f7fe fdbc 	bl	8000964 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4807      	ldr	r0, [pc, #28]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001e14:	f003 fae2 	bl	80053dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001e1e:	f7fe fda1 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001e22:	4803      	ldr	r0, [pc, #12]	; (8001e30 <MX_TIM15_Init+0x11c>)
 8001e24:	f000 f888 	bl	8001f38 <HAL_TIM_MspPostInit>

}
 8001e28:	bf00      	nop
 8001e2a:	3758      	adds	r7, #88	; 0x58
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200004a0 	.word	0x200004a0
 8001e34:	40014000 	.word	0x40014000

08001e38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a25      	ldr	r2, [pc, #148]	; (8001eec <HAL_TIM_Encoder_MspInit+0xb4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d144      	bne.n	8001ee4 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5a:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a24      	ldr	r2, [pc, #144]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7c:	6153      	str	r3, [r2, #20]
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	4a18      	ldr	r2, [pc, #96]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e94:	6153      	str	r3, [r2, #20]
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec0:	f000 fab0 	bl	8002424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001ee0:	f000 faa0 	bl	8002424 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	3728      	adds	r7, #40	; 0x28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40000400 	.word	0x40000400
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	48000400 	.word	0x48000400

08001ef8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_TIM_PWM_MspInit+0x38>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10b      	bne.n	8001f22 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6193      	str	r3, [r2, #24]
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40014000 	.word	0x40014000
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a20      	ldr	r2, [pc, #128]	; (8001fd8 <HAL_TIM_MspPostInit+0xa0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d139      	bne.n	8001fce <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_TIM_MspPostInit+0xa4>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	4a1f      	ldr	r2, [pc, #124]	; (8001fdc <HAL_TIM_MspPostInit+0xa4>)
 8001f60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f64:	6153      	str	r3, [r2, #20]
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_TIM_MspPostInit+0xa4>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <HAL_TIM_MspPostInit+0xa4>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <HAL_TIM_MspPostInit+0xa4>)
 8001f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7c:	6153      	str	r3, [r2, #20]
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_TIM_MspPostInit+0xa4>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PF9     ------> TIM15_CH1
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480e      	ldr	r0, [pc, #56]	; (8001fe0 <HAL_TIM_MspPostInit+0xa8>)
 8001fa8:	f000 fa3c 	bl	8002424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fac:	2308      	movs	r3, #8
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001fbc:	2309      	movs	r3, #9
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fca:	f000 fa2b 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001fce:	bf00      	nop
 8001fd0:	3728      	adds	r7, #40	; 0x28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40014000 	.word	0x40014000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	48001400 	.word	0x48001400

08001fe4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <MX_USART3_UART_Init+0x64>)
 8001fea:	4a18      	ldr	r2, [pc, #96]	; (800204c <MX_USART3_UART_Init+0x68>)
 8001fec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fee:	4b16      	ldr	r3, [pc, #88]	; (8002048 <MX_USART3_UART_Init+0x64>)
 8001ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ff4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <MX_USART3_UART_Init+0x64>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <MX_USART3_UART_Init+0x64>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_USART3_UART_Init+0x64>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_USART3_UART_Init+0x64>)
 800200a:	220c      	movs	r2, #12
 800200c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_USART3_UART_Init+0x64>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_USART3_UART_Init+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <MX_USART3_UART_Init+0x64>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_USART3_UART_Init+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002026:	4808      	ldr	r0, [pc, #32]	; (8002048 <MX_USART3_UART_Init+0x64>)
 8002028:	f003 fa86 	bl	8005538 <HAL_UART_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002032:	f7fe fc97 	bl	8000964 <Error_Handler>

  /*char escape = 0x1B;
  myprint(&escape);
  myprint("[2J");*/

  myprint("\r\n\n\n\n\n");
 8002036:	4806      	ldr	r0, [pc, #24]	; (8002050 <MX_USART3_UART_Init+0x6c>)
 8002038:	f7fe fdaa 	bl	8000b90 <myprint>
  myprint("----------Welcome!----------\r\n\n\n\n");
 800203c:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_USART3_UART_Init+0x70>)
 800203e:	f7fe fda7 	bl	8000b90 <myprint>

  /* USER CODE END USART3_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000055c 	.word	0x2000055c
 800204c:	40004800 	.word	0x40004800
 8002050:	080061e4 	.word	0x080061e4
 8002054:	080061ec 	.word	0x080061ec

08002058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_UART_MspInit+0x7c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d128      	bne.n	80020cc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_UART_MspInit+0x80>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_UART_MspInit+0x80>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002084:	61d3      	str	r3, [r2, #28]
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_UART_MspInit+0x80>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_UART_MspInit+0x80>)
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_UART_MspInit+0x80>)
 8002098:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800209c:	6153      	str	r3, [r2, #20]
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_UART_MspInit+0x80>)
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020bc:	2307      	movs	r3, #7
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <HAL_UART_MspInit+0x84>)
 80020c8:	f000 f9ac 	bl	8002424 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40004800 	.word	0x40004800
 80020d8:	40021000 	.word	0x40021000
 80020dc:	48000c00 	.word	0x48000c00

080020e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002118 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e4:	480d      	ldr	r0, [pc, #52]	; (800211c <LoopForever+0x6>)
  ldr r1, =_edata
 80020e6:	490e      	ldr	r1, [pc, #56]	; (8002120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020e8:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <LoopForever+0xe>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020fc:	4c0b      	ldr	r4, [pc, #44]	; (800212c <LoopForever+0x16>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800210a:	f7ff fd9b 	bl	8001c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800210e:	f003 fe7b 	bl	8005e08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002112:	f7fe fb8f 	bl	8000834 <main>

08002116 <LoopForever>:

LoopForever:
    b LoopForever
 8002116:	e7fe      	b.n	8002116 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002118:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800211c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002120:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002124:	080062f0 	.word	0x080062f0
  ldr r2, =_sbss
 8002128:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800212c:	200005e4 	.word	0x200005e4

08002130 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002130:	e7fe      	b.n	8002130 <ADC1_2_IRQHandler>
	...

08002134 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_Init+0x28>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a07      	ldr	r2, [pc, #28]	; (800215c <HAL_Init+0x28>)
 800213e:	f043 0310 	orr.w	r3, r3, #16
 8002142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002144:	2003      	movs	r0, #3
 8002146:	f000 f92b 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214a:	200f      	movs	r0, #15
 800214c:	f000 f808 	bl	8002160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002150:	f7ff fd06 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40022000 	.word	0x40022000

08002160 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_InitTick+0x54>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_InitTick+0x58>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002176:	fbb3 f3f1 	udiv	r3, r3, r1
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f943 	bl	800240a <HAL_SYSTICK_Config>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e00e      	b.n	80021ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b0f      	cmp	r3, #15
 8002192:	d80a      	bhi.n	80021aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002194:	2200      	movs	r2, #0
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f000 f90b 	bl	80023b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a0:	4a06      	ldr	r2, [pc, #24]	; (80021bc <HAL_InitTick+0x5c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000008 	.word	0x20000008
 80021bc:	20000004 	.word	0x20000004

080021c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_IncTick+0x20>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_IncTick+0x24>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_IncTick+0x24>)
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000008 	.word	0x20000008
 80021e4:	200005e0 	.word	0x200005e0

080021e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <HAL_GetTick+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	200005e0 	.word	0x200005e0

08002200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800222c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <__NVIC_GetPriorityGrouping+0x18>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0307 	and.w	r3, r3, #7
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	db0b      	blt.n	800228e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4907      	ldr	r1, [pc, #28]	; (800229c <__NVIC_EnableIRQ+0x38>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2001      	movs	r0, #1
 8002286:	fa00 f202 	lsl.w	r2, r0, r2
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100

080022a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db0a      	blt.n	80022ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	490c      	ldr	r1, [pc, #48]	; (80022ec <__NVIC_SetPriority+0x4c>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	440b      	add	r3, r1
 80022c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c8:	e00a      	b.n	80022e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4908      	ldr	r1, [pc, #32]	; (80022f0 <__NVIC_SetPriority+0x50>)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3b04      	subs	r3, #4
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	440b      	add	r3, r1
 80022de:	761a      	strb	r2, [r3, #24]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f1c3 0307 	rsb	r3, r3, #7
 800230e:	2b04      	cmp	r3, #4
 8002310:	bf28      	it	cs
 8002312:	2304      	movcs	r3, #4
 8002314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3304      	adds	r3, #4
 800231a:	2b06      	cmp	r3, #6
 800231c:	d902      	bls.n	8002324 <NVIC_EncodePriority+0x30>
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3b03      	subs	r3, #3
 8002322:	e000      	b.n	8002326 <NVIC_EncodePriority+0x32>
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	401a      	ands	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43d9      	mvns	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	4313      	orrs	r3, r2
         );
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	; 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800236c:	d301      	bcc.n	8002372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236e:	2301      	movs	r3, #1
 8002370:	e00f      	b.n	8002392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <SysTick_Config+0x40>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237a:	210f      	movs	r1, #15
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f7ff ff8e 	bl	80022a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <SysTick_Config+0x40>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <SysTick_Config+0x40>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010

080023a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff29 	bl	8002200 <__NVIC_SetPriorityGrouping>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff ff3e 	bl	8002248 <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff8e 	bl	80022f4 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5d 	bl	80022a0 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff31 	bl	8002264 <__NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffa2 	bl	800235c <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002432:	e160      	b.n	80026f6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2101      	movs	r1, #1
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	4013      	ands	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8152 	beq.w	80026f0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d005      	beq.n	8002464 <HAL_GPIO_Init+0x40>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d130      	bne.n	80024c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800249a:	2201      	movs	r2, #1
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	091b      	lsrs	r3, r3, #4
 80024b0:	f003 0201 	and.w	r2, r3, #1
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d017      	beq.n	8002502 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d123      	bne.n	8002556 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	08da      	lsrs	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	220f      	movs	r2, #15
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	6939      	ldr	r1, [r7, #16]
 8002552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	2203      	movs	r2, #3
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0203 	and.w	r2, r3, #3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80ac 	beq.w	80026f0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002598:	4b5e      	ldr	r3, [pc, #376]	; (8002714 <HAL_GPIO_Init+0x2f0>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4a5d      	ldr	r2, [pc, #372]	; (8002714 <HAL_GPIO_Init+0x2f0>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6193      	str	r3, [r2, #24]
 80025a4:	4b5b      	ldr	r3, [pc, #364]	; (8002714 <HAL_GPIO_Init+0x2f0>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025b0:	4a59      	ldr	r2, [pc, #356]	; (8002718 <HAL_GPIO_Init+0x2f4>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025da:	d025      	beq.n	8002628 <HAL_GPIO_Init+0x204>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a4f      	ldr	r2, [pc, #316]	; (800271c <HAL_GPIO_Init+0x2f8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d01f      	beq.n	8002624 <HAL_GPIO_Init+0x200>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a4e      	ldr	r2, [pc, #312]	; (8002720 <HAL_GPIO_Init+0x2fc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d019      	beq.n	8002620 <HAL_GPIO_Init+0x1fc>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a4d      	ldr	r2, [pc, #308]	; (8002724 <HAL_GPIO_Init+0x300>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_GPIO_Init+0x1f8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a4c      	ldr	r2, [pc, #304]	; (8002728 <HAL_GPIO_Init+0x304>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00d      	beq.n	8002618 <HAL_GPIO_Init+0x1f4>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a4b      	ldr	r2, [pc, #300]	; (800272c <HAL_GPIO_Init+0x308>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d007      	beq.n	8002614 <HAL_GPIO_Init+0x1f0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a4a      	ldr	r2, [pc, #296]	; (8002730 <HAL_GPIO_Init+0x30c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d101      	bne.n	8002610 <HAL_GPIO_Init+0x1ec>
 800260c:	2306      	movs	r3, #6
 800260e:	e00c      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002610:	2307      	movs	r3, #7
 8002612:	e00a      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002614:	2305      	movs	r3, #5
 8002616:	e008      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002618:	2304      	movs	r3, #4
 800261a:	e006      	b.n	800262a <HAL_GPIO_Init+0x206>
 800261c:	2303      	movs	r3, #3
 800261e:	e004      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002620:	2302      	movs	r3, #2
 8002622:	e002      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002628:	2300      	movs	r3, #0
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	f002 0203 	and.w	r2, r2, #3
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	4093      	lsls	r3, r2
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800263a:	4937      	ldr	r1, [pc, #220]	; (8002718 <HAL_GPIO_Init+0x2f4>)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3302      	adds	r3, #2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002648:	4b3a      	ldr	r3, [pc, #232]	; (8002734 <HAL_GPIO_Init+0x310>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800266c:	4a31      	ldr	r2, [pc, #196]	; (8002734 <HAL_GPIO_Init+0x310>)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002672:	4b30      	ldr	r3, [pc, #192]	; (8002734 <HAL_GPIO_Init+0x310>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002696:	4a27      	ldr	r2, [pc, #156]	; (8002734 <HAL_GPIO_Init+0x310>)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_GPIO_Init+0x310>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026c0:	4a1c      	ldr	r2, [pc, #112]	; (8002734 <HAL_GPIO_Init+0x310>)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_GPIO_Init+0x310>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <HAL_GPIO_Init+0x310>)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	3301      	adds	r3, #1
 80026f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	f47f ae97 	bne.w	8002434 <HAL_GPIO_Init+0x10>
  }
}
 8002706:	bf00      	nop
 8002708:	bf00      	nop
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	40010000 	.word	0x40010000
 800271c:	48000400 	.word	0x48000400
 8002720:	48000800 	.word	0x48000800
 8002724:	48000c00 	.word	0x48000c00
 8002728:	48001000 	.word	0x48001000
 800272c:	48001400 	.word	0x48001400
 8002730:	48001800 	.word	0x48001800
 8002734:	40010400 	.word	0x40010400

08002738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	887b      	ldrh	r3, [r7, #2]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	e001      	b.n	800275a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
 8002774:	4613      	mov	r3, r2
 8002776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002778:	787b      	ldrb	r3, [r7, #1]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002784:	e002      	b.n	800278c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800279e:	af00      	add	r7, sp, #0
 80027a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d102      	bne.n	80027be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f001 b83a 	b.w	8003832 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 816f 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027d4:	4bb5      	ldr	r3, [pc, #724]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d00c      	beq.n	80027fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027e0:	4bb2      	ldr	r3, [pc, #712]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d15c      	bne.n	80028a6 <HAL_RCC_OscConfig+0x10e>
 80027ec:	4baf      	ldr	r3, [pc, #700]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f8:	d155      	bne.n	80028a6 <HAL_RCC_OscConfig+0x10e>
 80027fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800280e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_RCC_OscConfig+0x94>
 8002826:	4ba1      	ldr	r3, [pc, #644]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e015      	b.n	8002858 <HAL_RCC_OscConfig+0xc0>
 800282c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002830:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002844:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002848:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002854:	4b95      	ldr	r3, [pc, #596]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800285c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002860:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002864:	fa92 f2a2 	rbit	r2, r2
 8002868:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800286c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8111 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x318>
 800288e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002892:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 8108 	bne.w	8002ab0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f000 bfc6 	b.w	8003832 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b6:	d106      	bne.n	80028c6 <HAL_RCC_OscConfig+0x12e>
 80028b8:	4b7c      	ldr	r3, [pc, #496]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a7b      	ldr	r2, [pc, #492]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 80028be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	e036      	b.n	8002934 <HAL_RCC_OscConfig+0x19c>
 80028c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x158>
 80028d6:	4b75      	ldr	r3, [pc, #468]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a74      	ldr	r2, [pc, #464]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 80028dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b72      	ldr	r3, [pc, #456]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a71      	ldr	r2, [pc, #452]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 80028e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e021      	b.n	8002934 <HAL_RCC_OscConfig+0x19c>
 80028f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x184>
 8002902:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a69      	ldr	r2, [pc, #420]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 8002908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b67      	ldr	r3, [pc, #412]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a66      	ldr	r2, [pc, #408]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e00b      	b.n	8002934 <HAL_RCC_OscConfig+0x19c>
 800291c:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a62      	ldr	r2, [pc, #392]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 8002922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	4b60      	ldr	r3, [pc, #384]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a5f      	ldr	r2, [pc, #380]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 800292e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002932:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002938:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d059      	beq.n	80029f8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff fc50 	bl	80021e8 <HAL_GetTick>
 8002948:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294e:	f7ff fc4b 	bl	80021e8 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d902      	bls.n	8002964 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	f000 bf67 	b.w	8003832 <HAL_RCC_OscConfig+0x109a>
 8002964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002968:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002978:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d102      	bne.n	8002996 <HAL_RCC_OscConfig+0x1fe>
 8002990:	4b46      	ldr	r3, [pc, #280]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x22a>
 8002996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80029aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80029b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029be:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029c6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80029ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80029ce:	fa92 f2a2 	rbit	r2, r2
 80029d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80029d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029da:	fab2 f282 	clz	r2, r2
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f042 0220 	orr.w	r2, r2, #32
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	f002 021f 	and.w	r2, r2, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ab      	beq.n	800294e <HAL_RCC_OscConfig+0x1b6>
 80029f6:	e05c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7ff fbf6 	bl	80021e8 <HAL_GetTick>
 80029fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a02:	f7ff fbf1 	bl	80021e8 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d902      	bls.n	8002a18 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	f000 bf0d 	b.w	8003832 <HAL_RCC_OscConfig+0x109a>
 8002a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a1c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002a2c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d102      	bne.n	8002a4a <HAL_RCC_OscConfig+0x2b2>
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x2de>
 8002a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a62:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a66:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_RCC_OscConfig+0x314>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a7a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002a7e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002a82:	fa92 f2a2 	rbit	r2, r2
 8002a86:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002a8a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a8e:	fab2 f282 	clz	r2, r2
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	f042 0220 	orr.w	r2, r2, #32
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	f002 021f 	and.w	r2, r2, #31
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1ab      	bne.n	8002a02 <HAL_RCC_OscConfig+0x26a>
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCC_OscConfig+0x31a>
 8002aac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 817f 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ac8:	4ba7      	ldr	r3, [pc, #668]	; (8002d68 <HAL_RCC_OscConfig+0x5d0>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00c      	beq.n	8002aee <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ad4:	4ba4      	ldr	r3, [pc, #656]	; (8002d68 <HAL_RCC_OscConfig+0x5d0>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d173      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x430>
 8002ae0:	4ba1      	ldr	r3, [pc, #644]	; (8002d68 <HAL_RCC_OscConfig+0x5d0>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aec:	d16c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x430>
 8002aee:	2302      	movs	r3, #2
 8002af0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002b00:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d102      	bne.n	8002b1e <HAL_RCC_OscConfig+0x386>
 8002b18:	4b93      	ldr	r3, [pc, #588]	; (8002d68 <HAL_RCC_OscConfig+0x5d0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	e013      	b.n	8002b46 <HAL_RCC_OscConfig+0x3ae>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002b30:	2302      	movs	r3, #2
 8002b32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b36:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b42:	4b89      	ldr	r3, [pc, #548]	; (8002d68 <HAL_RCC_OscConfig+0x5d0>)
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	2202      	movs	r2, #2
 8002b48:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002b4c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002b50:	fa92 f2a2 	rbit	r2, r2
 8002b54:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002b58:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b5c:	fab2 f282 	clz	r2, r2
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f042 0220 	orr.w	r2, r2, #32
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	f002 021f 	and.w	r2, r2, #31
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCC_OscConfig+0x3f6>
 8002b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d002      	beq.n	8002b8e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f000 be52 	b.w	8003832 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8e:	4b76      	ldr	r3, [pc, #472]	; (8002d68 <HAL_RCC_OscConfig+0x5d0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	21f8      	movs	r1, #248	; 0xf8
 8002ba4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002bac:	fa91 f1a1 	rbit	r1, r1
 8002bb0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002bb4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002bb8:	fab1 f181 	clz	r1, r1
 8002bbc:	b2c9      	uxtb	r1, r1
 8002bbe:	408b      	lsls	r3, r1
 8002bc0:	4969      	ldr	r1, [pc, #420]	; (8002d68 <HAL_RCC_OscConfig+0x5d0>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	e0fe      	b.n	8002dc6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8088 	beq.w	8002cea <HAL_RCC_OscConfig+0x552>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002bec:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bfa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	461a      	mov	r2, r3
 8002c02:	2301      	movs	r3, #1
 8002c04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7ff faef 	bl	80021e8 <HAL_GetTick>
 8002c0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c10:	f7ff faea 	bl	80021e8 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d902      	bls.n	8002c26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	f000 be06 	b.w	8003832 <HAL_RCC_OscConfig+0x109a>
 8002c26:	2302      	movs	r3, #2
 8002c28:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002c38:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d102      	bne.n	8002c56 <HAL_RCC_OscConfig+0x4be>
 8002c50:	4b45      	ldr	r3, [pc, #276]	; (8002d68 <HAL_RCC_OscConfig+0x5d0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	e013      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e6>
 8002c56:	2302      	movs	r3, #2
 8002c58:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002c68:	2302      	movs	r3, #2
 8002c6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c6e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <HAL_RCC_OscConfig+0x5d0>)
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002c84:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002c88:	fa92 f2a2 	rbit	r2, r2
 8002c8c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002c90:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c94:	fab2 f282 	clz	r2, r2
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	f042 0220 	orr.w	r2, r2, #32
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	f002 021f 	and.w	r2, r2, #31
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0af      	beq.n	8002c10 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <HAL_RCC_OscConfig+0x5d0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	21f8      	movs	r1, #248	; 0xf8
 8002cc6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002cce:	fa91 f1a1 	rbit	r1, r1
 8002cd2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002cd6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002cda:	fab1 f181 	clz	r1, r1
 8002cde:	b2c9      	uxtb	r1, r1
 8002ce0:	408b      	lsls	r3, r1
 8002ce2:	4921      	ldr	r1, [pc, #132]	; (8002d68 <HAL_RCC_OscConfig+0x5d0>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]
 8002ce8:	e06d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x62e>
 8002cea:	2301      	movs	r3, #1
 8002cec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002cf4:	fa93 f3a3 	rbit	r3, r3
 8002cf8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002cfc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	461a      	mov	r2, r3
 8002d12:	2300      	movs	r3, #0
 8002d14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7ff fa67 	bl	80021e8 <HAL_GetTick>
 8002d1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d20:	f7ff fa62 	bl	80021e8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d902      	bls.n	8002d36 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	f000 bd7e 	b.w	8003832 <HAL_RCC_OscConfig+0x109a>
 8002d36:	2302      	movs	r3, #2
 8002d38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002d48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <HAL_RCC_OscConfig+0x5d4>
 8002d60:	4b01      	ldr	r3, [pc, #4]	; (8002d68 <HAL_RCC_OscConfig+0x5d0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	e016      	b.n	8002d94 <HAL_RCC_OscConfig+0x5fc>
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002d7e:	2302      	movs	r3, #2
 8002d80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d84:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d90:	4bbf      	ldr	r3, [pc, #764]	; (8003090 <HAL_RCC_OscConfig+0x8f8>)
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	2202      	movs	r2, #2
 8002d96:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002d9a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002d9e:	fa92 f2a2 	rbit	r2, r2
 8002da2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002da6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002daa:	fab2 f282 	clz	r2, r2
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	f042 0220 	orr.w	r2, r2, #32
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	f002 021f 	and.w	r2, r2, #31
 8002dba:	2101      	movs	r1, #1
 8002dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ac      	bne.n	8002d20 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8113 	beq.w	8003002 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d07c      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x74e>
 8002dec:	2301      	movs	r3, #1
 8002dee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002dfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4ba2      	ldr	r3, [pc, #648]	; (8003094 <HAL_RCC_OscConfig+0x8fc>)
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	461a      	mov	r2, r3
 8002e12:	2301      	movs	r3, #1
 8002e14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e16:	f7ff f9e7 	bl	80021e8 <HAL_GetTick>
 8002e1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e20:	f7ff f9e2 	bl	80021e8 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d902      	bls.n	8002e36 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	f000 bcfe 	b.w	8003832 <HAL_RCC_OscConfig+0x109a>
 8002e36:	2302      	movs	r3, #2
 8002e38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e40:	fa93 f2a3 	rbit	r2, r3
 8002e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e56:	2202      	movs	r2, #2
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	fa93 f2a3 	rbit	r2, r3
 8002e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	fa93 f2a3 	rbit	r2, r3
 8002e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	4b7e      	ldr	r3, [pc, #504]	; (8003090 <HAL_RCC_OscConfig+0x8f8>)
 8002e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ea2:	2102      	movs	r1, #2
 8002ea4:	6019      	str	r1, [r3, #0]
 8002ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eaa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	fa93 f1a3 	rbit	r1, r3
 8002eb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ebc:	6019      	str	r1, [r3, #0]
  return result;
 8002ebe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2101      	movs	r1, #1
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d09d      	beq.n	8002e20 <HAL_RCC_OscConfig+0x688>
 8002ee4:	e08d      	b.n	8003002 <HAL_RCC_OscConfig+0x86a>
 8002ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002eee:	2201      	movs	r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	fa93 f2a3 	rbit	r2, r3
 8002f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f04:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f08:	601a      	str	r2, [r3, #0]
  return result;
 8002f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f12:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <HAL_RCC_OscConfig+0x8fc>)
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	461a      	mov	r2, r3
 8002f24:	2300      	movs	r3, #0
 8002f26:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f28:	f7ff f95e 	bl	80021e8 <HAL_GetTick>
 8002f2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f32:	f7ff f959 	bl	80021e8 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d902      	bls.n	8002f48 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	f000 bc75 	b.w	8003832 <HAL_RCC_OscConfig+0x109a>
 8002f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f50:	2202      	movs	r2, #2
 8002f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	fa93 f2a3 	rbit	r2, r3
 8002f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f74:	2202      	movs	r2, #2
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	fa93 f2a3 	rbit	r2, r3
 8002f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f98:	2202      	movs	r2, #2
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fb2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_RCC_OscConfig+0x8f8>)
 8002fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fbc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	6019      	str	r1, [r3, #0]
 8002fc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	fa93 f1a3 	rbit	r1, r3
 8002fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002fda:	6019      	str	r1, [r3, #0]
  return result;
 8002fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d197      	bne.n	8002f32 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003006:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 81a5 	beq.w	8003362 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301e:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <HAL_RCC_OscConfig+0x8f8>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCC_OscConfig+0x8f8>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a18      	ldr	r2, [pc, #96]	; (8003090 <HAL_RCC_OscConfig+0x8f8>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	61d3      	str	r3, [r2, #28]
 8003036:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_RCC_OscConfig+0x8f8>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800303e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800304c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003050:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <HAL_RCC_OscConfig+0x900>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d121      	bne.n	80030a8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <HAL_RCC_OscConfig+0x900>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x900>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003070:	f7ff f8ba 	bl	80021e8 <HAL_GetTick>
 8003074:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	e010      	b.n	800309c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307a:	f7ff f8b5 	bl	80021e8 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d908      	bls.n	800309c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e3d1      	b.n	8003832 <HAL_RCC_OscConfig+0x109a>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	10908120 	.word	0x10908120
 8003098:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	4b8d      	ldr	r3, [pc, #564]	; (80032d4 <HAL_RCC_OscConfig+0xb3c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0e8      	beq.n	800307a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d106      	bne.n	80030c6 <HAL_RCC_OscConfig+0x92e>
 80030b8:	4b87      	ldr	r3, [pc, #540]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4a86      	ldr	r2, [pc, #536]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6213      	str	r3, [r2, #32]
 80030c4:	e035      	b.n	8003132 <HAL_RCC_OscConfig+0x99a>
 80030c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x958>
 80030d6:	4b80      	ldr	r3, [pc, #512]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4a7f      	ldr	r2, [pc, #508]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	6213      	str	r3, [r2, #32]
 80030e2:	4b7d      	ldr	r3, [pc, #500]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4a7c      	ldr	r2, [pc, #496]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 80030e8:	f023 0304 	bic.w	r3, r3, #4
 80030ec:	6213      	str	r3, [r2, #32]
 80030ee:	e020      	b.n	8003132 <HAL_RCC_OscConfig+0x99a>
 80030f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d10c      	bne.n	800311a <HAL_RCC_OscConfig+0x982>
 8003100:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a74      	ldr	r2, [pc, #464]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	6213      	str	r3, [r2, #32]
 800310c:	4b72      	ldr	r3, [pc, #456]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a71      	ldr	r2, [pc, #452]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	e00b      	b.n	8003132 <HAL_RCC_OscConfig+0x99a>
 800311a:	4b6f      	ldr	r3, [pc, #444]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a6e      	ldr	r2, [pc, #440]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6213      	str	r3, [r2, #32]
 8003126:	4b6c      	ldr	r3, [pc, #432]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a6b      	ldr	r2, [pc, #428]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003136:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8081 	beq.w	8003246 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003144:	f7ff f850 	bl	80021e8 <HAL_GetTick>
 8003148:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	e00b      	b.n	8003166 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7ff f84b 	bl	80021e8 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e365      	b.n	8003832 <HAL_RCC_OscConfig+0x109a>
 8003166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800316a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800316e:	2202      	movs	r2, #2
 8003170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003176:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	fa93 f2a3 	rbit	r2, r3
 8003180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003184:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003192:	2202      	movs	r2, #2
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	fa93 f2a3 	rbit	r2, r3
 80031a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031ac:	601a      	str	r2, [r3, #0]
  return result;
 80031ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b8:	fab3 f383 	clz	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d102      	bne.n	80031d2 <HAL_RCC_OscConfig+0xa3a>
 80031cc:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	e013      	b.n	80031fa <HAL_RCC_OscConfig+0xa62>
 80031d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80031da:	2202      	movs	r2, #2
 80031dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	fa93 f2a3 	rbit	r2, r3
 80031ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	4b38      	ldr	r3, [pc, #224]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003202:	2102      	movs	r1, #2
 8003204:	6011      	str	r1, [r2, #0]
 8003206:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800320a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	fa92 f1a2 	rbit	r1, r2
 8003214:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003218:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800321c:	6011      	str	r1, [r2, #0]
  return result;
 800321e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003222:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	fab2 f282 	clz	r2, r2
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	f002 021f 	and.w	r2, r2, #31
 8003238:	2101      	movs	r1, #1
 800323a:	fa01 f202 	lsl.w	r2, r1, r2
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d084      	beq.n	800314e <HAL_RCC_OscConfig+0x9b6>
 8003244:	e083      	b.n	800334e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7fe ffcf 	bl	80021e8 <HAL_GetTick>
 800324a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324e:	e00b      	b.n	8003268 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003250:	f7fe ffca 	bl	80021e8 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e2e4      	b.n	8003832 <HAL_RCC_OscConfig+0x109a>
 8003268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003270:	2202      	movs	r2, #2
 8003272:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003278:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	fa93 f2a3 	rbit	r2, r3
 8003282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003286:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003290:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003294:	2202      	movs	r2, #2
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	fa93 f2a3 	rbit	r2, r3
 80032a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032ae:	601a      	str	r2, [r3, #0]
  return result;
 80032b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d106      	bne.n	80032dc <HAL_RCC_OscConfig+0xb44>
 80032ce:	4b02      	ldr	r3, [pc, #8]	; (80032d8 <HAL_RCC_OscConfig+0xb40>)
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	e017      	b.n	8003304 <HAL_RCC_OscConfig+0xb6c>
 80032d4:	40007000 	.word	0x40007000
 80032d8:	40021000 	.word	0x40021000
 80032dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032e4:	2202      	movs	r2, #2
 80032e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	fa93 f2a3 	rbit	r2, r3
 80032f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032fa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	4bb3      	ldr	r3, [pc, #716]	; (80035d0 <HAL_RCC_OscConfig+0xe38>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003308:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800330c:	2102      	movs	r1, #2
 800330e:	6011      	str	r1, [r2, #0]
 8003310:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003314:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	fa92 f1a2 	rbit	r1, r2
 800331e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003322:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003326:	6011      	str	r1, [r2, #0]
  return result;
 8003328:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800332c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	fab2 f282 	clz	r2, r2
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f002 021f 	and.w	r2, r2, #31
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d180      	bne.n	8003250 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800334e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003356:	4b9e      	ldr	r3, [pc, #632]	; (80035d0 <HAL_RCC_OscConfig+0xe38>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4a9d      	ldr	r2, [pc, #628]	; (80035d0 <HAL_RCC_OscConfig+0xe38>)
 800335c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003360:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003366:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 825e 	beq.w	8003830 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003374:	4b96      	ldr	r3, [pc, #600]	; (80035d0 <HAL_RCC_OscConfig+0xe38>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b08      	cmp	r3, #8
 800337e:	f000 821f 	beq.w	80037c0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003386:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b02      	cmp	r3, #2
 8003390:	f040 8170 	bne.w	8003674 <HAL_RCC_OscConfig+0xedc>
 8003394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003398:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800339c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	fa93 f2a3 	rbit	r2, r3
 80033b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033b8:	601a      	str	r2, [r3, #0]
  return result;
 80033ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033c2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	461a      	mov	r2, r3
 80033d6:	2300      	movs	r3, #0
 80033d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033da:	f7fe ff05 	bl	80021e8 <HAL_GetTick>
 80033de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e2:	e009      	b.n	80033f8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fe ff00 	bl	80021e8 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e21c      	b.n	8003832 <HAL_RCC_OscConfig+0x109a>
 80033f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800340a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	fa93 f2a3 	rbit	r2, r3
 8003414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003418:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800341c:	601a      	str	r2, [r3, #0]
  return result;
 800341e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003422:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003426:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d102      	bne.n	8003442 <HAL_RCC_OscConfig+0xcaa>
 800343c:	4b64      	ldr	r3, [pc, #400]	; (80035d0 <HAL_RCC_OscConfig+0xe38>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	e027      	b.n	8003492 <HAL_RCC_OscConfig+0xcfa>
 8003442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003446:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800344a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800344e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003454:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003462:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800346c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800347a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fa93 f2a3 	rbit	r2, r3
 8003484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003488:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <HAL_RCC_OscConfig+0xe38>)
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003496:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800349a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800349e:	6011      	str	r1, [r2, #0]
 80034a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034a4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	fa92 f1a2 	rbit	r1, r2
 80034ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034b2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80034b6:	6011      	str	r1, [r2, #0]
  return result;
 80034b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034bc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	fab2 f282 	clz	r2, r2
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	f042 0220 	orr.w	r2, r2, #32
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	f002 021f 	and.w	r2, r2, #31
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f202 	lsl.w	r2, r1, r2
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d182      	bne.n	80033e4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034de:	4b3c      	ldr	r3, [pc, #240]	; (80035d0 <HAL_RCC_OscConfig+0xe38>)
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	f023 020f 	bic.w	r2, r3, #15
 80034e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	4937      	ldr	r1, [pc, #220]	; (80035d0 <HAL_RCC_OscConfig+0xe38>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80034f8:	4b35      	ldr	r3, [pc, #212]	; (80035d0 <HAL_RCC_OscConfig+0xe38>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003504:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6a19      	ldr	r1, [r3, #32]
 800350c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003510:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	430b      	orrs	r3, r1
 800351a:	492d      	ldr	r1, [pc, #180]	; (80035d0 <HAL_RCC_OscConfig+0xe38>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
 8003520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003524:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003528:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800352c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003532:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	fa93 f2a3 	rbit	r2, r3
 800353c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003540:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003544:	601a      	str	r2, [r3, #0]
  return result;
 8003546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800354a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800354e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800355a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	461a      	mov	r2, r3
 8003562:	2301      	movs	r3, #1
 8003564:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003566:	f7fe fe3f 	bl	80021e8 <HAL_GetTick>
 800356a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800356e:	e009      	b.n	8003584 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe fe3a 	bl	80021e8 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e156      	b.n	8003832 <HAL_RCC_OscConfig+0x109a>
 8003584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003588:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800358c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003596:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	fa93 f2a3 	rbit	r2, r3
 80035a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035a8:	601a      	str	r2, [r3, #0]
  return result;
 80035aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <HAL_RCC_OscConfig+0xe3c>
 80035c8:	4b01      	ldr	r3, [pc, #4]	; (80035d0 <HAL_RCC_OscConfig+0xe38>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	e02a      	b.n	8003624 <HAL_RCC_OscConfig+0xe8c>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80035dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	fa93 f2a3 	rbit	r2, r3
 80035f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035f4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003602:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800360c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	fa93 f2a3 	rbit	r2, r3
 8003616:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800361a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	4b86      	ldr	r3, [pc, #536]	; (800383c <HAL_RCC_OscConfig+0x10a4>)
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003628:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800362c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003630:	6011      	str	r1, [r2, #0]
 8003632:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003636:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	fa92 f1a2 	rbit	r1, r2
 8003640:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003644:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003648:	6011      	str	r1, [r2, #0]
  return result;
 800364a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800364e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	fab2 f282 	clz	r2, r2
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	f042 0220 	orr.w	r2, r2, #32
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	f002 021f 	and.w	r2, r2, #31
 8003664:	2101      	movs	r1, #1
 8003666:	fa01 f202 	lsl.w	r2, r1, r2
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	f43f af7f 	beq.w	8003570 <HAL_RCC_OscConfig+0xdd8>
 8003672:	e0dd      	b.n	8003830 <HAL_RCC_OscConfig+0x1098>
 8003674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003678:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800367c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003686:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	fa93 f2a3 	rbit	r2, r3
 8003690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003694:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003698:	601a      	str	r2, [r3, #0]
  return result;
 800369a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800369e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036a2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a4:	fab3 f383 	clz	r3, r3
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	461a      	mov	r2, r3
 80036b6:	2300      	movs	r3, #0
 80036b8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fe fd95 	bl	80021e8 <HAL_GetTick>
 80036be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c2:	e009      	b.n	80036d8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fe fd90 	bl	80021e8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e0ac      	b.n	8003832 <HAL_RCC_OscConfig+0x109a>
 80036d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	fa93 f2a3 	rbit	r2, r3
 80036f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036fc:	601a      	str	r2, [r3, #0]
  return result;
 80036fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003702:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003706:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d102      	bne.n	8003722 <HAL_RCC_OscConfig+0xf8a>
 800371c:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_OscConfig+0x10a4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	e027      	b.n	8003772 <HAL_RCC_OscConfig+0xfda>
 8003722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003726:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800372a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800372e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003734:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	fa93 f2a3 	rbit	r2, r3
 800373e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003742:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800374c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	fa93 f2a3 	rbit	r2, r3
 8003764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003768:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	4b33      	ldr	r3, [pc, #204]	; (800383c <HAL_RCC_OscConfig+0x10a4>)
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003776:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800377a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800377e:	6011      	str	r1, [r2, #0]
 8003780:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003784:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	fa92 f1a2 	rbit	r1, r2
 800378e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003792:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003796:	6011      	str	r1, [r2, #0]
  return result;
 8003798:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800379c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	fab2 f282 	clz	r2, r2
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	f042 0220 	orr.w	r2, r2, #32
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	f002 021f 	and.w	r2, r2, #31
 80037b2:	2101      	movs	r1, #1
 80037b4:	fa01 f202 	lsl.w	r2, r1, r2
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d182      	bne.n	80036c4 <HAL_RCC_OscConfig+0xf2c>
 80037be:	e037      	b.n	8003830 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e02e      	b.n	8003832 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_RCC_OscConfig+0x10a4>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80037dc:	4b17      	ldr	r3, [pc, #92]	; (800383c <HAL_RCC_OscConfig+0x10a4>)
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037e8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80037ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d117      	bne.n	800382c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80037fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003800:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003808:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003810:	429a      	cmp	r2, r3
 8003812:	d10b      	bne.n	800382c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003818:	f003 020f 	and.w	r2, r3, #15
 800381c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003820:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000

08003840 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b09e      	sub	sp, #120	; 0x78
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e162      	b.n	8003b1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003858:	4b90      	ldr	r3, [pc, #576]	; (8003a9c <HAL_RCC_ClockConfig+0x25c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d910      	bls.n	8003888 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b8d      	ldr	r3, [pc, #564]	; (8003a9c <HAL_RCC_ClockConfig+0x25c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 0207 	bic.w	r2, r3, #7
 800386e:	498b      	ldr	r1, [pc, #556]	; (8003a9c <HAL_RCC_ClockConfig+0x25c>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b89      	ldr	r3, [pc, #548]	; (8003a9c <HAL_RCC_ClockConfig+0x25c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e14a      	b.n	8003b1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b82      	ldr	r3, [pc, #520]	; (8003aa0 <HAL_RCC_ClockConfig+0x260>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	497f      	ldr	r1, [pc, #508]	; (8003aa0 <HAL_RCC_ClockConfig+0x260>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80dc 	beq.w	8003a6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d13c      	bne.n	8003936 <HAL_RCC_ClockConfig+0xf6>
 80038bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038cc:	fab3 f383 	clz	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d102      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xa6>
 80038e0:	4b6f      	ldr	r3, [pc, #444]	; (8003aa0 <HAL_RCC_ClockConfig+0x260>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	e00f      	b.n	8003906 <HAL_RCC_ClockConfig+0xc6>
 80038e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	667b      	str	r3, [r7, #100]	; 0x64
 80038f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038f8:	663b      	str	r3, [r7, #96]	; 0x60
 80038fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003902:	4b67      	ldr	r3, [pc, #412]	; (8003aa0 <HAL_RCC_ClockConfig+0x260>)
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800390a:	65ba      	str	r2, [r7, #88]	; 0x58
 800390c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800390e:	fa92 f2a2 	rbit	r2, r2
 8003912:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003916:	fab2 f282 	clz	r2, r2
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	f042 0220 	orr.w	r2, r2, #32
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	f002 021f 	and.w	r2, r2, #31
 8003926:	2101      	movs	r1, #1
 8003928:	fa01 f202 	lsl.w	r2, r1, r2
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d17b      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e0f3      	b.n	8003b1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d13c      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x178>
 800393e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003942:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003946:	fa93 f3a3 	rbit	r3, r3
 800394a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800394c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d102      	bne.n	8003968 <HAL_RCC_ClockConfig+0x128>
 8003962:	4b4f      	ldr	r3, [pc, #316]	; (8003aa0 <HAL_RCC_ClockConfig+0x260>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	e00f      	b.n	8003988 <HAL_RCC_ClockConfig+0x148>
 8003968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	647b      	str	r3, [r7, #68]	; 0x44
 8003976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800397a:	643b      	str	r3, [r7, #64]	; 0x40
 800397c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003984:	4b46      	ldr	r3, [pc, #280]	; (8003aa0 <HAL_RCC_ClockConfig+0x260>)
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800398c:	63ba      	str	r2, [r7, #56]	; 0x38
 800398e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003990:	fa92 f2a2 	rbit	r2, r2
 8003994:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003998:	fab2 f282 	clz	r2, r2
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	f042 0220 	orr.w	r2, r2, #32
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	f002 021f 	and.w	r2, r2, #31
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f202 	lsl.w	r2, r1, r2
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d13a      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0b2      	b.n	8003b1e <HAL_RCC_ClockConfig+0x2de>
 80039b8:	2302      	movs	r3, #2
 80039ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d102      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x1a0>
 80039da:	4b31      	ldr	r3, [pc, #196]	; (8003aa0 <HAL_RCC_ClockConfig+0x260>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	e00d      	b.n	80039fc <HAL_RCC_ClockConfig+0x1bc>
 80039e0:	2302      	movs	r3, #2
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	2302      	movs	r3, #2
 80039ee:	623b      	str	r3, [r7, #32]
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <HAL_RCC_ClockConfig+0x260>)
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	2202      	movs	r2, #2
 80039fe:	61ba      	str	r2, [r7, #24]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	fa92 f2a2 	rbit	r2, r2
 8003a06:	617a      	str	r2, [r7, #20]
  return result;
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	fab2 f282 	clz	r2, r2
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	f042 0220 	orr.w	r2, r2, #32
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	f002 021f 	and.w	r2, r2, #31
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e079      	b.n	8003b1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_RCC_ClockConfig+0x260>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f023 0203 	bic.w	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	491a      	ldr	r1, [pc, #104]	; (8003aa0 <HAL_RCC_ClockConfig+0x260>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a3c:	f7fe fbd4 	bl	80021e8 <HAL_GetTick>
 8003a40:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a44:	f7fe fbd0 	bl	80021e8 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e061      	b.n	8003b1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 020c 	and.w	r2, r3, #12
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d1eb      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_ClockConfig+0x25c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d214      	bcs.n	8003aa4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_RCC_ClockConfig+0x25c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 0207 	bic.w	r2, r3, #7
 8003a82:	4906      	ldr	r1, [pc, #24]	; (8003a9c <HAL_RCC_ClockConfig+0x25c>)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <HAL_RCC_ClockConfig+0x25c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e040      	b.n	8003b1e <HAL_RCC_ClockConfig+0x2de>
 8003a9c:	40022000 	.word	0x40022000
 8003aa0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCC_ClockConfig+0x2e8>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	491a      	ldr	r1, [pc, #104]	; (8003b28 <HAL_RCC_ClockConfig+0x2e8>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ace:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <HAL_RCC_ClockConfig+0x2e8>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4912      	ldr	r1, [pc, #72]	; (8003b28 <HAL_RCC_ClockConfig+0x2e8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ae2:	f000 f829 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4601      	mov	r1, r0
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <HAL_RCC_ClockConfig+0x2e8>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af0:	22f0      	movs	r2, #240	; 0xf0
 8003af2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	fa92 f2a2 	rbit	r2, r2
 8003afa:	60fa      	str	r2, [r7, #12]
  return result;
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	fab2 f282 	clz	r2, r2
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	40d3      	lsrs	r3, r2
 8003b06:	4a09      	ldr	r2, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x2ec>)
 8003b08:	5cd3      	ldrb	r3, [r2, r3]
 8003b0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b0e:	4a08      	ldr	r2, [pc, #32]	; (8003b30 <HAL_RCC_ClockConfig+0x2f0>)
 8003b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b12:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <HAL_RCC_ClockConfig+0x2f4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fb22 	bl	8002160 <HAL_InitTick>
  
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3778      	adds	r7, #120	; 0x78
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	08006288 	.word	0x08006288
 8003b30:	20000000 	.word	0x20000000
 8003b34:	20000004 	.word	0x20000004

08003b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b08b      	sub	sp, #44	; 0x2c
 8003b3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	2300      	movs	r3, #0
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b52:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d002      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x30>
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d003      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0x36>
 8003b66:	e03f      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b68:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b6a:	623b      	str	r3, [r7, #32]
      break;
 8003b6c:	e03f      	b.n	8003bee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b74:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b78:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	fa92 f2a2 	rbit	r2, r2
 8003b80:	607a      	str	r2, [r7, #4]
  return result;
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	fab2 f282 	clz	r2, r2
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	40d3      	lsrs	r3, r2
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b8e:	5cd3      	ldrb	r3, [r2, r3]
 8003b90:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b92:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	fa92 f2a2 	rbit	r2, r2
 8003ba4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	fab2 f282 	clz	r2, r2
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	40d3      	lsrs	r3, r2
 8003bb0:	4a15      	ldr	r2, [pc, #84]	; (8003c08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003bb2:	5cd3      	ldrb	r3, [r2, r3]
 8003bb4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bc0:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd0:	e007      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bd2:	4a0b      	ldr	r2, [pc, #44]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	623b      	str	r3, [r7, #32]
      break;
 8003be6:	e002      	b.n	8003bee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bea:	623b      	str	r3, [r7, #32]
      break;
 8003bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bee:	6a3b      	ldr	r3, [r7, #32]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	372c      	adds	r7, #44	; 0x2c
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	007a1200 	.word	0x007a1200
 8003c04:	080062a0 	.word	0x080062a0
 8003c08:	080062b0 	.word	0x080062b0

08003c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c12:	681b      	ldr	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000000 	.word	0x20000000

08003c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c2a:	f7ff ffef 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c2e:	4601      	mov	r1, r0
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c38:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	fa92 f2a2 	rbit	r2, r2
 8003c44:	603a      	str	r2, [r7, #0]
  return result;
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	fab2 f282 	clz	r2, r2
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	40d3      	lsrs	r3, r2
 8003c50:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c52:	5cd3      	ldrb	r3, [r2, r3]
 8003c54:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000
 8003c64:	08006298 	.word	0x08006298

08003c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c6e:	f7ff ffcd 	bl	8003c0c <HAL_RCC_GetHCLKFreq>
 8003c72:	4601      	mov	r1, r0
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	fa92 f2a2 	rbit	r2, r2
 8003c88:	603a      	str	r2, [r7, #0]
  return result;
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	fab2 f282 	clz	r2, r2
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	40d3      	lsrs	r3, r2
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c96:	5cd3      	ldrb	r3, [r2, r3]
 8003c98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	08006298 	.word	0x08006298

08003cac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b092      	sub	sp, #72	; 0x48
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 80d4 	beq.w	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd0:	4b4e      	ldr	r3, [pc, #312]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10e      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cdc:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	4a4a      	ldr	r2, [pc, #296]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	61d3      	str	r3, [r2, #28]
 8003ce8:	4b48      	ldr	r3, [pc, #288]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfa:	4b45      	ldr	r3, [pc, #276]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d118      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d06:	4b42      	ldr	r3, [pc, #264]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a41      	ldr	r2, [pc, #260]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d12:	f7fe fa69 	bl	80021e8 <HAL_GetTick>
 8003d16:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d18:	e008      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1a:	f7fe fa65 	bl	80021e8 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b64      	cmp	r3, #100	; 0x64
 8003d26:	d901      	bls.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1d6      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2c:	4b38      	ldr	r3, [pc, #224]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d38:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8084 	beq.w	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d07c      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d58:	4b2c      	ldr	r3, [pc, #176]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b26      	ldr	r3, [pc, #152]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	461a      	mov	r2, r3
 8003d82:	2301      	movs	r3, #1
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d96:	fab3 f383 	clz	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	461a      	mov	r2, r3
 8003da6:	2300      	movs	r3, #0
 8003da8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003daa:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d04b      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fe fa15 	bl	80021e8 <HAL_GetTick>
 8003dbe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fe fa11 	bl	80021e8 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e180      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
 8003de4:	2302      	movs	r3, #2
 8003de6:	623b      	str	r3, [r7, #32]
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	61fb      	str	r3, [r7, #28]
  return result;
 8003df0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f043 0302 	orr.w	r3, r3, #2
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d108      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e06:	4b01      	ldr	r3, [pc, #4]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	e00d      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40007000 	.word	0x40007000
 8003e14:	10908100 	.word	0x10908100
 8003e18:	2302      	movs	r3, #2
 8003e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	4b9a      	ldr	r3, [pc, #616]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	2202      	movs	r2, #2
 8003e2a:	613a      	str	r2, [r7, #16]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	fa92 f2a2 	rbit	r2, r2
 8003e32:	60fa      	str	r2, [r7, #12]
  return result;
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	fab2 f282 	clz	r2, r2
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	f002 021f 	and.w	r2, r2, #31
 8003e46:	2101      	movs	r1, #1
 8003e48:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0b7      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e52:	4b8f      	ldr	r3, [pc, #572]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	498c      	ldr	r1, [pc, #560]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b88      	ldr	r3, [pc, #544]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	4a87      	ldr	r2, [pc, #540]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e84:	4b82      	ldr	r3, [pc, #520]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	f023 0203 	bic.w	r2, r3, #3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	497f      	ldr	r1, [pc, #508]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ea2:	4b7b      	ldr	r3, [pc, #492]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	4978      	ldr	r1, [pc, #480]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ec0:	4b73      	ldr	r3, [pc, #460]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	4970      	ldr	r1, [pc, #448]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ede:	4b6c      	ldr	r3, [pc, #432]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	f023 0210 	bic.w	r2, r3, #16
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	4969      	ldr	r1, [pc, #420]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003efc:	4b64      	ldr	r3, [pc, #400]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	4961      	ldr	r1, [pc, #388]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f1a:	4b5d      	ldr	r3, [pc, #372]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f023 0220 	bic.w	r2, r3, #32
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	495a      	ldr	r1, [pc, #360]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f38:	4b55      	ldr	r3, [pc, #340]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	4952      	ldr	r1, [pc, #328]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f56:	4b4e      	ldr	r3, [pc, #312]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	494b      	ldr	r1, [pc, #300]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f74:	4b46      	ldr	r3, [pc, #280]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4943      	ldr	r1, [pc, #268]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	493c      	ldr	r1, [pc, #240]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fb0:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	4934      	ldr	r1, [pc, #208]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003fce:	4b30      	ldr	r3, [pc, #192]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	492d      	ldr	r1, [pc, #180]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003fec:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff8:	4925      	ldr	r1, [pc, #148]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800400a:	4b21      	ldr	r3, [pc, #132]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	491e      	ldr	r1, [pc, #120]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004018:	4313      	orrs	r3, r2
 800401a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	4916      	ldr	r1, [pc, #88]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004036:	4313      	orrs	r3, r2
 8004038:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004052:	490f      	ldr	r1, [pc, #60]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004054:	4313      	orrs	r3, r2
 8004056:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004070:	4907      	ldr	r1, [pc, #28]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00c      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004082:	4b03      	ldr	r3, [pc, #12]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	e002      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
 8004094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004096:	4913      	ldr	r1, [pc, #76]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004098:	4313      	orrs	r3, r2
 800409a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80040a8:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b4:	490b      	ldr	r1, [pc, #44]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80040c6:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d2:	4904      	ldr	r1, [pc, #16]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3748      	adds	r7, #72	; 0x48
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000

080040e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e054      	b.n	80041a4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d111      	bne.n	800412a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f001 f87a 	bl	8005208 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a23      	ldr	r2, [pc, #140]	; (80041ac <HAL_TIM_PWM_Init+0xc4>)
 8004120:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3304      	adds	r3, #4
 800413a:	4619      	mov	r1, r3
 800413c:	4610      	mov	r0, r2
 800413e:	f000 fc99 	bl	8004a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	08001ef9 	.word	0x08001ef9

080041b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <HAL_TIM_PWM_Start+0x24>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2300      	moveq	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e03c      	b.n	800424e <HAL_TIM_PWM_Start+0x9e>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d109      	bne.n	80041ee <HAL_TIM_PWM_Start+0x3e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	bf14      	ite	ne
 80041e6:	2301      	movne	r3, #1
 80041e8:	2300      	moveq	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	e02f      	b.n	800424e <HAL_TIM_PWM_Start+0x9e>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d109      	bne.n	8004208 <HAL_TIM_PWM_Start+0x58>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e022      	b.n	800424e <HAL_TIM_PWM_Start+0x9e>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d109      	bne.n	8004222 <HAL_TIM_PWM_Start+0x72>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	bf14      	ite	ne
 800421a:	2301      	movne	r3, #1
 800421c:	2300      	moveq	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	e015      	b.n	800424e <HAL_TIM_PWM_Start+0x9e>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b10      	cmp	r3, #16
 8004226:	d109      	bne.n	800423c <HAL_TIM_PWM_Start+0x8c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	e008      	b.n	800424e <HAL_TIM_PWM_Start+0x9e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e0a1      	b.n	800439a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Start+0xb6>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004264:	e023      	b.n	80042ae <HAL_TIM_PWM_Start+0xfe>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d104      	bne.n	8004276 <HAL_TIM_PWM_Start+0xc6>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004274:	e01b      	b.n	80042ae <HAL_TIM_PWM_Start+0xfe>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d104      	bne.n	8004286 <HAL_TIM_PWM_Start+0xd6>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004284:	e013      	b.n	80042ae <HAL_TIM_PWM_Start+0xfe>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b0c      	cmp	r3, #12
 800428a:	d104      	bne.n	8004296 <HAL_TIM_PWM_Start+0xe6>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004294:	e00b      	b.n	80042ae <HAL_TIM_PWM_Start+0xfe>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b10      	cmp	r3, #16
 800429a:	d104      	bne.n	80042a6 <HAL_TIM_PWM_Start+0xf6>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042a4:	e003      	b.n	80042ae <HAL_TIM_PWM_Start+0xfe>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2202      	movs	r2, #2
 80042aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2201      	movs	r2, #1
 80042b4:	6839      	ldr	r1, [r7, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 ff80 	bl	80051bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a38      	ldr	r2, [pc, #224]	; (80043a4 <HAL_TIM_PWM_Start+0x1f4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d018      	beq.n	80042f8 <HAL_TIM_PWM_Start+0x148>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a37      	ldr	r2, [pc, #220]	; (80043a8 <HAL_TIM_PWM_Start+0x1f8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d013      	beq.n	80042f8 <HAL_TIM_PWM_Start+0x148>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a35      	ldr	r2, [pc, #212]	; (80043ac <HAL_TIM_PWM_Start+0x1fc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00e      	beq.n	80042f8 <HAL_TIM_PWM_Start+0x148>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a34      	ldr	r2, [pc, #208]	; (80043b0 <HAL_TIM_PWM_Start+0x200>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_TIM_PWM_Start+0x148>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a32      	ldr	r2, [pc, #200]	; (80043b4 <HAL_TIM_PWM_Start+0x204>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_TIM_PWM_Start+0x148>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a31      	ldr	r2, [pc, #196]	; (80043b8 <HAL_TIM_PWM_Start+0x208>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d101      	bne.n	80042fc <HAL_TIM_PWM_Start+0x14c>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_TIM_PWM_Start+0x14e>
 80042fc:	2300      	movs	r3, #0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004310:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a23      	ldr	r2, [pc, #140]	; (80043a4 <HAL_TIM_PWM_Start+0x1f4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d01d      	beq.n	8004358 <HAL_TIM_PWM_Start+0x1a8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d018      	beq.n	8004358 <HAL_TIM_PWM_Start+0x1a8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a24      	ldr	r2, [pc, #144]	; (80043bc <HAL_TIM_PWM_Start+0x20c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d013      	beq.n	8004358 <HAL_TIM_PWM_Start+0x1a8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a22      	ldr	r2, [pc, #136]	; (80043c0 <HAL_TIM_PWM_Start+0x210>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00e      	beq.n	8004358 <HAL_TIM_PWM_Start+0x1a8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1a      	ldr	r2, [pc, #104]	; (80043a8 <HAL_TIM_PWM_Start+0x1f8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d009      	beq.n	8004358 <HAL_TIM_PWM_Start+0x1a8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a18      	ldr	r2, [pc, #96]	; (80043ac <HAL_TIM_PWM_Start+0x1fc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d004      	beq.n	8004358 <HAL_TIM_PWM_Start+0x1a8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <HAL_TIM_PWM_Start+0x208>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d115      	bne.n	8004384 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_TIM_PWM_Start+0x214>)
 8004360:	4013      	ands	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b06      	cmp	r3, #6
 8004368:	d015      	beq.n	8004396 <HAL_TIM_PWM_Start+0x1e6>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004370:	d011      	beq.n	8004396 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004382:	e008      	b.n	8004396 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	e000      	b.n	8004398 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	40013400 	.word	0x40013400
 80043ac:	40014000 	.word	0x40014000
 80043b0:	40014400 	.word	0x40014400
 80043b4:	40014800 	.word	0x40014800
 80043b8:	40015000 	.word	0x40015000
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800
 80043c4:	00010007 	.word	0x00010007

080043c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2200      	movs	r2, #0
 80043d8:	6839      	ldr	r1, [r7, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 feee 	bl	80051bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a40      	ldr	r2, [pc, #256]	; (80044e8 <HAL_TIM_PWM_Stop+0x120>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d018      	beq.n	800441c <HAL_TIM_PWM_Stop+0x54>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a3f      	ldr	r2, [pc, #252]	; (80044ec <HAL_TIM_PWM_Stop+0x124>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <HAL_TIM_PWM_Stop+0x54>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a3d      	ldr	r2, [pc, #244]	; (80044f0 <HAL_TIM_PWM_Stop+0x128>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00e      	beq.n	800441c <HAL_TIM_PWM_Stop+0x54>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a3c      	ldr	r2, [pc, #240]	; (80044f4 <HAL_TIM_PWM_Stop+0x12c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d009      	beq.n	800441c <HAL_TIM_PWM_Stop+0x54>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a3a      	ldr	r2, [pc, #232]	; (80044f8 <HAL_TIM_PWM_Stop+0x130>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <HAL_TIM_PWM_Stop+0x54>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a39      	ldr	r2, [pc, #228]	; (80044fc <HAL_TIM_PWM_Stop+0x134>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d101      	bne.n	8004420 <HAL_TIM_PWM_Stop+0x58>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <HAL_TIM_PWM_Stop+0x5a>
 8004420:	2300      	movs	r3, #0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d017      	beq.n	8004456 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6a1a      	ldr	r2, [r3, #32]
 800442c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <HAL_TIM_PWM_Stop+0x8e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6a1a      	ldr	r2, [r3, #32]
 800443c:	f240 4344 	movw	r3, #1092	; 0x444
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <HAL_TIM_PWM_Stop+0x8e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004454:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10f      	bne.n	8004486 <HAL_TIM_PWM_Stop+0xbe>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6a1a      	ldr	r2, [r3, #32]
 800446c:	f240 4344 	movw	r3, #1092	; 0x444
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d107      	bne.n	8004486 <HAL_TIM_PWM_Stop+0xbe>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0201 	bic.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <HAL_TIM_PWM_Stop+0xce>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004494:	e023      	b.n	80044de <HAL_TIM_PWM_Stop+0x116>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b04      	cmp	r3, #4
 800449a:	d104      	bne.n	80044a6 <HAL_TIM_PWM_Stop+0xde>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a4:	e01b      	b.n	80044de <HAL_TIM_PWM_Stop+0x116>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_PWM_Stop+0xee>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b4:	e013      	b.n	80044de <HAL_TIM_PWM_Stop+0x116>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d104      	bne.n	80044c6 <HAL_TIM_PWM_Stop+0xfe>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044c4:	e00b      	b.n	80044de <HAL_TIM_PWM_Stop+0x116>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d104      	bne.n	80044d6 <HAL_TIM_PWM_Stop+0x10e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044d4:	e003      	b.n	80044de <HAL_TIM_PWM_Stop+0x116>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40013400 	.word	0x40013400
 80044f0:	40014000 	.word	0x40014000
 80044f4:	40014400 	.word	0x40014400
 80044f8:	40014800 	.word	0x40014800
 80044fc:	40015000 	.word	0x40015000

08004500 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0a2      	b.n	800465a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d111      	bne.n	8004544 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fe6d 	bl	8005208 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a4a      	ldr	r2, [pc, #296]	; (8004664 <HAL_TIM_Encoder_Init+0x164>)
 800453a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800455a:	f023 0307 	bic.w	r3, r3, #7
 800455e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3304      	adds	r3, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f000 fa82 	bl	8004a74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004598:	f023 0303 	bic.w	r3, r3, #3
 800459c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	4313      	orrs	r3, r2
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045b6:	f023 030c 	bic.w	r3, r3, #12
 80045ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	4313      	orrs	r3, r2
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	011a      	lsls	r2, r3, #4
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	031b      	lsls	r3, r3, #12
 80045e6:	4313      	orrs	r3, r2
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045f4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80045fc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	4313      	orrs	r3, r2
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	08001e39 	.word	0x08001e39

08004668 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004678:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004680:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004688:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004690:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d110      	bne.n	80046ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d102      	bne.n	80046a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800469e:	7b7b      	ldrb	r3, [r7, #13]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d001      	beq.n	80046a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e069      	b.n	800477c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b8:	e031      	b.n	800471e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d110      	bne.n	80046e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046c0:	7bbb      	ldrb	r3, [r7, #14]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d102      	bne.n	80046cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046c6:	7b3b      	ldrb	r3, [r7, #12]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d001      	beq.n	80046d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e055      	b.n	800477c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046e0:	e01d      	b.n	800471e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d108      	bne.n	80046fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046e8:	7bbb      	ldrb	r3, [r7, #14]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d105      	bne.n	80046fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ee:	7b7b      	ldrb	r3, [r7, #13]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d102      	bne.n	80046fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046f4:	7b3b      	ldrb	r3, [r7, #12]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d001      	beq.n	80046fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e03e      	b.n	800477c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_TIM_Encoder_Start+0xc4>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b04      	cmp	r3, #4
 8004728:	d008      	beq.n	800473c <HAL_TIM_Encoder_Start+0xd4>
 800472a:	e00f      	b.n	800474c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fd41 	bl	80051bc <TIM_CCxChannelCmd>
      break;
 800473a:	e016      	b.n	800476a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2201      	movs	r2, #1
 8004742:	2104      	movs	r1, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fd39 	bl	80051bc <TIM_CCxChannelCmd>
      break;
 800474a:	e00e      	b.n	800476a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2201      	movs	r2, #1
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fd31 	bl	80051bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2201      	movs	r2, #1
 8004760:	2104      	movs	r1, #4
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fd2a 	bl	80051bc <TIM_CCxChannelCmd>
      break;
 8004768:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800479e:	2302      	movs	r3, #2
 80047a0:	e0ff      	b.n	80049a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b14      	cmp	r3, #20
 80047ae:	f200 80f0 	bhi.w	8004992 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047b2:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b8:	0800480d 	.word	0x0800480d
 80047bc:	08004993 	.word	0x08004993
 80047c0:	08004993 	.word	0x08004993
 80047c4:	08004993 	.word	0x08004993
 80047c8:	0800484d 	.word	0x0800484d
 80047cc:	08004993 	.word	0x08004993
 80047d0:	08004993 	.word	0x08004993
 80047d4:	08004993 	.word	0x08004993
 80047d8:	0800488f 	.word	0x0800488f
 80047dc:	08004993 	.word	0x08004993
 80047e0:	08004993 	.word	0x08004993
 80047e4:	08004993 	.word	0x08004993
 80047e8:	080048cf 	.word	0x080048cf
 80047ec:	08004993 	.word	0x08004993
 80047f0:	08004993 	.word	0x08004993
 80047f4:	08004993 	.word	0x08004993
 80047f8:	08004911 	.word	0x08004911
 80047fc:	08004993 	.word	0x08004993
 8004800:	08004993 	.word	0x08004993
 8004804:	08004993 	.word	0x08004993
 8004808:	08004951 	.word	0x08004951
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f9cc 	bl	8004bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0208 	orr.w	r2, r2, #8
 8004826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0204 	bic.w	r2, r2, #4
 8004836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6999      	ldr	r1, [r3, #24]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	619a      	str	r2, [r3, #24]
      break;
 800484a:	e0a5      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fa46 	bl	8004ce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6999      	ldr	r1, [r3, #24]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	619a      	str	r2, [r3, #24]
      break;
 800488c:	e084      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fab9 	bl	8004e0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69da      	ldr	r2, [r3, #28]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0208 	orr.w	r2, r2, #8
 80048a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0204 	bic.w	r2, r2, #4
 80048b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69d9      	ldr	r1, [r3, #28]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	61da      	str	r2, [r3, #28]
      break;
 80048cc:	e064      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fb2b 	bl	8004f30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69d9      	ldr	r1, [r3, #28]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	021a      	lsls	r2, r3, #8
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	61da      	str	r2, [r3, #28]
      break;
 800490e:	e043      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fb7a 	bl	8005010 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0208 	orr.w	r2, r2, #8
 800492a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0204 	bic.w	r2, r2, #4
 800493a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800494e:	e023      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fbc4 	bl	80050e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800496a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	021a      	lsls	r2, r3, #8
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004990:	e002      	b.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	75fb      	strb	r3, [r7, #23]
      break;
 8004996:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop

080049ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a42      	ldr	r2, [pc, #264]	; (8004b90 <TIM_Base_SetConfig+0x11c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a92:	d00f      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a3f      	ldr	r2, [pc, #252]	; (8004b94 <TIM_Base_SetConfig+0x120>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00b      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a3e      	ldr	r2, [pc, #248]	; (8004b98 <TIM_Base_SetConfig+0x124>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d007      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a3d      	ldr	r2, [pc, #244]	; (8004b9c <TIM_Base_SetConfig+0x128>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a3c      	ldr	r2, [pc, #240]	; (8004ba0 <TIM_Base_SetConfig+0x12c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d108      	bne.n	8004ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a31      	ldr	r2, [pc, #196]	; (8004b90 <TIM_Base_SetConfig+0x11c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01f      	beq.n	8004b0e <TIM_Base_SetConfig+0x9a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad4:	d01b      	beq.n	8004b0e <TIM_Base_SetConfig+0x9a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a2e      	ldr	r2, [pc, #184]	; (8004b94 <TIM_Base_SetConfig+0x120>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d017      	beq.n	8004b0e <TIM_Base_SetConfig+0x9a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a2d      	ldr	r2, [pc, #180]	; (8004b98 <TIM_Base_SetConfig+0x124>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d013      	beq.n	8004b0e <TIM_Base_SetConfig+0x9a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2c      	ldr	r2, [pc, #176]	; (8004b9c <TIM_Base_SetConfig+0x128>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00f      	beq.n	8004b0e <TIM_Base_SetConfig+0x9a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2c      	ldr	r2, [pc, #176]	; (8004ba4 <TIM_Base_SetConfig+0x130>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00b      	beq.n	8004b0e <TIM_Base_SetConfig+0x9a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2b      	ldr	r2, [pc, #172]	; (8004ba8 <TIM_Base_SetConfig+0x134>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d007      	beq.n	8004b0e <TIM_Base_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2a      	ldr	r2, [pc, #168]	; (8004bac <TIM_Base_SetConfig+0x138>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d003      	beq.n	8004b0e <TIM_Base_SetConfig+0x9a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a25      	ldr	r2, [pc, #148]	; (8004ba0 <TIM_Base_SetConfig+0x12c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d108      	bne.n	8004b20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a12      	ldr	r2, [pc, #72]	; (8004b90 <TIM_Base_SetConfig+0x11c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <TIM_Base_SetConfig+0x100>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <TIM_Base_SetConfig+0x128>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00f      	beq.n	8004b74 <TIM_Base_SetConfig+0x100>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <TIM_Base_SetConfig+0x130>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00b      	beq.n	8004b74 <TIM_Base_SetConfig+0x100>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a12      	ldr	r2, [pc, #72]	; (8004ba8 <TIM_Base_SetConfig+0x134>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <TIM_Base_SetConfig+0x100>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a11      	ldr	r2, [pc, #68]	; (8004bac <TIM_Base_SetConfig+0x138>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <TIM_Base_SetConfig+0x100>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <TIM_Base_SetConfig+0x12c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d103      	bne.n	8004b7c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	615a      	str	r2, [r3, #20]
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	40013400 	.word	0x40013400
 8004ba0:	40015000 	.word	0x40015000
 8004ba4:	40014000 	.word	0x40014000
 8004ba8:	40014400 	.word	0x40014400
 8004bac:	40014800 	.word	0x40014800

08004bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f023 0201 	bic.w	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 0302 	bic.w	r3, r3, #2
 8004bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a30      	ldr	r2, [pc, #192]	; (8004ccc <TIM_OC1_SetConfig+0x11c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d013      	beq.n	8004c38 <TIM_OC1_SetConfig+0x88>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a2f      	ldr	r2, [pc, #188]	; (8004cd0 <TIM_OC1_SetConfig+0x120>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00f      	beq.n	8004c38 <TIM_OC1_SetConfig+0x88>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a2e      	ldr	r2, [pc, #184]	; (8004cd4 <TIM_OC1_SetConfig+0x124>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00b      	beq.n	8004c38 <TIM_OC1_SetConfig+0x88>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a2d      	ldr	r2, [pc, #180]	; (8004cd8 <TIM_OC1_SetConfig+0x128>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d007      	beq.n	8004c38 <TIM_OC1_SetConfig+0x88>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a2c      	ldr	r2, [pc, #176]	; (8004cdc <TIM_OC1_SetConfig+0x12c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <TIM_OC1_SetConfig+0x88>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a2b      	ldr	r2, [pc, #172]	; (8004ce0 <TIM_OC1_SetConfig+0x130>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d10c      	bne.n	8004c52 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f023 0308 	bic.w	r3, r3, #8
 8004c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f023 0304 	bic.w	r3, r3, #4
 8004c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <TIM_OC1_SetConfig+0x11c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <TIM_OC1_SetConfig+0xd2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a1c      	ldr	r2, [pc, #112]	; (8004cd0 <TIM_OC1_SetConfig+0x120>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00f      	beq.n	8004c82 <TIM_OC1_SetConfig+0xd2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a1b      	ldr	r2, [pc, #108]	; (8004cd4 <TIM_OC1_SetConfig+0x124>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00b      	beq.n	8004c82 <TIM_OC1_SetConfig+0xd2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a1a      	ldr	r2, [pc, #104]	; (8004cd8 <TIM_OC1_SetConfig+0x128>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d007      	beq.n	8004c82 <TIM_OC1_SetConfig+0xd2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <TIM_OC1_SetConfig+0x12c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <TIM_OC1_SetConfig+0xd2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <TIM_OC1_SetConfig+0x130>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d111      	bne.n	8004ca6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	621a      	str	r2, [r3, #32]
}
 8004cc0:	bf00      	nop
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40013400 	.word	0x40013400
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40014400 	.word	0x40014400
 8004cdc:	40014800 	.word	0x40014800
 8004ce0:	40015000 	.word	0x40015000

08004ce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f023 0210 	bic.w	r2, r3, #16
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f023 0320 	bic.w	r3, r3, #32
 8004d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a2c      	ldr	r2, [pc, #176]	; (8004df4 <TIM_OC2_SetConfig+0x110>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d007      	beq.n	8004d58 <TIM_OC2_SetConfig+0x74>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a2b      	ldr	r2, [pc, #172]	; (8004df8 <TIM_OC2_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_OC2_SetConfig+0x74>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a2a      	ldr	r2, [pc, #168]	; (8004dfc <TIM_OC2_SetConfig+0x118>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d10d      	bne.n	8004d74 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a1f      	ldr	r2, [pc, #124]	; (8004df4 <TIM_OC2_SetConfig+0x110>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <TIM_OC2_SetConfig+0xc0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a1e      	ldr	r2, [pc, #120]	; (8004df8 <TIM_OC2_SetConfig+0x114>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00f      	beq.n	8004da4 <TIM_OC2_SetConfig+0xc0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a1e      	ldr	r2, [pc, #120]	; (8004e00 <TIM_OC2_SetConfig+0x11c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00b      	beq.n	8004da4 <TIM_OC2_SetConfig+0xc0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a1d      	ldr	r2, [pc, #116]	; (8004e04 <TIM_OC2_SetConfig+0x120>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d007      	beq.n	8004da4 <TIM_OC2_SetConfig+0xc0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a1c      	ldr	r2, [pc, #112]	; (8004e08 <TIM_OC2_SetConfig+0x124>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_OC2_SetConfig+0xc0>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <TIM_OC2_SetConfig+0x118>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d113      	bne.n	8004dcc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004daa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40012c00 	.word	0x40012c00
 8004df8:	40013400 	.word	0x40013400
 8004dfc:	40015000 	.word	0x40015000
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40014400 	.word	0x40014400
 8004e08:	40014800 	.word	0x40014800

08004e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2b      	ldr	r2, [pc, #172]	; (8004f18 <TIM_OC3_SetConfig+0x10c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d007      	beq.n	8004e7e <TIM_OC3_SetConfig+0x72>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2a      	ldr	r2, [pc, #168]	; (8004f1c <TIM_OC3_SetConfig+0x110>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d003      	beq.n	8004e7e <TIM_OC3_SetConfig+0x72>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <TIM_OC3_SetConfig+0x114>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d10d      	bne.n	8004e9a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e98:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <TIM_OC3_SetConfig+0x10c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_OC3_SetConfig+0xbe>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <TIM_OC3_SetConfig+0x110>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_OC3_SetConfig+0xbe>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <TIM_OC3_SetConfig+0x118>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_OC3_SetConfig+0xbe>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <TIM_OC3_SetConfig+0x11c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_OC3_SetConfig+0xbe>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a1b      	ldr	r2, [pc, #108]	; (8004f2c <TIM_OC3_SetConfig+0x120>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_OC3_SetConfig+0xbe>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <TIM_OC3_SetConfig+0x114>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d113      	bne.n	8004ef2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	621a      	str	r2, [r3, #32]
}
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40013400 	.word	0x40013400
 8004f20:	40015000 	.word	0x40015000
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800

08004f30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	031b      	lsls	r3, r3, #12
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <TIM_OC4_SetConfig+0xc8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <TIM_OC4_SetConfig+0x8c>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <TIM_OC4_SetConfig+0xcc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00f      	beq.n	8004fbc <TIM_OC4_SetConfig+0x8c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a18      	ldr	r2, [pc, #96]	; (8005000 <TIM_OC4_SetConfig+0xd0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00b      	beq.n	8004fbc <TIM_OC4_SetConfig+0x8c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a17      	ldr	r2, [pc, #92]	; (8005004 <TIM_OC4_SetConfig+0xd4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d007      	beq.n	8004fbc <TIM_OC4_SetConfig+0x8c>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a16      	ldr	r2, [pc, #88]	; (8005008 <TIM_OC4_SetConfig+0xd8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_OC4_SetConfig+0x8c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a15      	ldr	r2, [pc, #84]	; (800500c <TIM_OC4_SetConfig+0xdc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d109      	bne.n	8004fd0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	019b      	lsls	r3, r3, #6
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40012c00 	.word	0x40012c00
 8004ffc:	40013400 	.word	0x40013400
 8005000:	40014000 	.word	0x40014000
 8005004:	40014400 	.word	0x40014400
 8005008:	40014800 	.word	0x40014800
 800500c:	40015000 	.word	0x40015000

08005010 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005054:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a19      	ldr	r2, [pc, #100]	; (80050cc <TIM_OC5_SetConfig+0xbc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d013      	beq.n	8005092 <TIM_OC5_SetConfig+0x82>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <TIM_OC5_SetConfig+0xc0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00f      	beq.n	8005092 <TIM_OC5_SetConfig+0x82>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <TIM_OC5_SetConfig+0xc4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00b      	beq.n	8005092 <TIM_OC5_SetConfig+0x82>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <TIM_OC5_SetConfig+0xc8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d007      	beq.n	8005092 <TIM_OC5_SetConfig+0x82>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a15      	ldr	r2, [pc, #84]	; (80050dc <TIM_OC5_SetConfig+0xcc>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d003      	beq.n	8005092 <TIM_OC5_SetConfig+0x82>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a14      	ldr	r2, [pc, #80]	; (80050e0 <TIM_OC5_SetConfig+0xd0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d109      	bne.n	80050a6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005098:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	621a      	str	r2, [r3, #32]
}
 80050c0:	bf00      	nop
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	40012c00 	.word	0x40012c00
 80050d0:	40013400 	.word	0x40013400
 80050d4:	40014000 	.word	0x40014000
 80050d8:	40014400 	.word	0x40014400
 80050dc:	40014800 	.word	0x40014800
 80050e0:	40015000 	.word	0x40015000

080050e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800512a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	051b      	lsls	r3, r3, #20
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a1a      	ldr	r2, [pc, #104]	; (80051a4 <TIM_OC6_SetConfig+0xc0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <TIM_OC6_SetConfig+0x84>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a19      	ldr	r2, [pc, #100]	; (80051a8 <TIM_OC6_SetConfig+0xc4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00f      	beq.n	8005168 <TIM_OC6_SetConfig+0x84>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a18      	ldr	r2, [pc, #96]	; (80051ac <TIM_OC6_SetConfig+0xc8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00b      	beq.n	8005168 <TIM_OC6_SetConfig+0x84>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <TIM_OC6_SetConfig+0xcc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <TIM_OC6_SetConfig+0x84>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a16      	ldr	r2, [pc, #88]	; (80051b4 <TIM_OC6_SetConfig+0xd0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_OC6_SetConfig+0x84>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <TIM_OC6_SetConfig+0xd4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d109      	bne.n	800517c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800516e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	029b      	lsls	r3, r3, #10
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40013400 	.word	0x40013400
 80051ac:	40014000 	.word	0x40014000
 80051b0:	40014400 	.word	0x40014400
 80051b4:	40014800 	.word	0x40014800
 80051b8:	40015000 	.word	0x40015000

080051bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	2201      	movs	r2, #1
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1a      	ldr	r2, [r3, #32]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	43db      	mvns	r3, r3
 80051de:	401a      	ands	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	fa01 f303 	lsl.w	r3, r1, r3
 80051f4:	431a      	orrs	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a1e      	ldr	r2, [pc, #120]	; (800528c <TIM_ResetCallback+0x84>)
 8005214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <TIM_ResetCallback+0x88>)
 800521c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <TIM_ResetCallback+0x8c>)
 8005224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <TIM_ResetCallback+0x90>)
 800522c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1a      	ldr	r2, [pc, #104]	; (800529c <TIM_ResetCallback+0x94>)
 8005234:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <TIM_ResetCallback+0x98>)
 800523c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <TIM_ResetCallback+0x9c>)
 8005244:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <TIM_ResetCallback+0xa0>)
 800524c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a16      	ldr	r2, [pc, #88]	; (80052ac <TIM_ResetCallback+0xa4>)
 8005254:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a15      	ldr	r2, [pc, #84]	; (80052b0 <TIM_ResetCallback+0xa8>)
 800525c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <TIM_ResetCallback+0xac>)
 8005264:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <TIM_ResetCallback+0xb0>)
 800526c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a12      	ldr	r2, [pc, #72]	; (80052bc <TIM_ResetCallback+0xb4>)
 8005274:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#if defined(TIM_BDTR_BK2E)
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a11      	ldr	r2, [pc, #68]	; (80052c0 <TIM_ResetCallback+0xb8>)
 800527c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* TIM_BDTR_BK2E */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	080049ad 	.word	0x080049ad
 8005290:	080049c1 	.word	0x080049c1
 8005294:	08004a39 	.word	0x08004a39
 8005298:	08004a4d 	.word	0x08004a4d
 800529c:	080049e9 	.word	0x080049e9
 80052a0:	080049fd 	.word	0x080049fd
 80052a4:	080049d5 	.word	0x080049d5
 80052a8:	08004a11 	.word	0x08004a11
 80052ac:	08004a25 	.word	0x08004a25
 80052b0:	08004a61 	.word	0x08004a61
 80052b4:	080054e9 	.word	0x080054e9
 80052b8:	080054fd 	.word	0x080054fd
 80052bc:	08005511 	.word	0x08005511
 80052c0:	08005525 	.word	0x08005525

080052c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d8:	2302      	movs	r3, #2
 80052da:	e06d      	b.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a30      	ldr	r2, [pc, #192]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a2f      	ldr	r2, [pc, #188]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2d      	ldr	r2, [pc, #180]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d108      	bne.n	800532c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005320:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1e      	ldr	r2, [pc, #120]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d01d      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005358:	d018      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1c      	ldr	r2, [pc, #112]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d013      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1a      	ldr	r2, [pc, #104]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00e      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d009      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a11      	ldr	r2, [pc, #68]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10c      	bne.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005392:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	4313      	orrs	r3, r2
 800539c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	40012c00 	.word	0x40012c00
 80053c8:	40013400 	.word	0x40013400
 80053cc:	40015000 	.word	0x40015000
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40014000 	.word	0x40014000

080053dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e06a      	b.n	80054ce <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	041b      	lsls	r3, r3, #16
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a19      	ldr	r2, [pc, #100]	; (80054dc <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d009      	beq.n	8005490 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d004      	beq.n	8005490 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d115      	bne.n	80054bc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	051b      	lsls	r3, r3, #20
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40013400 	.word	0x40013400
 80054e4:	40015000 	.word	0x40015000

080054e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e040      	b.n	80055cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fc fd7c 	bl	8002058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2224      	movs	r2, #36	; 0x24
 8005564:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0201 	bic.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f8c0 	bl	80056fc <UART_SetConfig>
 800557c:	4603      	mov	r3, r0
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e022      	b.n	80055cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fa8a 	bl	8005aa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fb11 	bl	8005bec <UART_CheckIdleState>
 80055ca:	4603      	mov	r3, r0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	; 0x28
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	4613      	mov	r3, r2
 80055e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	f040 8082 	bne.w	80056f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_UART_Transmit+0x26>
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e07a      	b.n	80056f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_UART_Transmit+0x38>
 8005608:	2302      	movs	r3, #2
 800560a:	e073      	b.n	80056f4 <HAL_UART_Transmit+0x120>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2221      	movs	r2, #33	; 0x21
 8005620:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005622:	f7fc fde1 	bl	80021e8 <HAL_GetTick>
 8005626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005640:	d108      	bne.n	8005654 <HAL_UART_Transmit+0x80>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e003      	b.n	800565c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005658:	2300      	movs	r3, #0
 800565a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005664:	e02d      	b.n	80056c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2200      	movs	r2, #0
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fb04 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e039      	b.n	80056f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	881a      	ldrh	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005692:	b292      	uxth	r2, r2
 8005694:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	3302      	adds	r3, #2
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	e008      	b.n	80056b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	b292      	uxth	r2, r2
 80056a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	3301      	adds	r3, #1
 80056ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1cb      	bne.n	8005666 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2140      	movs	r1, #64	; 0x40
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 fad0 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e005      	b.n	80056f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e000      	b.n	80056f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
  }
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4b92      	ldr	r3, [pc, #584]	; (8005970 <UART_SetConfig+0x274>)
 8005728:	4013      	ands	r3, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	430b      	orrs	r3, r1
 8005732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	430a      	orrs	r2, r1
 800576c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a80      	ldr	r2, [pc, #512]	; (8005974 <UART_SetConfig+0x278>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d120      	bne.n	80057ba <UART_SetConfig+0xbe>
 8005778:	4b7f      	ldr	r3, [pc, #508]	; (8005978 <UART_SetConfig+0x27c>)
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	2b03      	cmp	r3, #3
 8005782:	d817      	bhi.n	80057b4 <UART_SetConfig+0xb8>
 8005784:	a201      	add	r2, pc, #4	; (adr r2, 800578c <UART_SetConfig+0x90>)
 8005786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578a:	bf00      	nop
 800578c:	0800579d 	.word	0x0800579d
 8005790:	080057a9 	.word	0x080057a9
 8005794:	080057af 	.word	0x080057af
 8005798:	080057a3 	.word	0x080057a3
 800579c:	2301      	movs	r3, #1
 800579e:	77fb      	strb	r3, [r7, #31]
 80057a0:	e0b5      	b.n	800590e <UART_SetConfig+0x212>
 80057a2:	2302      	movs	r3, #2
 80057a4:	77fb      	strb	r3, [r7, #31]
 80057a6:	e0b2      	b.n	800590e <UART_SetConfig+0x212>
 80057a8:	2304      	movs	r3, #4
 80057aa:	77fb      	strb	r3, [r7, #31]
 80057ac:	e0af      	b.n	800590e <UART_SetConfig+0x212>
 80057ae:	2308      	movs	r3, #8
 80057b0:	77fb      	strb	r3, [r7, #31]
 80057b2:	e0ac      	b.n	800590e <UART_SetConfig+0x212>
 80057b4:	2310      	movs	r3, #16
 80057b6:	77fb      	strb	r3, [r7, #31]
 80057b8:	e0a9      	b.n	800590e <UART_SetConfig+0x212>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a6f      	ldr	r2, [pc, #444]	; (800597c <UART_SetConfig+0x280>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d124      	bne.n	800580e <UART_SetConfig+0x112>
 80057c4:	4b6c      	ldr	r3, [pc, #432]	; (8005978 <UART_SetConfig+0x27c>)
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057d0:	d011      	beq.n	80057f6 <UART_SetConfig+0xfa>
 80057d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057d6:	d817      	bhi.n	8005808 <UART_SetConfig+0x10c>
 80057d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057dc:	d011      	beq.n	8005802 <UART_SetConfig+0x106>
 80057de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057e2:	d811      	bhi.n	8005808 <UART_SetConfig+0x10c>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <UART_SetConfig+0xf4>
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ec:	d006      	beq.n	80057fc <UART_SetConfig+0x100>
 80057ee:	e00b      	b.n	8005808 <UART_SetConfig+0x10c>
 80057f0:	2300      	movs	r3, #0
 80057f2:	77fb      	strb	r3, [r7, #31]
 80057f4:	e08b      	b.n	800590e <UART_SetConfig+0x212>
 80057f6:	2302      	movs	r3, #2
 80057f8:	77fb      	strb	r3, [r7, #31]
 80057fa:	e088      	b.n	800590e <UART_SetConfig+0x212>
 80057fc:	2304      	movs	r3, #4
 80057fe:	77fb      	strb	r3, [r7, #31]
 8005800:	e085      	b.n	800590e <UART_SetConfig+0x212>
 8005802:	2308      	movs	r3, #8
 8005804:	77fb      	strb	r3, [r7, #31]
 8005806:	e082      	b.n	800590e <UART_SetConfig+0x212>
 8005808:	2310      	movs	r3, #16
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e07f      	b.n	800590e <UART_SetConfig+0x212>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a5b      	ldr	r2, [pc, #364]	; (8005980 <UART_SetConfig+0x284>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d124      	bne.n	8005862 <UART_SetConfig+0x166>
 8005818:	4b57      	ldr	r3, [pc, #348]	; (8005978 <UART_SetConfig+0x27c>)
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005820:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005824:	d011      	beq.n	800584a <UART_SetConfig+0x14e>
 8005826:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800582a:	d817      	bhi.n	800585c <UART_SetConfig+0x160>
 800582c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005830:	d011      	beq.n	8005856 <UART_SetConfig+0x15a>
 8005832:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005836:	d811      	bhi.n	800585c <UART_SetConfig+0x160>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <UART_SetConfig+0x148>
 800583c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005840:	d006      	beq.n	8005850 <UART_SetConfig+0x154>
 8005842:	e00b      	b.n	800585c <UART_SetConfig+0x160>
 8005844:	2300      	movs	r3, #0
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e061      	b.n	800590e <UART_SetConfig+0x212>
 800584a:	2302      	movs	r3, #2
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e05e      	b.n	800590e <UART_SetConfig+0x212>
 8005850:	2304      	movs	r3, #4
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e05b      	b.n	800590e <UART_SetConfig+0x212>
 8005856:	2308      	movs	r3, #8
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e058      	b.n	800590e <UART_SetConfig+0x212>
 800585c:	2310      	movs	r3, #16
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e055      	b.n	800590e <UART_SetConfig+0x212>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a47      	ldr	r2, [pc, #284]	; (8005984 <UART_SetConfig+0x288>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d124      	bne.n	80058b6 <UART_SetConfig+0x1ba>
 800586c:	4b42      	ldr	r3, [pc, #264]	; (8005978 <UART_SetConfig+0x27c>)
 800586e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005870:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005874:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005878:	d011      	beq.n	800589e <UART_SetConfig+0x1a2>
 800587a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800587e:	d817      	bhi.n	80058b0 <UART_SetConfig+0x1b4>
 8005880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005884:	d011      	beq.n	80058aa <UART_SetConfig+0x1ae>
 8005886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800588a:	d811      	bhi.n	80058b0 <UART_SetConfig+0x1b4>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <UART_SetConfig+0x19c>
 8005890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005894:	d006      	beq.n	80058a4 <UART_SetConfig+0x1a8>
 8005896:	e00b      	b.n	80058b0 <UART_SetConfig+0x1b4>
 8005898:	2300      	movs	r3, #0
 800589a:	77fb      	strb	r3, [r7, #31]
 800589c:	e037      	b.n	800590e <UART_SetConfig+0x212>
 800589e:	2302      	movs	r3, #2
 80058a0:	77fb      	strb	r3, [r7, #31]
 80058a2:	e034      	b.n	800590e <UART_SetConfig+0x212>
 80058a4:	2304      	movs	r3, #4
 80058a6:	77fb      	strb	r3, [r7, #31]
 80058a8:	e031      	b.n	800590e <UART_SetConfig+0x212>
 80058aa:	2308      	movs	r3, #8
 80058ac:	77fb      	strb	r3, [r7, #31]
 80058ae:	e02e      	b.n	800590e <UART_SetConfig+0x212>
 80058b0:	2310      	movs	r3, #16
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e02b      	b.n	800590e <UART_SetConfig+0x212>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a33      	ldr	r2, [pc, #204]	; (8005988 <UART_SetConfig+0x28c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d124      	bne.n	800590a <UART_SetConfig+0x20e>
 80058c0:	4b2d      	ldr	r3, [pc, #180]	; (8005978 <UART_SetConfig+0x27c>)
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80058c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058cc:	d011      	beq.n	80058f2 <UART_SetConfig+0x1f6>
 80058ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058d2:	d817      	bhi.n	8005904 <UART_SetConfig+0x208>
 80058d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058d8:	d011      	beq.n	80058fe <UART_SetConfig+0x202>
 80058da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058de:	d811      	bhi.n	8005904 <UART_SetConfig+0x208>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <UART_SetConfig+0x1f0>
 80058e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058e8:	d006      	beq.n	80058f8 <UART_SetConfig+0x1fc>
 80058ea:	e00b      	b.n	8005904 <UART_SetConfig+0x208>
 80058ec:	2300      	movs	r3, #0
 80058ee:	77fb      	strb	r3, [r7, #31]
 80058f0:	e00d      	b.n	800590e <UART_SetConfig+0x212>
 80058f2:	2302      	movs	r3, #2
 80058f4:	77fb      	strb	r3, [r7, #31]
 80058f6:	e00a      	b.n	800590e <UART_SetConfig+0x212>
 80058f8:	2304      	movs	r3, #4
 80058fa:	77fb      	strb	r3, [r7, #31]
 80058fc:	e007      	b.n	800590e <UART_SetConfig+0x212>
 80058fe:	2308      	movs	r3, #8
 8005900:	77fb      	strb	r3, [r7, #31]
 8005902:	e004      	b.n	800590e <UART_SetConfig+0x212>
 8005904:	2310      	movs	r3, #16
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e001      	b.n	800590e <UART_SetConfig+0x212>
 800590a:	2310      	movs	r3, #16
 800590c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005916:	d16c      	bne.n	80059f2 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8005918:	7ffb      	ldrb	r3, [r7, #31]
 800591a:	2b08      	cmp	r3, #8
 800591c:	d838      	bhi.n	8005990 <UART_SetConfig+0x294>
 800591e:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <UART_SetConfig+0x228>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	08005949 	.word	0x08005949
 8005928:	08005951 	.word	0x08005951
 800592c:	08005959 	.word	0x08005959
 8005930:	08005991 	.word	0x08005991
 8005934:	0800595f 	.word	0x0800595f
 8005938:	08005991 	.word	0x08005991
 800593c:	08005991 	.word	0x08005991
 8005940:	08005991 	.word	0x08005991
 8005944:	08005967 	.word	0x08005967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005948:	f7fe f96c 	bl	8003c24 <HAL_RCC_GetPCLK1Freq>
 800594c:	61b8      	str	r0, [r7, #24]
        break;
 800594e:	e024      	b.n	800599a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005950:	f7fe f98a 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 8005954:	61b8      	str	r0, [r7, #24]
        break;
 8005956:	e020      	b.n	800599a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005958:	4b0c      	ldr	r3, [pc, #48]	; (800598c <UART_SetConfig+0x290>)
 800595a:	61bb      	str	r3, [r7, #24]
        break;
 800595c:	e01d      	b.n	800599a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595e:	f7fe f8eb 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8005962:	61b8      	str	r0, [r7, #24]
        break;
 8005964:	e019      	b.n	800599a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800596a:	61bb      	str	r3, [r7, #24]
        break;
 800596c:	e015      	b.n	800599a <UART_SetConfig+0x29e>
 800596e:	bf00      	nop
 8005970:	efff69f3 	.word	0xefff69f3
 8005974:	40013800 	.word	0x40013800
 8005978:	40021000 	.word	0x40021000
 800597c:	40004400 	.word	0x40004400
 8005980:	40004800 	.word	0x40004800
 8005984:	40004c00 	.word	0x40004c00
 8005988:	40005000 	.word	0x40005000
 800598c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	77bb      	strb	r3, [r7, #30]
        break;
 8005998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d075      	beq.n	8005a8c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	005a      	lsls	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	441a      	add	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b0f      	cmp	r3, #15
 80059bc:	d916      	bls.n	80059ec <UART_SetConfig+0x2f0>
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c4:	d212      	bcs.n	80059ec <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f023 030f 	bic.w	r3, r3, #15
 80059ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	085b      	lsrs	r3, r3, #1
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	b29a      	uxth	r2, r3
 80059dc:	89fb      	ldrh	r3, [r7, #14]
 80059de:	4313      	orrs	r3, r2
 80059e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	89fa      	ldrh	r2, [r7, #14]
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	e04f      	b.n	8005a8c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	77bb      	strb	r3, [r7, #30]
 80059f0:	e04c      	b.n	8005a8c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059f2:	7ffb      	ldrb	r3, [r7, #31]
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d828      	bhi.n	8005a4a <UART_SetConfig+0x34e>
 80059f8:	a201      	add	r2, pc, #4	; (adr r2, 8005a00 <UART_SetConfig+0x304>)
 80059fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fe:	bf00      	nop
 8005a00:	08005a25 	.word	0x08005a25
 8005a04:	08005a2d 	.word	0x08005a2d
 8005a08:	08005a35 	.word	0x08005a35
 8005a0c:	08005a4b 	.word	0x08005a4b
 8005a10:	08005a3b 	.word	0x08005a3b
 8005a14:	08005a4b 	.word	0x08005a4b
 8005a18:	08005a4b 	.word	0x08005a4b
 8005a1c:	08005a4b 	.word	0x08005a4b
 8005a20:	08005a43 	.word	0x08005a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a24:	f7fe f8fe 	bl	8003c24 <HAL_RCC_GetPCLK1Freq>
 8005a28:	61b8      	str	r0, [r7, #24]
        break;
 8005a2a:	e013      	b.n	8005a54 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a2c:	f7fe f91c 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 8005a30:	61b8      	str	r0, [r7, #24]
        break;
 8005a32:	e00f      	b.n	8005a54 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a34:	4b1b      	ldr	r3, [pc, #108]	; (8005aa4 <UART_SetConfig+0x3a8>)
 8005a36:	61bb      	str	r3, [r7, #24]
        break;
 8005a38:	e00c      	b.n	8005a54 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a3a:	f7fe f87d 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8005a3e:	61b8      	str	r0, [r7, #24]
        break;
 8005a40:	e008      	b.n	8005a54 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a46:	61bb      	str	r3, [r7, #24]
        break;
 8005a48:	e004      	b.n	8005a54 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	77bb      	strb	r3, [r7, #30]
        break;
 8005a52:	bf00      	nop
    }

    if (pclk != 0U)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d018      	beq.n	8005a8c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	085a      	lsrs	r2, r3, #1
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	441a      	add	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b0f      	cmp	r3, #15
 8005a74:	d908      	bls.n	8005a88 <UART_SetConfig+0x38c>
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7c:	d204      	bcs.n	8005a88 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	60da      	str	r2, [r3, #12]
 8005a86:	e001      	b.n	8005a8c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a98:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	007a1200 	.word	0x007a1200

08005aa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01a      	beq.n	8005bbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba6:	d10a      	bne.n	8005bbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bfc:	f7fc faf4 	bl	80021e8 <HAL_GetTick>
 8005c00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d10e      	bne.n	8005c2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f82d 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e023      	b.n	8005c76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d10e      	bne.n	8005c5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f817 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e00d      	b.n	8005c76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b09c      	sub	sp, #112	; 0x70
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	603b      	str	r3, [r7, #0]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8e:	e0a5      	b.n	8005ddc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	f000 80a1 	beq.w	8005ddc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9a:	f7fc faa5 	bl	80021e8 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d13e      	bne.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e6      	bne.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	663b      	str	r3, [r7, #96]	; 0x60
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3308      	adds	r3, #8
 8005d00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d02:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e5      	bne.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e067      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d04f      	beq.n	8005ddc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4a:	d147      	bne.n	8005ddc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d74:	637b      	str	r3, [r7, #52]	; 0x34
 8005d76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e6      	bne.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	613b      	str	r3, [r7, #16]
   return(result);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f023 0301 	bic.w	r3, r3, #1
 8005d9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3308      	adds	r3, #8
 8005da6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005da8:	623a      	str	r2, [r7, #32]
 8005daa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	69f9      	ldr	r1, [r7, #28]
 8005dae:	6a3a      	ldr	r2, [r7, #32]
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e5      	bne.n	8005d88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e010      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69da      	ldr	r2, [r3, #28]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4013      	ands	r3, r2
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	bf0c      	ite	eq
 8005dec:	2301      	moveq	r3, #1
 8005dee:	2300      	movne	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	f43f af4a 	beq.w	8005c90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3770      	adds	r7, #112	; 0x70
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <__libc_init_array>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	4d0d      	ldr	r5, [pc, #52]	; (8005e40 <__libc_init_array+0x38>)
 8005e0c:	4c0d      	ldr	r4, [pc, #52]	; (8005e44 <__libc_init_array+0x3c>)
 8005e0e:	1b64      	subs	r4, r4, r5
 8005e10:	10a4      	asrs	r4, r4, #2
 8005e12:	2600      	movs	r6, #0
 8005e14:	42a6      	cmp	r6, r4
 8005e16:	d109      	bne.n	8005e2c <__libc_init_array+0x24>
 8005e18:	4d0b      	ldr	r5, [pc, #44]	; (8005e48 <__libc_init_array+0x40>)
 8005e1a:	4c0c      	ldr	r4, [pc, #48]	; (8005e4c <__libc_init_array+0x44>)
 8005e1c:	f000 f87c 	bl	8005f18 <_init>
 8005e20:	1b64      	subs	r4, r4, r5
 8005e22:	10a4      	asrs	r4, r4, #2
 8005e24:	2600      	movs	r6, #0
 8005e26:	42a6      	cmp	r6, r4
 8005e28:	d105      	bne.n	8005e36 <__libc_init_array+0x2e>
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e30:	4798      	blx	r3
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7ee      	b.n	8005e14 <__libc_init_array+0xc>
 8005e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3a:	4798      	blx	r3
 8005e3c:	3601      	adds	r6, #1
 8005e3e:	e7f2      	b.n	8005e26 <__libc_init_array+0x1e>
 8005e40:	080062e8 	.word	0x080062e8
 8005e44:	080062e8 	.word	0x080062e8
 8005e48:	080062e8 	.word	0x080062e8
 8005e4c:	080062ec 	.word	0x080062ec

08005e50 <__itoa>:
 8005e50:	1e93      	subs	r3, r2, #2
 8005e52:	2b22      	cmp	r3, #34	; 0x22
 8005e54:	b510      	push	{r4, lr}
 8005e56:	460c      	mov	r4, r1
 8005e58:	d904      	bls.n	8005e64 <__itoa+0x14>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	700b      	strb	r3, [r1, #0]
 8005e5e:	461c      	mov	r4, r3
 8005e60:	4620      	mov	r0, r4
 8005e62:	bd10      	pop	{r4, pc}
 8005e64:	2a0a      	cmp	r2, #10
 8005e66:	d109      	bne.n	8005e7c <__itoa+0x2c>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	da07      	bge.n	8005e7c <__itoa+0x2c>
 8005e6c:	232d      	movs	r3, #45	; 0x2d
 8005e6e:	700b      	strb	r3, [r1, #0]
 8005e70:	4240      	negs	r0, r0
 8005e72:	2101      	movs	r1, #1
 8005e74:	4421      	add	r1, r4
 8005e76:	f000 f80d 	bl	8005e94 <__utoa>
 8005e7a:	e7f1      	b.n	8005e60 <__itoa+0x10>
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	e7f9      	b.n	8005e74 <__itoa+0x24>

08005e80 <itoa>:
 8005e80:	f7ff bfe6 	b.w	8005e50 <__itoa>

08005e84 <memset>:
 8005e84:	4402      	add	r2, r0
 8005e86:	4603      	mov	r3, r0
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d100      	bne.n	8005e8e <memset+0xa>
 8005e8c:	4770      	bx	lr
 8005e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e92:	e7f9      	b.n	8005e88 <memset+0x4>

08005e94 <__utoa>:
 8005e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e96:	4c1f      	ldr	r4, [pc, #124]	; (8005f14 <__utoa+0x80>)
 8005e98:	b08b      	sub	sp, #44	; 0x2c
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	466e      	mov	r6, sp
 8005ea0:	f104 0c20 	add.w	ip, r4, #32
 8005ea4:	6820      	ldr	r0, [r4, #0]
 8005ea6:	6861      	ldr	r1, [r4, #4]
 8005ea8:	4637      	mov	r7, r6
 8005eaa:	c703      	stmia	r7!, {r0, r1}
 8005eac:	3408      	adds	r4, #8
 8005eae:	4564      	cmp	r4, ip
 8005eb0:	463e      	mov	r6, r7
 8005eb2:	d1f7      	bne.n	8005ea4 <__utoa+0x10>
 8005eb4:	7921      	ldrb	r1, [r4, #4]
 8005eb6:	7139      	strb	r1, [r7, #4]
 8005eb8:	1e91      	subs	r1, r2, #2
 8005eba:	6820      	ldr	r0, [r4, #0]
 8005ebc:	6038      	str	r0, [r7, #0]
 8005ebe:	2922      	cmp	r1, #34	; 0x22
 8005ec0:	f04f 0100 	mov.w	r1, #0
 8005ec4:	d904      	bls.n	8005ed0 <__utoa+0x3c>
 8005ec6:	7019      	strb	r1, [r3, #0]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4618      	mov	r0, r3
 8005ecc:	b00b      	add	sp, #44	; 0x2c
 8005ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed0:	1e58      	subs	r0, r3, #1
 8005ed2:	4684      	mov	ip, r0
 8005ed4:	fbb5 f7f2 	udiv	r7, r5, r2
 8005ed8:	fb02 5617 	mls	r6, r2, r7, r5
 8005edc:	3628      	adds	r6, #40	; 0x28
 8005ede:	446e      	add	r6, sp
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005ee6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005eea:	462e      	mov	r6, r5
 8005eec:	42b2      	cmp	r2, r6
 8005eee:	f101 0101 	add.w	r1, r1, #1
 8005ef2:	463d      	mov	r5, r7
 8005ef4:	d9ee      	bls.n	8005ed4 <__utoa+0x40>
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	545a      	strb	r2, [r3, r1]
 8005efa:	1919      	adds	r1, r3, r4
 8005efc:	1aa5      	subs	r5, r4, r2
 8005efe:	42aa      	cmp	r2, r5
 8005f00:	dae3      	bge.n	8005eca <__utoa+0x36>
 8005f02:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005f06:	780e      	ldrb	r6, [r1, #0]
 8005f08:	7006      	strb	r6, [r0, #0]
 8005f0a:	3201      	adds	r2, #1
 8005f0c:	f801 5901 	strb.w	r5, [r1], #-1
 8005f10:	e7f4      	b.n	8005efc <__utoa+0x68>
 8005f12:	bf00      	nop
 8005f14:	080062c0 	.word	0x080062c0

08005f18 <_init>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr

08005f24 <_fini>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr
