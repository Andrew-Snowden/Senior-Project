
FFBController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e0  080065e0  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080065e0  080065e0  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065e0  080065e0  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080065e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
 10 .bss          0000064c  2000003c  2000003c  0002003c  2**2
                  ALLOC
 11 ._user_heap_stack 00004200  20000688  20000688  0002003c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000128b3  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029fd  00000000  00000000  0003291f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00035320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc8  00000000  00000000  00036110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021946  00000000  00000000  00036dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b60  00000000  00000000  0005871e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb28a  00000000  00000000  0006c27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137508  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003904  00000000  00000000  00137558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006220 	.word	0x08006220

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	08006220 	.word	0x08006220

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <ADC_Init>:
 *
 * @note Postcondition	: ADC3 will be running
 *
 ** **************************************************************************** */
void ADC_Init(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0


	__HAL_RCC_ADC34_CLK_ENABLE();
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <ADC_Init+0x34>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <ADC_Init+0x34>)
 80001f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <ADC_Init+0x34>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]

	ADC_InitGPIO();
 8000202:	f000 f873 	bl	80002ec <ADC_InitGPIO>

	ADC_Enable();
 8000206:	f000 f809 	bl	800021c <ADC_Enable>

	ADC_Configure();
 800020a:	f000 f843 	bl	8000294 <ADC_Configure>




}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000

0800021c <ADC_Enable>:
 *
 * @note Postcondition	: ADC3 will be enabled and ready for configuration
 *
 ** **************************************************************************** */
void ADC_Enable(void)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
	/****************************
	 * Enable voltage regulator *
	 ****************************/

	//Reset and enable voltage regulator
	ADC3->CR = 0;
 8000222:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <ADC_Enable+0x74>)
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
	ADC3->CR = ADC_CR_ADVREGEN;
 8000228:	4b19      	ldr	r3, [pc, #100]	; (8000290 <ADC_Enable+0x74>)
 800022a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800022e:	609a      	str	r2, [r3, #8]

	//Wait for regulator to fully turn on
	for (int i = 0; i < 10000; i++)
 8000230:	2300      	movs	r3, #0
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	e003      	b.n	800023e <ADC_Enable+0x22>
	{
		__asm volatile("nop");
 8000236:	bf00      	nop
	for (int i = 0; i < 10000; i++)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3301      	adds	r3, #1
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f242 720f 	movw	r2, #9999	; 0x270f
 8000244:	4293      	cmp	r3, r2
 8000246:	ddf6      	ble.n	8000236 <ADC_Enable+0x1a>
	/*************
	 * Calibrate *
	 *************/

	//Start ADC Calibration
	ADC3->CR |= ADC_CR_ADCAL;
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <ADC_Enable+0x74>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a10      	ldr	r2, [pc, #64]	; (8000290 <ADC_Enable+0x74>)
 800024e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000252:	6093      	str	r3, [r2, #8]

	//Wait until calibration is finished
	while (ADC3->CR & ADC_CR_ADCAL_Msk);
 8000254:	bf00      	nop
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <ADC_Enable+0x74>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	2b00      	cmp	r3, #0
 800025c:	dbfb      	blt.n	8000256 <ADC_Enable+0x3a>

	//Wait additional 4 cycles according to datasheet
	__asm volatile("nop");
 800025e:	bf00      	nop
	__asm volatile("nop");
 8000260:	bf00      	nop
	__asm volatile("nop");
 8000262:	bf00      	nop
	__asm volatile("nop");
 8000264:	bf00      	nop
	/***************
	 * Turn ADC on *
	 ***************/

	//Enable ADC
	ADC3->CR |= ADC_CR_ADEN;
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <ADC_Enable+0x74>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	4a09      	ldr	r2, [pc, #36]	; (8000290 <ADC_Enable+0x74>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	6093      	str	r3, [r2, #8]

	//Wait until ADC is ready
	while ((ADC3->ISR & ADC_ISR_ADRDY_Msk) != 1);
 8000272:	bf00      	nop
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <ADC_Enable+0x74>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	d1f9      	bne.n	8000274 <ADC_Enable+0x58>

}
 8000280:	bf00      	nop
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	50000400 	.word	0x50000400

08000294 <ADC_Configure>:
 * 							- Channel 1, 2, 3, 5
 * 							- EOC interrupt enabled
 *
 ** **************************************************************************** */
void ADC_Configure(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
	//Clear interrupts
	uint16_t interrupts = ADC3->ISR;
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <ADC_Configure+0x50>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	80fb      	strh	r3, [r7, #6]
	ADC3->ISR = interrupts;
 80002a0:	4a10      	ldr	r2, [pc, #64]	; (80002e4 <ADC_Configure+0x50>)
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	6013      	str	r3, [r2, #0]

	//Enable EOC and EOS interrupts
	ADC3->IER |= ADC_IER_EOCIE | ADC_IER_EOSIE;
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <ADC_Configure+0x50>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <ADC_Configure+0x50>)
 80002ac:	f043 030c 	orr.w	r3, r3, #12
 80002b0:	6053      	str	r3, [r2, #4]

	//Configure in continuous mode, overrun overwrite
	ADC3->CFGR |= ADC_CFGR_OVRMOD | ADC_CFGR_AUTDLY;
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <ADC_Configure+0x50>)
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <ADC_Configure+0x50>)
 80002b8:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80002bc:	60d3      	str	r3, [r2, #12]

	//Configure conversion sequence
	ADC3->SQR1 |= 					  4 |
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <ADC_Configure+0x50>)
 80002c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002c2:	4908      	ldr	r1, [pc, #32]	; (80002e4 <ADC_Configure+0x50>)
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <ADC_Configure+0x54>)
 80002c6:	4313      	orrs	r3, r2
 80002c8:	630b      	str	r3, [r1, #48]	; 0x30
				(2 << ADC_SQR1_SQ2_Pos) |
				(3 << ADC_SQR1_SQ3_Pos) |
				(5 << ADC_SQR1_SQ4_Pos);

	//Start running the ADC
	ADC3->CR |= ADC_CR_ADSTART;
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <ADC_Configure+0x50>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <ADC_Configure+0x50>)
 80002d0:	f043 0304 	orr.w	r3, r3, #4
 80002d4:	6093      	str	r3, [r2, #8]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	50000400 	.word	0x50000400
 80002e8:	050c2044 	.word	0x050c2044

080002ec <ADC_InitGPIO>:
 *
 * @note Postcondition	: GPIO will be configured for required ADC channels
 *
 ** **************************************************************************** */
void ADC_InitGPIO(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <ADC_InitGPIO+0x8c>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a20      	ldr	r2, [pc, #128]	; (8000378 <ADC_InitGPIO+0x8c>)
 80002f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <ADC_InitGPIO+0x8c>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800030a:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <ADC_InitGPIO+0x8c>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a1a      	ldr	r2, [pc, #104]	; (8000378 <ADC_InitGPIO+0x8c>)
 8000310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000314:	6153      	str	r3, [r2, #20]
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <ADC_InitGPIO+0x8c>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000322:	f107 030c 	add.w	r3, r7, #12
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000332:	2303      	movs	r3, #3
 8000334:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]

	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 800033a:	f242 0302 	movw	r3, #8194	; 0x2002
 800033e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	4619      	mov	r1, r3
 8000346:	480d      	ldr	r0, [pc, #52]	; (800037c <ADC_InitGPIO+0x90>)
 8000348:	f002 fa08 	bl	800275c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 800034c:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000350:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	4619      	mov	r1, r3
 8000358:	4809      	ldr	r0, [pc, #36]	; (8000380 <ADC_InitGPIO+0x94>)
 800035a:	f002 f9ff 	bl	800275c <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	202f      	movs	r0, #47	; 0x2f
 8000364:	f002 f9c3 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000368:	202f      	movs	r0, #47	; 0x2f
 800036a:	f002 f9dc 	bl	8002726 <HAL_NVIC_EnableIRQ>
}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	48000400 	.word	0x48000400
 8000380:	48001000 	.word	0x48001000

08000384 <ADC3_IRQHandler>:


void ADC3_IRQHandler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	if (ADC3->ISR & ADC_ISR_EOC_Msk)
 8000388:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <ADC3_IRQHandler+0x54>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	2b00      	cmp	r3, #0
 8000392:	d010      	beq.n	80003b6 <ADC3_IRQHandler+0x32>
	{
		adc_values[channel_state] = ADC3->DR;
 8000394:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <ADC3_IRQHandler+0x54>)
 8000396:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000398:	4b10      	ldr	r3, [pc, #64]	; (80003dc <ADC3_IRQHandler+0x58>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	b289      	uxth	r1, r1
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <ADC3_IRQHandler+0x5c>)
 80003a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		channel_state++;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <ADC3_IRQHandler+0x58>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	3301      	adds	r3, #1
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <ADC3_IRQHandler+0x58>)
 80003b4:	701a      	strb	r2, [r3, #0]
	}

	if (ADC3->ISR & ADC_ISR_EOS_Msk)
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <ADC3_IRQHandler+0x54>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f003 0308 	and.w	r3, r3, #8
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d005      	beq.n	80003ce <ADC3_IRQHandler+0x4a>
	{
		//Clear flag
		ADC3->ISR = ADC_ISR_EOS;
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <ADC3_IRQHandler+0x54>)
 80003c4:	2208      	movs	r2, #8
 80003c6:	601a      	str	r2, [r3, #0]

		//Reset channel state
		channel_state = C_CHANNEL_1;
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <ADC3_IRQHandler+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
	}
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	50000400 	.word	0x50000400
 80003dc:	20000058 	.word	0x20000058
 80003e0:	2000005c 	.word	0x2000005c

080003e4 <Pedal_GetAxisValue>:
struct Pedal brake	 		= { adc_values + 1, 0, 1 };
struct Pedal clutch 		= { adc_values + 2, 0, 1};
struct Pedal handbrake		= { adc_values + 3, 0, 1};

uint16_t Pedal_GetAxisValue(struct Pedal pedal)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b087      	sub	sp, #28
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Apply offset and scaling
	int16_t value = *(pedal.value);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	881b      	ldrh	r3, [r3, #0]
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	82fb      	strh	r3, [r7, #22]

	value += pedal.offset;
 80003f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80003fc:	b29a      	uxth	r2, r3
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	4413      	add	r3, r2
 8000402:	b29b      	uxth	r3, r3
 8000404:	82fb      	strh	r3, [r7, #22]

	if (value < 0)
 8000406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800040a:	2b00      	cmp	r3, #0
 800040c:	da01      	bge.n	8000412 <Pedal_GetAxisValue+0x2e>
	{
		value = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	82fb      	strh	r3, [r7, #22]
	}

	value *= pedal.scale_factor;
 8000412:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000416:	ee07 3a90 	vmov	s15, r3
 800041a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800041e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800042a:	ee17 3a90 	vmov	r3, s15
 800042e:	82fb      	strh	r3, [r7, #22]

	return (uint16_t)value;
 8000430:	8afb      	ldrh	r3, [r7, #22]
}
 8000432:	4618      	mov	r0, r3
 8000434:	371c      	adds	r7, #28
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <ES_CalculateConditionForce>:
 *
 * @note Postcondition	: None
 *
 ** **************************************************************************** */
int16_t ES_CalculateConditionForce(int16_t metric, struct Condition condition)
{
 800043e:	b084      	sub	sp, #16
 8000440:	b490      	push	{r4, r7}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	4604      	mov	r4, r0
 8000448:	f107 001c 	add.w	r0, r7, #28
 800044c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000450:	4623      	mov	r3, r4
 8000452:	80fb      	strh	r3, [r7, #6]
	int16_t force = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	81fb      	strh	r3, [r7, #14]
	if (metric < (condition.center_point_offset - condition.dead_band))
 8000458:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800045c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000460:	4619      	mov	r1, r3
 8000462:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	429a      	cmp	r2, r3
 800046a:	da16      	bge.n	800049a <ES_CalculateConditionForce+0x5c>
	{
		force = condition.positive_coefficient * (metric - (condition.center_point_offset - condition.dead_band));
 800046c:	ed97 7a08 	vldr	s14, [r7, #32]
 8000470:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000474:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000478:	4619      	mov	r1, r3
 800047a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800047e:	1acb      	subs	r3, r1, r3
 8000480:	1ad3      	subs	r3, r2, r3
 8000482:	ee07 3a90 	vmov	s15, r3
 8000486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800048a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800048e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000492:	ee17 3a90 	vmov	r3, s15
 8000496:	81fb      	strh	r3, [r7, #14]
 8000498:	e01f      	b.n	80004da <ES_CalculateConditionForce+0x9c>
	}
	else if (metric > (condition.center_point_offset + condition.dead_band))
 800049a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800049e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80004a2:	4619      	mov	r1, r3
 80004a4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80004a8:	440b      	add	r3, r1
 80004aa:	429a      	cmp	r2, r3
 80004ac:	dd15      	ble.n	80004da <ES_CalculateConditionForce+0x9c>
	{
		force = condition.positive_coefficient * (metric - (condition.center_point_offset + condition.dead_band));
 80004ae:	ed97 7a08 	vldr	s14, [r7, #32]
 80004b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80004b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80004ba:	4619      	mov	r1, r3
 80004bc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80004c0:	440b      	add	r3, r1
 80004c2:	1ad3      	subs	r3, r2, r3
 80004c4:	ee07 3a90 	vmov	s15, r3
 80004c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80004d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80004d4:	ee17 3a90 	vmov	r3, s15
 80004d8:	81fb      	strh	r3, [r7, #14]
	}

	return force;
 80004da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc90      	pop	{r4, r7}
 80004e6:	b004      	add	sp, #16
 80004e8:	4770      	bx	lr

080004ea <ES_CalculateEnvelope>:


float ES_CalculateEnvelope(struct Effect effect)
{
 80004ea:	b084      	sub	sp, #16
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	f107 0c10 	add.w	ip, r7, #16
 80004f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float scale_factor = 0;
 80004fa:	f04f 0300 	mov.w	r3, #0
 80004fe:	607b      	str	r3, [r7, #4]

	if (effect.effect_block.duration == 0)
 8000500:	8a7b      	ldrh	r3, [r7, #18]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d103      	bne.n	800050e <ES_CalculateEnvelope+0x24>
	{
		scale_factor = 1;
 8000506:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	e03d      	b.n	800058a <ES_CalculateEnvelope+0xa0>
	}
	else
	{
		if (effect.tick < effect.envelope.attack_time)
 800050e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8000512:	8bbb      	ldrh	r3, [r7, #28]
 8000514:	429a      	cmp	r2, r3
 8000516:	d20f      	bcs.n	8000538 <ES_CalculateEnvelope+0x4e>
		{
			scale_factor = (float)effect.tick / (float)effect.envelope.attack_time;
 8000518:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800051c:	ee07 3a90 	vmov	s15, r3
 8000520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000524:	8bbb      	ldrh	r3, [r7, #28]
 8000526:	ee07 3a90 	vmov	s15, r3
 800052a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800052e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000532:	edc7 7a01 	vstr	s15, [r7, #4]
 8000536:	e028      	b.n	800058a <ES_CalculateEnvelope+0xa0>
		}
		else if (effect.tick < (effect.effect_block.duration + effect.envelope.attack_time))
 8000538:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800053c:	461a      	mov	r2, r3
 800053e:	8a7b      	ldrh	r3, [r7, #18]
 8000540:	4619      	mov	r1, r3
 8000542:	8bbb      	ldrh	r3, [r7, #28]
 8000544:	440b      	add	r3, r1
 8000546:	429a      	cmp	r2, r3
 8000548:	da03      	bge.n	8000552 <ES_CalculateEnvelope+0x68>
		{
			scale_factor = 1;
 800054a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	e01b      	b.n	800058a <ES_CalculateEnvelope+0xa0>
		}
		else if (effect.envelope.fade_time != 0)
 8000552:	8c3b      	ldrh	r3, [r7, #32]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d018      	beq.n	800058a <ES_CalculateEnvelope+0xa0>
		{
			scale_factor = ((float)effect.tick - (effect.effect_block.duration + effect.envelope.attack_time))
 8000558:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800055c:	ee07 3a90 	vmov	s15, r3
 8000560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000564:	8a7b      	ldrh	r3, [r7, #18]
 8000566:	461a      	mov	r2, r3
 8000568:	8bbb      	ldrh	r3, [r7, #28]
 800056a:	4413      	add	r3, r2
 800056c:	ee07 3a90 	vmov	s15, r3
 8000570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000574:	ee77 6a67 	vsub.f32	s13, s14, s15
							/ (float)effect.envelope.fade_time;
 8000578:	8c3b      	ldrh	r3, [r7, #32]
 800057a:	ee07 3a90 	vmov	s15, r3
 800057e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
			scale_factor = ((float)effect.tick - (effect.effect_block.duration + effect.envelope.attack_time))
 8000582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000586:	edc7 7a01 	vstr	s15, [r7, #4]
		}
	}

	return scale_factor;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	ee07 3a90 	vmov	s15, r3
}
 8000590:	eeb0 0a67 	vmov.f32	s0, s15
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	b004      	add	sp, #16
 800059e:	4770      	bx	lr

080005a0 <ES_CalculateNetForce>:
 *
 * @note Postcondition	: None
 *
 ** **************************************************************************** */
volatile int16_t ES_CalculateNetForce(void)
{
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	ed2d 8b02 	vpush	{d8}
 80005a6:	b08f      	sub	sp, #60	; 0x3c
 80005a8:	af0c      	add	r7, sp, #48	; 0x30
	int16_t net_force = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	80fb      	strh	r3, [r7, #6]
	int16_t present_force = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	80bb      	strh	r3, [r7, #4]



	for (int i = 0; i < MAX_EFFECTS; i++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	e0fb      	b.n	80007b0 <ES_CalculateNetForce+0x210>
	{
		if (effects[i].running && effects[i].active)
 80005b8:	4983      	ldr	r1, [pc, #524]	; (80007c8 <ES_CalculateNetForce+0x228>)
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	4613      	mov	r3, r2
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	440b      	add	r3, r1
 80005c6:	3336      	adds	r3, #54	; 0x36
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	f000 80ec 	beq.w	80007aa <ES_CalculateNetForce+0x20a>
 80005d2:	497d      	ldr	r1, [pc, #500]	; (80007c8 <ES_CalculateNetForce+0x228>)
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	4613      	mov	r3, r2
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	440b      	add	r3, r1
 80005e0:	3337      	adds	r3, #55	; 0x37
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	f000 80df 	beq.w	80007aa <ES_CalculateNetForce+0x20a>
		{

			switch (effects[i].effect_block.effect_type)
 80005ec:	4976      	ldr	r1, [pc, #472]	; (80007c8 <ES_CalculateNetForce+0x228>)
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	4613      	mov	r3, r2
 80005f2:	011b      	lsls	r3, r3, #4
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	440b      	add	r3, r1
 80005fa:	3304      	adds	r3, #4
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b0b      	cmp	r3, #11
 8000602:	f200 80a6 	bhi.w	8000752 <ES_CalculateNetForce+0x1b2>
 8000606:	a201      	add	r2, pc, #4	; (adr r2, 800060c <ES_CalculateNetForce+0x6c>)
 8000608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060c:	0800063d 	.word	0x0800063d
 8000610:	0800075b 	.word	0x0800075b
 8000614:	0800075b 	.word	0x0800075b
 8000618:	0800075b 	.word	0x0800075b
 800061c:	0800075b 	.word	0x0800075b
 8000620:	0800075b 	.word	0x0800075b
 8000624:	0800075b 	.word	0x0800075b
 8000628:	0800075b 	.word	0x0800075b
 800062c:	0800069d 	.word	0x0800069d
 8000630:	080006d3 	.word	0x080006d3
 8000634:	08000713 	.word	0x08000713
 8000638:	0800075b 	.word	0x0800075b
			{
			case ET_ConstantForce:

				present_force = (effects[i].constant_force.magnitude * ES_CalculateEnvelope(effects[i]) *-1);
 800063c:	4962      	ldr	r1, [pc, #392]	; (80007c8 <ES_CalculateNetForce+0x228>)
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	4613      	mov	r3, r2
 8000642:	011b      	lsls	r3, r3, #4
 8000644:	1a9b      	subs	r3, r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	440b      	add	r3, r1
 800064a:	3334      	adds	r3, #52	; 0x34
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	b21b      	sxth	r3, r3
 8000650:	ee07 3a90 	vmov	s15, r3
 8000654:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000658:	495b      	ldr	r1, [pc, #364]	; (80007c8 <ES_CalculateNetForce+0x228>)
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	4613      	mov	r3, r2
 800065e:	011b      	lsls	r3, r3, #4
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	18ce      	adds	r6, r1, r3
 8000666:	466d      	mov	r5, sp
 8000668:	f106 0410 	add.w	r4, r6, #16
 800066c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000674:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000678:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800067c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000680:	f7ff ff33 	bl	80004ea <ES_CalculateEnvelope>
 8000684:	eef0 7a40 	vmov.f32	s15, s0
 8000688:	ee68 7a27 	vmul.f32	s15, s16, s15
 800068c:	eef1 7a67 	vneg.f32	s15, s15
 8000690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000694:	ee17 3a90 	vmov	r3, s15
 8000698:	80bb      	strh	r3, [r7, #4]

			break;
 800069a:	e05f      	b.n	800075c <ES_CalculateNetForce+0x1bc>
			case ET_SawtoothDown:

			break;
			case ET_Spring:

				present_force = ES_CalculateConditionForce(Motor_GetPosition(), effects[i].condition);
 800069c:	f000 fbd0 	bl	8000e40 <Motor_GetPosition>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461d      	mov	r5, r3
 80006a4:	4948      	ldr	r1, [pc, #288]	; (80007c8 <ES_CalculateNetForce+0x228>)
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4613      	mov	r3, r2
 80006aa:	011b      	lsls	r3, r3, #4
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	3310      	adds	r3, #16
 80006b4:	466c      	mov	r4, sp
 80006b6:	f103 0210 	add.w	r2, r3, #16
 80006ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006be:	e884 0003 	stmia.w	r4, {r0, r1}
 80006c2:	3304      	adds	r3, #4
 80006c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006c6:	4628      	mov	r0, r5
 80006c8:	f7ff feb9 	bl	800043e <ES_CalculateConditionForce>
 80006cc:	4603      	mov	r3, r0
 80006ce:	80bb      	strh	r3, [r7, #4]

			break;
 80006d0:	e044      	b.n	800075c <ES_CalculateNetForce+0x1bc>
			case ET_Damper:

				present_force = ES_CalculateConditionForce(Motor_GetSpeed(), effects[i].condition);
 80006d2:	f000 fb83 	bl	8000ddc <Motor_GetSpeed>
 80006d6:	eef0 7a40 	vmov.f32	s15, s0
 80006da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006de:	ee17 3a90 	vmov	r3, s15
 80006e2:	b21c      	sxth	r4, r3
 80006e4:	4938      	ldr	r1, [pc, #224]	; (80007c8 <ES_CalculateNetForce+0x228>)
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	4613      	mov	r3, r2
 80006ea:	011b      	lsls	r3, r3, #4
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	440b      	add	r3, r1
 80006f2:	3310      	adds	r3, #16
 80006f4:	466d      	mov	r5, sp
 80006f6:	f103 0210 	add.w	r2, r3, #16
 80006fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8000702:	3304      	adds	r3, #4
 8000704:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000706:	4620      	mov	r0, r4
 8000708:	f7ff fe99 	bl	800043e <ES_CalculateConditionForce>
 800070c:	4603      	mov	r3, r0
 800070e:	80bb      	strh	r3, [r7, #4]

			break;
 8000710:	e024      	b.n	800075c <ES_CalculateNetForce+0x1bc>
			case ET_Inertia:

				present_force = ES_CalculateConditionForce(Motor_GetAcceleration(), effects[i].condition);
 8000712:	f000 fb71 	bl	8000df8 <Motor_GetAcceleration>
 8000716:	eef0 7a40 	vmov.f32	s15, s0
 800071a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800071e:	ee17 3a90 	vmov	r3, s15
 8000722:	b21c      	sxth	r4, r3
 8000724:	4928      	ldr	r1, [pc, #160]	; (80007c8 <ES_CalculateNetForce+0x228>)
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	4613      	mov	r3, r2
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	1a9b      	subs	r3, r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	3310      	adds	r3, #16
 8000734:	466d      	mov	r5, sp
 8000736:	f103 0210 	add.w	r2, r3, #16
 800073a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800073e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000742:	3304      	adds	r3, #4
 8000744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000746:	4620      	mov	r0, r4
 8000748:	f7ff fe79 	bl	800043e <ES_CalculateConditionForce>
 800074c:	4603      	mov	r3, r0
 800074e:	80bb      	strh	r3, [r7, #4]

			break;
 8000750:	e004      	b.n	800075c <ES_CalculateNetForce+0x1bc>
			case ET_Friction:

			break;
			default:
				myprint_dec(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f000 fc1a 	bl	8000f8c <myprint_dec>
			break;
 8000758:	e000      	b.n	800075c <ES_CalculateNetForce+0x1bc>
			break;
 800075a:	bf00      	nop
			}

			net_force += present_force * ((float)effects[i].effect_block.gain/100);
 800075c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000760:	ee07 3a90 	vmov	s15, r3
 8000764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000768:	4917      	ldr	r1, [pc, #92]	; (80007c8 <ES_CalculateNetForce+0x228>)
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	011b      	lsls	r3, r3, #4
 8000770:	1a9b      	subs	r3, r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	440b      	add	r3, r1
 8000776:	3308      	adds	r3, #8
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	ee07 3a90 	vmov	s15, r3
 8000780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000784:	ed9f 6a11 	vldr	s12, [pc, #68]	; 80007cc <ES_CalculateNetForce+0x22c>
 8000788:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800078c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000794:	ee07 3a90 	vmov	s15, r3
 8000798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800079c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a4:	ee17 3a90 	vmov	r3, s15
 80007a8:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < MAX_EFFECTS; i++)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2b09      	cmp	r3, #9
 80007b4:	f77f af00 	ble.w	80005b8 <ES_CalculateNetForce+0x18>

		}
	}

	return net_force;
 80007b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	ecbd 8b02 	vpop	{d8}
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	20000064 	.word	0x20000064
 80007cc:	42c80000 	.word	0x42c80000

080007d0 <ES_AddEffect>:
 *
 * @note Postcondition	: None
 *
 ** **************************************************************************** */
uint16_t ES_AddEffect(struct Effect effect)
{
 80007d0:	b084      	sub	sp, #16
 80007d2:	b4b0      	push	{r4, r5, r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	f107 0418 	add.w	r4, r7, #24
 80007dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (int i = 0; i < MAX_EFFECTS; i++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	e02f      	b.n	8000846 <ES_AddEffect+0x76>
	{
		if (effects[i].active != 1)
 80007e6:	491d      	ldr	r1, [pc, #116]	; (800085c <ES_AddEffect+0x8c>)
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4613      	mov	r3, r2
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	1a9b      	subs	r3, r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	440b      	add	r3, r1
 80007f4:	3337      	adds	r3, #55	; 0x37
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d020      	beq.n	8000840 <ES_AddEffect+0x70>
		{
			effects[i] 					= effect;
 80007fe:	4917      	ldr	r1, [pc, #92]	; (800085c <ES_AddEffect+0x8c>)
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4613      	mov	r3, r2
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	1a9b      	subs	r3, r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	440b      	add	r3, r1
 800080c:	461d      	mov	r5, r3
 800080e:	f107 0418 	add.w	r4, r7, #24
 8000812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800081a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800081c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800081e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000822:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			effects[i].active 			= 1;
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <ES_AddEffect+0x8c>)
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4613      	mov	r3, r2
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	1a9b      	subs	r3, r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	440b      	add	r3, r1
 8000834:	3337      	adds	r3, #55	; 0x37
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]

			return i;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	b29b      	uxth	r3, r3
 800083e:	e006      	b.n	800084e <ES_AddEffect+0x7e>
	for (int i = 0; i < MAX_EFFECTS; i++)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b09      	cmp	r3, #9
 800084a:	ddcc      	ble.n	80007e6 <ES_AddEffect+0x16>
		}
	}

	return MAX_EFFECTS;
 800084c:	230a      	movs	r3, #10
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bcb0      	pop	{r4, r5, r7}
 8000856:	b004      	add	sp, #16
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000064 	.word	0x20000064

08000860 <ES_StartEffect>:
 *
 * @note Postcondition	: None
 *
 ** **************************************************************************** */
void ES_StartEffect(uint16_t index)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	80fb      	strh	r3, [r7, #6]
	if (effects[index].active)
 800086a:	88fa      	ldrh	r2, [r7, #6]
 800086c:	490d      	ldr	r1, [pc, #52]	; (80008a4 <ES_StartEffect+0x44>)
 800086e:	4613      	mov	r3, r2
 8000870:	011b      	lsls	r3, r3, #4
 8000872:	1a9b      	subs	r3, r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	3337      	adds	r3, #55	; 0x37
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d009      	beq.n	8000896 <ES_StartEffect+0x36>
	{
		effects[index].running = 1;
 8000882:	88fa      	ldrh	r2, [r7, #6]
 8000884:	4907      	ldr	r1, [pc, #28]	; (80008a4 <ES_StartEffect+0x44>)
 8000886:	4613      	mov	r3, r2
 8000888:	011b      	lsls	r3, r3, #4
 800088a:	1a9b      	subs	r3, r3, r2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	440b      	add	r3, r1
 8000890:	3336      	adds	r3, #54	; 0x36
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
	}
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000064 	.word	0x20000064

080008a8 <ES_PlayEffects>:
	}
}


void ES_PlayEffects(void)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
	int16_t force = ES_CalculateNetForce();
 80008ae:	f7ff fe77 	bl	80005a0 <ES_CalculateNetForce>
 80008b2:	4603      	mov	r3, r0
 80008b4:	807b      	strh	r3, [r7, #2]


	if (force < 0)
 80008b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	da09      	bge.n	80008d2 <ES_PlayEffects+0x2a>
	{
		Motor_SetDirection(MD_Right);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 fa08 	bl	8000cd4 <Motor_SetDirection>
		Motor_SetForce(force*-1);
 80008c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008c8:	425b      	negs	r3, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fa26 	bl	8000d1c <Motor_SetForce>
 80008d0:	e007      	b.n	80008e2 <ES_PlayEffects+0x3a>
	}
	else
	{
		Motor_SetDirection(MD_Left);
 80008d2:	2001      	movs	r0, #1
 80008d4:	f000 f9fe 	bl	8000cd4 <Motor_SetDirection>
		Motor_SetForce(force);
 80008d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fa1d 	bl	8000d1c <Motor_SetForce>
	}

	for (int i = 0; i < MAX_EFFECTS; i++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	e0c1      	b.n	8000a6c <ES_PlayEffects+0x1c4>
	{
		effects[i].tick++;
 80008e8:	4965      	ldr	r1, [pc, #404]	; (8000a80 <ES_PlayEffects+0x1d8>)
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4613      	mov	r3, r2
 80008ee:	011b      	lsls	r3, r3, #4
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	440b      	add	r3, r1
 80008f6:	3338      	adds	r3, #56	; 0x38
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	3301      	adds	r3, #1
 80008fe:	b298      	uxth	r0, r3
 8000900:	495f      	ldr	r1, [pc, #380]	; (8000a80 <ES_PlayEffects+0x1d8>)
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	4613      	mov	r3, r2
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	1a9b      	subs	r3, r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	440b      	add	r3, r1
 800090e:	3338      	adds	r3, #56	; 0x38
 8000910:	4602      	mov	r2, r0
 8000912:	801a      	strh	r2, [r3, #0]
		if (effects[i].active && effects[i].running != 1)
 8000914:	495a      	ldr	r1, [pc, #360]	; (8000a80 <ES_PlayEffects+0x1d8>)
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	4613      	mov	r3, r2
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	440b      	add	r3, r1
 8000922:	3337      	adds	r3, #55	; 0x37
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	d036      	beq.n	800099a <ES_PlayEffects+0xf2>
 800092c:	4954      	ldr	r1, [pc, #336]	; (8000a80 <ES_PlayEffects+0x1d8>)
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	4613      	mov	r3, r2
 8000932:	011b      	lsls	r3, r3, #4
 8000934:	1a9b      	subs	r3, r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	440b      	add	r3, r1
 800093a:	3336      	adds	r3, #54	; 0x36
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b01      	cmp	r3, #1
 8000942:	d02a      	beq.n	800099a <ES_PlayEffects+0xf2>
		{
			if (effects[i].tick == effects[i].effect_block.trigger_repeat_interval)
 8000944:	494e      	ldr	r1, [pc, #312]	; (8000a80 <ES_PlayEffects+0x1d8>)
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	4613      	mov	r3, r2
 800094a:	011b      	lsls	r3, r3, #4
 800094c:	1a9b      	subs	r3, r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	440b      	add	r3, r1
 8000952:	3338      	adds	r3, #56	; 0x38
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	b299      	uxth	r1, r3
 8000958:	4849      	ldr	r0, [pc, #292]	; (8000a80 <ES_PlayEffects+0x1d8>)
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	4613      	mov	r3, r2
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	1a9b      	subs	r3, r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4403      	add	r3, r0
 8000966:	3306      	adds	r3, #6
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	b29b      	uxth	r3, r3
 800096c:	4299      	cmp	r1, r3
 800096e:	d17a      	bne.n	8000a66 <ES_PlayEffects+0x1be>
			{
				effects[i].running = 1;
 8000970:	4943      	ldr	r1, [pc, #268]	; (8000a80 <ES_PlayEffects+0x1d8>)
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	4613      	mov	r3, r2
 8000976:	011b      	lsls	r3, r3, #4
 8000978:	1a9b      	subs	r3, r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	440b      	add	r3, r1
 800097e:	3336      	adds	r3, #54	; 0x36
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
				effects[i].tick = 0;
 8000984:	493e      	ldr	r1, [pc, #248]	; (8000a80 <ES_PlayEffects+0x1d8>)
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	4613      	mov	r3, r2
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	1a9b      	subs	r3, r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	440b      	add	r3, r1
 8000992:	3338      	adds	r3, #56	; 0x38
 8000994:	2200      	movs	r2, #0
 8000996:	801a      	strh	r2, [r3, #0]
			if (effects[i].tick == effects[i].effect_block.trigger_repeat_interval)
 8000998:	e065      	b.n	8000a66 <ES_PlayEffects+0x1be>
			}
		}
		else if (effects[i].effect_block.duration >= 1 && effects[i].running && effects[i].active)
 800099a:	4939      	ldr	r1, [pc, #228]	; (8000a80 <ES_PlayEffects+0x1d8>)
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	4613      	mov	r3, r2
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	1a9b      	subs	r3, r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	440b      	add	r3, r1
 80009a8:	3302      	adds	r3, #2
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d059      	beq.n	8000a66 <ES_PlayEffects+0x1be>
 80009b2:	4933      	ldr	r1, [pc, #204]	; (8000a80 <ES_PlayEffects+0x1d8>)
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	4613      	mov	r3, r2
 80009b8:	011b      	lsls	r3, r3, #4
 80009ba:	1a9b      	subs	r3, r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	440b      	add	r3, r1
 80009c0:	3336      	adds	r3, #54	; 0x36
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d04d      	beq.n	8000a66 <ES_PlayEffects+0x1be>
 80009ca:	492d      	ldr	r1, [pc, #180]	; (8000a80 <ES_PlayEffects+0x1d8>)
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	4613      	mov	r3, r2
 80009d0:	011b      	lsls	r3, r3, #4
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	440b      	add	r3, r1
 80009d8:	3337      	adds	r3, #55	; 0x37
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d041      	beq.n	8000a66 <ES_PlayEffects+0x1be>
		{
			if (effects[i].tick >= 	effects[i].envelope.attack_time +
 80009e2:	4927      	ldr	r1, [pc, #156]	; (8000a80 <ES_PlayEffects+0x1d8>)
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4613      	mov	r3, r2
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	1a9b      	subs	r3, r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	440b      	add	r3, r1
 80009f0:	3338      	adds	r3, #56	; 0x38
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	461c      	mov	r4, r3
 80009f8:	4921      	ldr	r1, [pc, #132]	; (8000a80 <ES_PlayEffects+0x1d8>)
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4613      	mov	r3, r2
 80009fe:	011b      	lsls	r3, r3, #4
 8000a00:	1a9b      	subs	r3, r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	440b      	add	r3, r1
 8000a06:	330c      	adds	r3, #12
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	4618      	mov	r0, r3
									  effects[i].envelope.fade_time +
 8000a0e:	491c      	ldr	r1, [pc, #112]	; (8000a80 <ES_PlayEffects+0x1d8>)
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4613      	mov	r3, r2
 8000a14:	011b      	lsls	r3, r3, #4
 8000a16:	1a9b      	subs	r3, r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	3310      	adds	r3, #16
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	b29b      	uxth	r3, r3
			if (effects[i].tick >= 	effects[i].envelope.attack_time +
 8000a22:	18c1      	adds	r1, r0, r3
									  effects[i].effect_block.duration)
 8000a24:	4816      	ldr	r0, [pc, #88]	; (8000a80 <ES_PlayEffects+0x1d8>)
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	011b      	lsls	r3, r3, #4
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4403      	add	r3, r0
 8000a32:	3302      	adds	r3, #2
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	b29b      	uxth	r3, r3
									  effects[i].envelope.fade_time +
 8000a38:	440b      	add	r3, r1
			if (effects[i].tick >= 	effects[i].envelope.attack_time +
 8000a3a:	429c      	cmp	r4, r3
 8000a3c:	db13      	blt.n	8000a66 <ES_PlayEffects+0x1be>
			{
				effects[i].running = 0;
 8000a3e:	4910      	ldr	r1, [pc, #64]	; (8000a80 <ES_PlayEffects+0x1d8>)
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	4613      	mov	r3, r2
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	1a9b      	subs	r3, r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	3336      	adds	r3, #54	; 0x36
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
				effects[i].tick = 0;
 8000a52:	490b      	ldr	r1, [pc, #44]	; (8000a80 <ES_PlayEffects+0x1d8>)
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	1a9b      	subs	r3, r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	440b      	add	r3, r1
 8000a60:	3338      	adds	r3, #56	; 0x38
 8000a62:	2200      	movs	r2, #0
 8000a64:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < MAX_EFFECTS; i++)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b09      	cmp	r3, #9
 8000a70:	f77f af3a 	ble.w	80008e8 <ES_PlayEffects+0x40>
			}
		}
	}
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd90      	pop	{r4, r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000064 	.word	0x20000064

08000a84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_GPIO_Init+0x74>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <MX_GPIO_Init+0x74>)
 8000a90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a94:	6153      	str	r3, [r2, #20]
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_GPIO_Init+0x74>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_GPIO_Init+0x74>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <MX_GPIO_Init+0x74>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	6153      	str	r3, [r2, #20]
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_GPIO_Init+0x74>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_GPIO_Init+0x74>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <MX_GPIO_Init+0x74>)
 8000ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ac4:	6153      	str	r3, [r2, #20]
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_GPIO_Init+0x74>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_GPIO_Init+0x74>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <MX_GPIO_Init+0x74>)
 8000ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000adc:	6153      	str	r3, [r2, #20]
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_GPIO_Init+0x74>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b5b0      	push	{r4, r5, r7, lr}
 8000afe:	b09c      	sub	sp, #112	; 0x70
 8000b00:	af0c      	add	r7, sp, #48	; 0x30
	  damper_effect.effect_block.effect_type = ET_Damper;

	  uint16_t damper_effect_index = ES_AddEffect(damper_effect);
	  ES_StartEffect(damper_effect_index);*/

	  struct Effect constant_force_effect = {0};
 8000b02:	463b      	mov	r3, r7
 8000b04:	223c      	movs	r2, #60	; 0x3c
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 fb3f 	bl	800618c <memset>

	  constant_force_effect.constant_force.magnitude = 200;
 8000b0e:	23c8      	movs	r3, #200	; 0xc8
 8000b10:	86bb      	strh	r3, [r7, #52]	; 0x34
	  constant_force_effect.effect_block.gain = 100;
 8000b12:	2364      	movs	r3, #100	; 0x64
 8000b14:	723b      	strb	r3, [r7, #8]
	  constant_force_effect.effect_block.effect_type = ET_ConstantForce;
 8000b16:	2300      	movs	r3, #0
 8000b18:	713b      	strb	r3, [r7, #4]

	  uint16_t constant_force_effect_index = ES_AddEffect(constant_force_effect);
 8000b1a:	466d      	mov	r5, sp
 8000b1c:	f107 0410 	add.w	r4, r7, #16
 8000b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b28:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b2c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000b30:	463b      	mov	r3, r7
 8000b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b34:	f7ff fe4c 	bl	80007d0 <ES_AddEffect>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  ES_StartEffect(constant_force_effect_index);
 8000b3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fe8e 	bl	8000860 <ES_StartEffect>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b44:	f001 fc92 	bl	800246c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b48:	f000 f84e 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4c:	f7ff ff9a 	bl	8000a84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b50:	f001 fbe4 	bl	800231c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000b54:	f001 fa24 	bl	8001fa0 <MX_TIM3_Init>
  MX_TIM15_Init();
 8000b58:	f001 fa78 	bl	800204c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  //Start rotary encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000b5c:	213c      	movs	r1, #60	; 0x3c
 8000b5e:	481b      	ldr	r0, [pc, #108]	; (8000bcc <main+0xd0>)
 8000b60:	f003 ff06 	bl	8004970 <HAL_TIM_Encoder_Start>

  Motor_Start();
 8000b64:	f000 f914 	bl	8000d90 <Motor_Start>

  //Initialize pedals/peripherals
  ADC_Init();
 8000b68:	f7ff fb3c 	bl	80001e4 <ADC_Init>

  //Find zero position


  myprint("Starting USB...\n\r");
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <main+0xd4>)
 8000b6e:	f000 f9ab 	bl	8000ec8 <myprint>
  myusb_Initialize();
 8000b72:	f000 fa39 	bl	8000fe8 <myusb_Initialize>
	  //myprint_dec(rotation_value);

	  Motor_SetForce(rotation_value);
	  Motor_SetDirection(direction);
*/
	  report.members.steering = htim3.Instance->CNT;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <main+0xd0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <main+0xd8>)
 8000b80:	819a      	strh	r2, [r3, #12]

	  report.members.throttle 	= Pedal_GetAxisValue(throttle);
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <main+0xdc>)
 8000b84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b88:	f7ff fc2c 	bl	80003e4 <Pedal_GetAxisValue>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <main+0xd8>)
 8000b92:	809a      	strh	r2, [r3, #4]
	  report.members.brake 		= Pedal_GetAxisValue(brake);
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <main+0xe0>)
 8000b96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b9a:	f7ff fc23 	bl	80003e4 <Pedal_GetAxisValue>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <main+0xd8>)
 8000ba4:	80da      	strh	r2, [r3, #6]
	  report.members.clutch		= Pedal_GetAxisValue(clutch);
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <main+0xe4>)
 8000ba8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bac:	f7ff fc1a 	bl	80003e4 <Pedal_GetAxisValue>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <main+0xd8>)
 8000bb6:	811a      	strh	r2, [r3, #8]
	  report.members.handbrake	= Pedal_GetAxisValue(handbrake);
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <main+0xe8>)
 8000bba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bbe:	f7ff fc11 	bl	80003e4 <Pedal_GetAxisValue>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <main+0xd8>)
 8000bc8:	815a      	strh	r2, [r3, #10]
	  report.members.steering = htim3.Instance->CNT;
 8000bca:	e7d4      	b.n	8000b76 <main+0x7a>
 8000bcc:	20000488 	.word	0x20000488
 8000bd0:	08006238 	.word	0x08006238
 8000bd4:	2000045c 	.word	0x2000045c
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	2000000c 	.word	0x2000000c
 8000be0:	20000018 	.word	0x20000018
 8000be4:	20000024 	.word	0x20000024

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0a6      	sub	sp, #152	; 0x98
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bf2:	2228      	movs	r2, #40	; 0x28
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f005 fac8 	bl	800618c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2258      	movs	r2, #88	; 0x58
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f005 faba 	bl	800618c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c20:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c22:	2301      	movs	r3, #1
 8000c24:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c26:	2310      	movs	r3, #16
 8000c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 ff27 	bl	8002aa0 <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000c58:	f000 f836 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2302      	movs	r3, #2
 8000c62:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c76:	2101      	movs	r1, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 ff65 	bl	8003b48 <HAL_RCC_ClockConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000c84:	f000 f820 	bl	8000cc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_TIM15
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <SystemClock_Config+0xdc>)
 8000c8a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8000c8c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000c90:	617b      	str	r3, [r7, #20]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLLCLK;
 8000c92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c96:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_PLLCLK;
 8000c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 8000c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV2;
 8000ca4:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4618      	mov	r0, r3
 8000cae:	f003 f981 	bl	8003fb4 <HAL_RCCEx_PeriphCLKConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000cb8:	f000 f806 	bl	8000cc8 <Error_Handler>
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3798      	adds	r7, #152	; 0x98
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	00620104 	.word	0x00620104

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>
	...

08000cd4 <Motor_SetDirection>:

volatile uint32_t motor_force = 0;
enum MotorDirection motor_direction = MD_Right;

void Motor_SetDirection(enum MotorDirection direction)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
	motor_direction = direction;
 8000cde:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <Motor_SetDirection+0x40>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	7013      	strb	r3, [r2, #0]
	if (direction == MD_Right)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d108      	bne.n	8000cfc <Motor_SetDirection+0x28>
	{
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000cea:	2100      	movs	r1, #0
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <Motor_SetDirection+0x44>)
 8000cee:	f003 fbe3 	bl	80044b8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	4808      	ldr	r0, [pc, #32]	; (8000d18 <Motor_SetDirection+0x44>)
 8000cf6:	f003 fceb 	bl	80046d0 <HAL_TIM_PWM_Stop>
	{
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
	}

}
 8000cfa:	e007      	b.n	8000d0c <Motor_SetDirection+0x38>
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <Motor_SetDirection+0x44>)
 8000d00:	f003 fbda 	bl	80044b8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8000d04:	2100      	movs	r1, #0
 8000d06:	4804      	ldr	r0, [pc, #16]	; (8000d18 <Motor_SetDirection+0x44>)
 8000d08:	f003 fce2 	bl	80046d0 <HAL_TIM_PWM_Stop>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200002cc 	.word	0x200002cc
 8000d18:	20000544 	.word	0x20000544

08000d1c <Motor_SetForce>:

void Motor_SetForce(uint32_t force)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	motor_force = 150;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <Motor_SetForce+0x68>)
 8000d26:	2296      	movs	r2, #150	; 0x96
 8000d28:	601a      	str	r2, [r3, #0]
	if (force + motor_force > 1000)
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <Motor_SetForce+0x68>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d36:	d904      	bls.n	8000d42 <Motor_SetForce+0x26>
	{
		motor_force = 1000;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <Motor_SetForce+0x68>)
 8000d3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e005      	b.n	8000d4e <Motor_SetForce+0x32>
	}
	else
	{
		motor_force += force;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <Motor_SetForce+0x68>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <Motor_SetForce+0x68>)
 8000d4c:	6013      	str	r3, [r2, #0]
	}
	motor_force /= 2;
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <Motor_SetForce+0x68>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	085b      	lsrs	r3, r3, #1
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <Motor_SetForce+0x68>)
 8000d56:	6013      	str	r3, [r2, #0]

	if (motor_direction == MD_Right)
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <Motor_SetForce+0x6c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d105      	bne.n	8000d6c <Motor_SetForce+0x50>
	{
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, motor_force);
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <Motor_SetForce+0x70>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <Motor_SetForce+0x68>)
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, motor_force);
	}
}
 8000d6a:	e004      	b.n	8000d76 <Motor_SetForce+0x5a>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, motor_force);
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <Motor_SetForce+0x70>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <Motor_SetForce+0x68>)
 8000d72:	6812      	ldr	r2, [r2, #0]
 8000d74:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200002c8 	.word	0x200002c8
 8000d88:	200002cc 	.word	0x200002cc
 8000d8c:	20000544 	.word	0x20000544

08000d90 <Motor_Start>:

void Motor_Start(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000d94:	2100      	movs	r1, #0
 8000d96:	4809      	ldr	r0, [pc, #36]	; (8000dbc <Motor_Start+0x2c>)
 8000d98:	f003 fb8e 	bl	80044b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	4807      	ldr	r0, [pc, #28]	; (8000dbc <Motor_Start+0x2c>)
 8000da0:	f003 fb8a 	bl	80044b8 <HAL_TIM_PWM_Start>
	Motor_SetForce(0);
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff ffb9 	bl	8000d1c <Motor_SetForce>
	Motor_SetDirection(MD_Right);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff ff92 	bl	8000cd4 <Motor_SetDirection>
	//LL_TIM_EnableCounter(TIM15);
	ready = 1;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <Motor_Start+0x30>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000544 	.word	0x20000544
 8000dc0:	200002c4 	.word	0x200002c4

08000dc4 <Motor_IsReady>:
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
}

uint8_t Motor_IsReady(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
	return ready;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <Motor_IsReady+0x14>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200002c4 	.word	0x200002c4

08000ddc <Motor_GetSpeed>:

float Motor_GetSpeed(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return motor_speed;
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <Motor_GetSpeed+0x18>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	ee07 3a90 	vmov	s15, r3
}
 8000de8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	200002bc 	.word	0x200002bc

08000df8 <Motor_GetAcceleration>:

float Motor_GetAcceleration(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
	uint16_t delta = motor_speed - previous_motor_speed;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <Motor_GetAcceleration+0x40>)
 8000e00:	ed93 7a00 	vldr	s14, [r3]
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <Motor_GetAcceleration+0x44>)
 8000e06:	edd3 7a00 	vldr	s15, [r3]
 8000e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e12:	ee17 3a90 	vmov	r3, s15
 8000e16:	80fb      	strh	r3, [r7, #6]

	return delta * 1000;
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e1e:	fb02 f303 	mul.w	r3, r2, r3
 8000e22:	ee07 3a90 	vmov	s15, r3
 8000e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	200002bc 	.word	0x200002bc
 8000e3c:	200002c0 	.word	0x200002c0

08000e40 <Motor_GetPosition>:

volatile int16_t Motor_GetPosition(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	return htim3.Instance->CNT;
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <Motor_GetPosition+0x18>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	b21b      	sxth	r3, r3
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000488 	.word	0x20000488

08000e5c <Motor_CalculateSpeed>:

//Called every 1ms
void Motor_CalculateSpeed(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	int16_t motor_position = Motor_GetPosition();
 8000e62:	f7ff ffed 	bl	8000e40 <Motor_GetPosition>
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
	int16_t delta = (motor_position - previous_motor_position);
 8000e6a:	88fa      	ldrh	r2, [r7, #6]
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <Motor_CalculateSpeed+0x60>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	80bb      	strh	r3, [r7, #4]
	previous_motor_position = motor_position;
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <Motor_CalculateSpeed+0x60>)
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	8013      	strh	r3, [r2, #0]

	delta *= 1000;
 8000e80:	88bb      	ldrh	r3, [r7, #4]
 8000e82:	461a      	mov	r2, r3
 8000e84:	0152      	lsls	r2, r2, #5
 8000e86:	1ad2      	subs	r2, r2, r3
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	80bb      	strh	r3, [r7, #4]

	motor_speed = delta / 28;
 8000e92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <Motor_CalculateSpeed+0x64>)
 8000e98:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9c:	441a      	add	r2, r3
 8000e9e:	1112      	asrs	r2, r2, #4
 8000ea0:	17db      	asrs	r3, r3, #31
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <Motor_CalculateSpeed+0x68>)
 8000eb0:	edc3 7a00 	vstr	s15, [r3]
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200002c6 	.word	0x200002c6
 8000ec0:	92492493 	.word	0x92492493
 8000ec4:	200002bc 	.word	0x200002bc

08000ec8 <myprint>:
#include "stdio.h"
#include "string.h"
#include "stdlib.h"

void myprint(char* string)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0b6      	sub	sp, #216	; 0xd8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	uint8_t buffer[200];
	uint16_t len = strlen(string);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff f97f 	bl	80001d4 <strlen>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2

	for(int i = 0; i < len; i++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000ee2:	e010      	b.n	8000f06 <myprint+0x3e>
	{
		buffer[i] = string[i];
 8000ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	7819      	ldrb	r1, [r3, #0]
 8000eee:	f107 0208 	add.w	r2, r7, #8
 8000ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ef6:	4413      	add	r3, r2
 8000ef8:	460a      	mov	r2, r1
 8000efa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < len; i++)
 8000efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000f00:	3301      	adds	r3, #1
 8000f02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000f06:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8000f0a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dbe8      	blt.n	8000ee4 <myprint+0x1c>
	}

	HAL_UART_Transmit(&huart3, buffer, len, 0xFFFF);
 8000f12:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8000f16:	f107 0108 	add.w	r1, r7, #8
 8000f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1e:	4803      	ldr	r0, [pc, #12]	; (8000f2c <myprint+0x64>)
 8000f20:	f004 fcdc 	bl	80058dc <HAL_UART_Transmit>
}
 8000f24:	bf00      	nop
 8000f26:	37d8      	adds	r7, #216	; 0xd8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000600 	.word	0x20000600

08000f30 <myprint_hex>:

void myprint_hex(int reg)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	char buffer[20];
	for (int i = 0; i < 20; i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	e008      	b.n	8000f50 <myprint_hex+0x20>
	{
		buffer[i] = '\0';
 8000f3e:	f107 0208 	add.w	r2, r7, #8
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	4413      	add	r3, r2
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	2b13      	cmp	r3, #19
 8000f54:	ddf3      	ble.n	8000f3e <myprint_hex+0xe>
	}
	itoa(reg, buffer, 16);
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f005 f912 	bl	8006188 <itoa>
	HAL_UART_Transmit(&huart3, buffer, 20, 0xFFFF);
 8000f64:	f107 0108 	add.w	r1, r7, #8
 8000f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f6c:	2214      	movs	r2, #20
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <myprint_hex+0x54>)
 8000f70:	f004 fcb4 	bl	80058dc <HAL_UART_Transmit>

	myprint("\r\n");
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <myprint_hex+0x58>)
 8000f76:	f7ff ffa7 	bl	8000ec8 <myprint>
}
 8000f7a:	bf00      	nop
 8000f7c:	3720      	adds	r7, #32
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000600 	.word	0x20000600
 8000f88:	0800624c 	.word	0x0800624c

08000f8c <myprint_dec>:

void myprint_dec(int reg)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	char buffer[20];
	for (int i = 0; i < 20; i++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	e008      	b.n	8000fac <myprint_dec+0x20>
	{
		buffer[i] = '\0';
 8000f9a:	f107 0208 	add.w	r2, r7, #8
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	2b13      	cmp	r3, #19
 8000fb0:	ddf3      	ble.n	8000f9a <myprint_dec+0xe>
	}
	itoa(reg, buffer, 10);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	220a      	movs	r2, #10
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f005 f8e4 	bl	8006188 <itoa>
	HAL_UART_Transmit(&huart3, buffer, 20, 0xFFFF);
 8000fc0:	f107 0108 	add.w	r1, r7, #8
 8000fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc8:	2214      	movs	r2, #20
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <myprint_dec+0x54>)
 8000fcc:	f004 fc86 	bl	80058dc <HAL_UART_Transmit>

	myprint("\r\n");
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <myprint_dec+0x58>)
 8000fd2:	f7ff ff79 	bl	8000ec8 <myprint>
}
 8000fd6:	bf00      	nop
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000600 	.word	0x20000600
 8000fe4:	0800624c 	.word	0x0800624c

08000fe8 <myusb_Initialize>:
/*
 * Memory locations found in stm32f303xe.h
 */

void myusb_Initialize(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
	//Initialize Descriptors
	DescriptorInitialization();
 8000fee:	f000 f8c5 	bl	800117c <DescriptorInitialization>

	//Initialize data in report
	report.members.report_id = 1;
 8000ff2:	4b59      	ldr	r3, [pc, #356]	; (8001158 <myusb_Initialize+0x170>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
	report.members.brake = 0;
 8000ff8:	4b57      	ldr	r3, [pc, #348]	; (8001158 <myusb_Initialize+0x170>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	80da      	strh	r2, [r3, #6]
	report.members.throttle = 0;
 8000ffe:	4b56      	ldr	r3, [pc, #344]	; (8001158 <myusb_Initialize+0x170>)
 8001000:	2200      	movs	r2, #0
 8001002:	809a      	strh	r2, [r3, #4]
	report.members.clutch = 0;
 8001004:	4b54      	ldr	r3, [pc, #336]	; (8001158 <myusb_Initialize+0x170>)
 8001006:	2200      	movs	r2, #0
 8001008:	811a      	strh	r2, [r3, #8]
	report.members.handbrake = 0;
 800100a:	4b53      	ldr	r3, [pc, #332]	; (8001158 <myusb_Initialize+0x170>)
 800100c:	2200      	movs	r2, #0
 800100e:	815a      	strh	r2, [r3, #10]
	report.members.buttons_low = 0;
 8001010:	4b51      	ldr	r3, [pc, #324]	; (8001158 <myusb_Initialize+0x170>)
 8001012:	2200      	movs	r2, #0
 8001014:	705a      	strb	r2, [r3, #1]
	report.members.buttons_mid = 0;
 8001016:	4b50      	ldr	r3, [pc, #320]	; (8001158 <myusb_Initialize+0x170>)
 8001018:	2200      	movs	r2, #0
 800101a:	709a      	strb	r2, [r3, #2]
	report.members.buttons_high = 0;
 800101c:	4b4e      	ldr	r3, [pc, #312]	; (8001158 <myusb_Initialize+0x170>)
 800101e:	2200      	movs	r2, #0
 8001020:	70da      	strb	r2, [r3, #3]
	report.members.steering = 0;
 8001022:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <myusb_Initialize+0x170>)
 8001024:	2200      	movs	r2, #0
 8001026:	819a      	strh	r2, [r3, #12]

	//myprint_dec(sizeof(ReportDescriptor));

	//Map USBz to registers
	USBz = USB;
 8001028:	4b4c      	ldr	r3, [pc, #304]	; (800115c <myusb_Initialize+0x174>)
 800102a:	4a4d      	ldr	r2, [pc, #308]	; (8001160 <myusb_Initialize+0x178>)
 800102c:	601a      	str	r2, [r3, #0]
	my_btable = (BTableLayout*)0x40006000;
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <myusb_Initialize+0x17c>)
 8001030:	4a4d      	ldr	r2, [pc, #308]	; (8001168 <myusb_Initialize+0x180>)
 8001032:	601a      	str	r2, [r3, #0]

	//Enable clocks
	__HAL_RCC_USB_CLK_ENABLE();
 8001034:	4b4d      	ldr	r3, [pc, #308]	; (800116c <myusb_Initialize+0x184>)
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	4a4c      	ldr	r2, [pc, #304]	; (800116c <myusb_Initialize+0x184>)
 800103a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800103e:	61d3      	str	r3, [r2, #28]
 8001040:	4b4a      	ldr	r3, [pc, #296]	; (800116c <myusb_Initialize+0x184>)
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]

	//Initialize interrupts + remapping
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 800104c:	4b48      	ldr	r3, [pc, #288]	; (8001170 <myusb_Initialize+0x188>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a47      	ldr	r2, [pc, #284]	; (8001170 <myusb_Initialize+0x188>)
 8001052:	f043 0320 	orr.w	r3, r3, #32
 8001056:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	204a      	movs	r0, #74	; 0x4a
 800105e:	f001 fb46 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8001062:	204a      	movs	r0, #74	; 0x4a
 8001064:	f001 fb5f 	bl	8002726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	204b      	movs	r0, #75	; 0x4b
 800106e:	f001 fb3e 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8001072:	204b      	movs	r0, #75	; 0x4b
 8001074:	f001 fb57 	bl	8002726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USBWakeUp_RMP_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	204c      	movs	r0, #76	; 0x4c
 800107e:	f001 fb36 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USBWakeUp_RMP_IRQn);
 8001082:	204c      	movs	r0, #76	; 0x4c
 8001084:	f001 fb4f 	bl	8002726 <HAL_NVIC_EnableIRQ>

	//Configure USB GPIO
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001088:	4b38      	ldr	r3, [pc, #224]	; (800116c <myusb_Initialize+0x184>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	4a37      	ldr	r2, [pc, #220]	; (800116c <myusb_Initialize+0x184>)
 800108e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001092:	6153      	str	r3, [r2, #20]
 8001094:	4b35      	ldr	r3, [pc, #212]	; (800116c <myusb_Initialize+0x184>)
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010b4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80010c2:	230e      	movs	r3, #14
 80010c4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	4619      	mov	r1, r3
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d0:	f001 fb44 	bl	800275c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010d4:	2340      	movs	r3, #64	; 0x40
 80010d6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	4619      	mov	r1, r3
 80010ea:	4822      	ldr	r0, [pc, #136]	; (8001174 <myusb_Initialize+0x18c>)
 80010ec:	f001 fb36 	bl	800275c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	481f      	ldr	r0, [pc, #124]	; (8001174 <myusb_Initialize+0x18c>)
 80010f6:	f001 fcbb 	bl	8002a70 <HAL_GPIO_WritePin>

	//Start USB peripheral
	USBz->CNTR = 1;	//Start transceiver
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <myusb_Initialize+0x174>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2201      	movs	r2, #1
 8001100:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	for (int i = 0; i < 1000; i++)	//Delay according to datasheet
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	e003      	b.n	8001112 <myusb_Initialize+0x12a>
	{
		__asm volatile("nop");
 800110a:	bf00      	nop
	for (int i = 0; i < 1000; i++)	//Delay according to datasheet
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	3301      	adds	r3, #1
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001118:	dbf7      	blt.n	800110a <myusb_Initialize+0x122>
	}

	//De-assert reset
	USBz->CNTR = 0;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <myusb_Initialize+0x174>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	//Clear pending interrupts
	USBz->ISTR = 0U;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <myusb_Initialize+0x174>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2200      	movs	r2, #0
 800112a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	//Enable these USB Interrupts
	USBz->CNTR |= USB_CNTR_RESETM | USB_CNTR_CTRM | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ESOFM;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <myusb_Initialize+0x174>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001136:	b299      	uxth	r1, r3
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <myusb_Initialize+0x174>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <myusb_Initialize+0x190>)
 800113e:	430b      	orrs	r3, r1
 8001140:	b29b      	uxth	r3, r3
 8001142:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40

	//Enable pull up to start enumeration
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	2140      	movs	r1, #64	; 0x40
 800114a:	480a      	ldr	r0, [pc, #40]	; (8001174 <myusb_Initialize+0x18c>)
 800114c:	f001 fc90 	bl	8002a70 <HAL_GPIO_WritePin>

}
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000045c 	.word	0x2000045c
 800115c:	20000310 	.word	0x20000310
 8001160:	40005c00 	.word	0x40005c00
 8001164:	20000314 	.word	0x20000314
 8001168:	40006000 	.word	0x40006000
 800116c:	40021000 	.word	0x40021000
 8001170:	40010000 	.word	0x40010000
 8001174:	48001800 	.word	0x48001800
 8001178:	ffff9d00 	.word	0xffff9d00

0800117c <DescriptorInitialization>:

void DescriptorInitialization(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
	//Just device descriptor until I reach further requests
	device.descriptor.bLength = 18;
 8001180:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <DescriptorInitialization+0x128>)
 8001182:	2212      	movs	r2, #18
 8001184:	701a      	strb	r2, [r3, #0]
	device.descriptor.bDescriptorType = 0x01;
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <DescriptorInitialization+0x128>)
 8001188:	2201      	movs	r2, #1
 800118a:	705a      	strb	r2, [r3, #1]
	device.descriptor.bcdUSB = 0x0110;
 800118c:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <DescriptorInitialization+0x128>)
 800118e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001192:	805a      	strh	r2, [r3, #2]
	device.descriptor.bDeviceClass = 0x00;
 8001194:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <DescriptorInitialization+0x128>)
 8001196:	2200      	movs	r2, #0
 8001198:	711a      	strb	r2, [r3, #4]
	device.descriptor.bDeviceSubClass = 0x00;
 800119a:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <DescriptorInitialization+0x128>)
 800119c:	2200      	movs	r2, #0
 800119e:	715a      	strb	r2, [r3, #5]
	device.descriptor.bDeviceProtocol = 0x00;
 80011a0:	4b40      	ldr	r3, [pc, #256]	; (80012a4 <DescriptorInitialization+0x128>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	719a      	strb	r2, [r3, #6]
	device.descriptor.bMaxPacketSize0 = 64;
 80011a6:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <DescriptorInitialization+0x128>)
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	71da      	strb	r2, [r3, #7]
	device.descriptor.idVendor = 0x045e;	//03ED
 80011ac:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <DescriptorInitialization+0x128>)
 80011ae:	f240 425e 	movw	r2, #1118	; 0x45e
 80011b2:	811a      	strh	r2, [r3, #8]
	device.descriptor.idProduct = 0x007D;	//2FF4
 80011b4:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <DescriptorInitialization+0x128>)
 80011b6:	227d      	movs	r2, #125	; 0x7d
 80011b8:	815a      	strh	r2, [r3, #10]
	device.descriptor.bcdDevice = 0x0100;
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <DescriptorInitialization+0x128>)
 80011bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c0:	819a      	strh	r2, [r3, #12]
	device.descriptor.iManufacturer = 0x00;
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <DescriptorInitialization+0x128>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	739a      	strb	r2, [r3, #14]
	device.descriptor.iProduct = 0x00;
 80011c8:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <DescriptorInitialization+0x128>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	73da      	strb	r2, [r3, #15]
	device.descriptor.iSerialNumber = 0x00;
 80011ce:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <DescriptorInitialization+0x128>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	741a      	strb	r2, [r3, #16]
	device.descriptor.bNumConfigurations = 1;
 80011d4:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <DescriptorInitialization+0x128>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	745a      	strb	r2, [r3, #17]

	configuration.descriptor.bLength = 0x09;
 80011da:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <DescriptorInitialization+0x12c>)
 80011dc:	2209      	movs	r2, #9
 80011de:	701a      	strb	r2, [r3, #0]
	configuration.descriptor.bDescriptorType = 0x02;
 80011e0:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <DescriptorInitialization+0x12c>)
 80011e2:	2202      	movs	r2, #2
 80011e4:	705a      	strb	r2, [r3, #1]
	configuration.descriptor.wTotalLength = 0x22;
 80011e6:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <DescriptorInitialization+0x12c>)
 80011e8:	2222      	movs	r2, #34	; 0x22
 80011ea:	805a      	strh	r2, [r3, #2]
	configuration.descriptor.bNumInterfaces = 0x01;
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <DescriptorInitialization+0x12c>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	711a      	strb	r2, [r3, #4]
	configuration.descriptor.bConfigurationValue = 0x01;
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <DescriptorInitialization+0x12c>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	715a      	strb	r2, [r3, #5]
	configuration.descriptor.iConfiguration = 0x00;
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <DescriptorInitialization+0x12c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	719a      	strb	r2, [r3, #6]
	configuration.descriptor.bmAttributes = 0xC0;
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <DescriptorInitialization+0x12c>)
 8001200:	22c0      	movs	r2, #192	; 0xc0
 8001202:	71da      	strb	r2, [r3, #7]
	configuration.descriptor.MaxPower = 0x00;
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <DescriptorInitialization+0x12c>)
 8001206:	2200      	movs	r2, #0
 8001208:	721a      	strb	r2, [r3, #8]

	interface.descriptor.bLength = 0x09;
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <DescriptorInitialization+0x130>)
 800120c:	2209      	movs	r2, #9
 800120e:	701a      	strb	r2, [r3, #0]
	interface.descriptor.bDescriptorType = 0x04;
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <DescriptorInitialization+0x130>)
 8001212:	2204      	movs	r2, #4
 8001214:	705a      	strb	r2, [r3, #1]
	interface.descriptor.bInterfaceNumber = 0x00;
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <DescriptorInitialization+0x130>)
 8001218:	2200      	movs	r2, #0
 800121a:	709a      	strb	r2, [r3, #2]
	interface.descriptor.bAlternateSetting = 0x00;
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <DescriptorInitialization+0x130>)
 800121e:	2200      	movs	r2, #0
 8001220:	70da      	strb	r2, [r3, #3]
	interface.descriptor.bNumEndpoints = 0x01;
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <DescriptorInitialization+0x130>)
 8001224:	2201      	movs	r2, #1
 8001226:	711a      	strb	r2, [r3, #4]
	interface.descriptor.bInterfaceClass = 0x03;
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <DescriptorInitialization+0x130>)
 800122a:	2203      	movs	r2, #3
 800122c:	715a      	strb	r2, [r3, #5]
	interface.descriptor.bInterfaceSubClass = 0x00;
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <DescriptorInitialization+0x130>)
 8001230:	2200      	movs	r2, #0
 8001232:	719a      	strb	r2, [r3, #6]
	interface.descriptor.bInterfaceProtocol = 0x00;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <DescriptorInitialization+0x130>)
 8001236:	2200      	movs	r2, #0
 8001238:	71da      	strb	r2, [r3, #7]
	interface.descriptor.iInterface = 0x00;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <DescriptorInitialization+0x130>)
 800123c:	2200      	movs	r2, #0
 800123e:	721a      	strb	r2, [r3, #8]

	endpoint.descriptor.bLength = 0x07;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <DescriptorInitialization+0x134>)
 8001242:	2207      	movs	r2, #7
 8001244:	701a      	strb	r2, [r3, #0]
	endpoint.descriptor.bDescriptorType = 0x05;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <DescriptorInitialization+0x134>)
 8001248:	2205      	movs	r2, #5
 800124a:	705a      	strb	r2, [r3, #1]
	endpoint.descriptor.bEndpointAddress = 0x81;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <DescriptorInitialization+0x134>)
 800124e:	2281      	movs	r2, #129	; 0x81
 8001250:	709a      	strb	r2, [r3, #2]
	endpoint.descriptor.bmAttributes = 0x03;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <DescriptorInitialization+0x134>)
 8001254:	2203      	movs	r2, #3
 8001256:	70da      	strb	r2, [r3, #3]
	endpoint.descriptor.wMaxPacketSize = 0x40; //64 bytes
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <DescriptorInitialization+0x134>)
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	809a      	strh	r2, [r3, #4]
	endpoint.descriptor.bInterval = 0x1;		//1ms
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <DescriptorInitialization+0x134>)
 8001260:	2201      	movs	r2, #1
 8001262:	719a      	strb	r2, [r3, #6]

	hid.descriptor.bLength = 0x09;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <DescriptorInitialization+0x138>)
 8001266:	2209      	movs	r2, #9
 8001268:	701a      	strb	r2, [r3, #0]
	hid.descriptor.bDescriptorType = 0x21;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <DescriptorInitialization+0x138>)
 800126c:	2221      	movs	r2, #33	; 0x21
 800126e:	705a      	strb	r2, [r3, #1]
	hid.descriptor.bcdHID = 0x111;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <DescriptorInitialization+0x138>)
 8001272:	f240 1211 	movw	r2, #273	; 0x111
 8001276:	805a      	strh	r2, [r3, #2]
	hid.descriptor.bCountryCode = 0x00;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <DescriptorInitialization+0x138>)
 800127a:	2200      	movs	r2, #0
 800127c:	711a      	strb	r2, [r3, #4]
	hid.descriptor.bNumDescriptors = 0x01;
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <DescriptorInitialization+0x138>)
 8001280:	2201      	movs	r2, #1
 8001282:	715a      	strb	r2, [r3, #5]
	hid.descriptor.bDescriptorTypeReport = 0x22;
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <DescriptorInitialization+0x138>)
 8001286:	2222      	movs	r2, #34	; 0x22
 8001288:	719a      	strb	r2, [r3, #6]
	hid.descriptor.wDescriptorLength = 117;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <DescriptorInitialization+0x138>)
 800128c:	2200      	movs	r2, #0
 800128e:	f042 0275 	orr.w	r2, r2, #117	; 0x75
 8001292:	71da      	strb	r2, [r3, #7]
 8001294:	2200      	movs	r2, #0
 8001296:	721a      	strb	r2, [r3, #8]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	200002d0 	.word	0x200002d0
 80012a8:	200002e4 	.word	0x200002e4
 80012ac:	200002f0 	.word	0x200002f0
 80012b0:	200002fc 	.word	0x200002fc
 80012b4:	20000304 	.word	0x20000304

080012b8 <ReadEndpoint>:
/* -----------FUNCTIONS--------------*/
/*-----------------------------------*/

//Reads single byte past buffer if num_bytes is odd. Shouldn't result in any issues...
void ReadEndpoint(uint8_t endpoint, uint8_t num_bytes)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
	if (num_bytes != 0)
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d02a      	beq.n	8001324 <ReadEndpoint+0x6c>
	{
		if ((num_bytes % 2) != 0)
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <ReadEndpoint+0x28>
		{
			num_bytes += 1;
 80012da:	79bb      	ldrb	r3, [r7, #6]
 80012dc:	3301      	adds	r3, #1
 80012de:	71bb      	strb	r3, [r7, #6]
		}
		//Get offset to endpoint n RX buffer
		uint16_t offset = *(volatile uint16_t*)((endpoint*8 + 4) + 0x40006000);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	00da      	lsls	r2, r3, #3
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <ReadEndpoint+0x78>)
 80012e6:	4413      	add	r3, r2
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	827b      	strh	r3, [r7, #18]

		//Point to RX buffer
		volatile uint16_t* location = ((uint16_t*)(0x40006000 + offset));
 80012ec:	8a7b      	ldrh	r3, [r7, #18]
 80012ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012f2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80012f6:	60fb      	str	r3, [r7, #12]

		for (int i = 0; i < (num_bytes/2); i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	e00b      	b.n	8001316 <ReadEndpoint+0x5e>
		{
			read_buffer[i] = ((uint16_t*)location)[i];
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4413      	add	r3, r2
 8001306:	8819      	ldrh	r1, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <ReadEndpoint+0x7c>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < (num_bytes/2); i++)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	085b      	lsrs	r3, r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	4293      	cmp	r3, r2
 8001322:	dbec      	blt.n	80012fe <ReadEndpoint+0x46>
		}
	}
}
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40006004 	.word	0x40006004
 8001334:	20000318 	.word	0x20000318

08001338 <WriteEndpoint>:

//Reads single byte past data_buffer if num_bytes is odd. Shouldn't result in any issues...
void WriteEndpoint(uint8_t endpoint, uint16_t* data_buffer, uint8_t num_bytes)
{
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
	//Get offset to endpoint n TX buffer
	uint16_t offset = *(uint16_t*)((endpoint*8) + 0x40006000);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800134e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	827b      	strh	r3, [r7, #18]

	//Point to TX buffer
	volatile uint16_t* location = ((uint16_t*)(0x40006000 + offset));
 8001358:	8a7b      	ldrh	r3, [r7, #18]
 800135a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800135e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001362:	60fb      	str	r3, [r7, #12]

	my_btable[endpoint].COUNT_TX = num_bytes;
 8001364:	4b28      	ldr	r3, [pc, #160]	; (8001408 <WriteEndpoint+0xd0>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	79ba      	ldrb	r2, [r7, #6]
 8001370:	b292      	uxth	r2, r2
 8001372:	805a      	strh	r2, [r3, #2]

	if ((num_bytes%2) != 0)
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <WriteEndpoint+0x54>
		num_bytes = (num_bytes/2) + 1;
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	3301      	adds	r3, #1
 8001388:	71bb      	strb	r3, [r7, #6]
 800138a:	e002      	b.n	8001392 <WriteEndpoint+0x5a>
	else
		num_bytes = num_bytes/2;
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	085b      	lsrs	r3, r3, #1
 8001390:	71bb      	strb	r3, [r7, #6]

	for (int i = 0; i < num_bytes; i++)
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e00c      	b.n	80013b2 <WriteEndpoint+0x7a>
	{
		location[i] = data_buffer[i];
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	441a      	add	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	68f9      	ldr	r1, [r7, #12]
 80013a6:	440b      	add	r3, r1
 80013a8:	8812      	ldrh	r2, [r2, #0]
 80013aa:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < num_bytes; i++)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	dbee      	blt.n	8001398 <WriteEndpoint+0x60>
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	72fb      	strb	r3, [r7, #11]
 80013be:	2303      	movs	r3, #3
 80013c0:	813b      	strh	r3, [r7, #8]
	}
}

__attribute__((always_inline)) inline static void SetTXResponse(uint8_t endpoint, uint16_t response)
{
	*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) = 0x8FBF & (*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) ^ (response << 4));
 80013c2:	7afb      	ldrb	r3, [r7, #11]
 80013c4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80013c8:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	893b      	ldrh	r3, [r7, #8]
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4053      	eors	r3, r2
 80013da:	b21b      	sxth	r3, r3
 80013dc:	b29a      	uxth	r2, r3
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80013e4:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f422 43e0 	bic.w	r3, r2, #28672	; 0x7000
 80013f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	800b      	strh	r3, [r1, #0]
}
 80013f8:	bf00      	nop
}
 80013fa:	bf00      	nop
 80013fc:	371c      	adds	r7, #28
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000314 	.word	0x20000314

0800140c <EndpointTX>:
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	e883 0006 	stmia.w	r3, {r1, r2}
 8001418:	4603      	mov	r3, r0
 800141a:	73fb      	strb	r3, [r7, #15]
	if (endpoint_0_tx.tx_length == 0)
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <EndpointTX+0xa8>)
 800141e:	88db      	ldrh	r3, [r3, #6]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10d      	bne.n	8001440 <EndpointTX+0x34>
		WriteEndpoint(endpoint, endpoint_0_tx.buffer, 0);
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <EndpointTX+0xa8>)
 8001426:	6819      	ldr	r1, [r3, #0]
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	2200      	movs	r2, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff83 	bl	8001338 <WriteEndpoint>
		endpoint_0_tx.tx_finished = 1;
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <EndpointTX+0xa8>)
 8001434:	2201      	movs	r2, #1
 8001436:	711a      	strb	r2, [r3, #4]
		endpoint_0_tx.tx_increments = 0;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <EndpointTX+0xa8>)
 800143a:	2200      	movs	r2, #0
 800143c:	715a      	strb	r2, [r3, #5]
}
 800143e:	e034      	b.n	80014aa <EndpointTX+0x9e>
	else if (endpoint_0_tx.tx_length >= 64)
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <EndpointTX+0xa8>)
 8001442:	88db      	ldrh	r3, [r3, #6]
 8001444:	2b3f      	cmp	r3, #63	; 0x3f
 8001446:	d91a      	bls.n	800147e <EndpointTX+0x72>
		WriteEndpoint(endpoint, endpoint_0_tx.buffer + (endpoint_0_tx.tx_increments * 64), 64);
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <EndpointTX+0xa8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a19      	ldr	r2, [pc, #100]	; (80014b4 <EndpointTX+0xa8>)
 800144e:	7952      	ldrb	r2, [r2, #5]
 8001450:	0192      	lsls	r2, r2, #6
 8001452:	1899      	adds	r1, r3, r2
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	2240      	movs	r2, #64	; 0x40
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff6d 	bl	8001338 <WriteEndpoint>
		endpoint_0_tx.tx_length -= 64;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <EndpointTX+0xa8>)
 8001460:	88db      	ldrh	r3, [r3, #6]
 8001462:	3b40      	subs	r3, #64	; 0x40
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <EndpointTX+0xa8>)
 8001468:	80da      	strh	r2, [r3, #6]
		endpoint_0_tx.tx_finished = 0;
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <EndpointTX+0xa8>)
 800146c:	2200      	movs	r2, #0
 800146e:	711a      	strb	r2, [r3, #4]
		endpoint_0_tx.tx_increments++;
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <EndpointTX+0xa8>)
 8001472:	795b      	ldrb	r3, [r3, #5]
 8001474:	3301      	adds	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <EndpointTX+0xa8>)
 800147a:	715a      	strb	r2, [r3, #5]
}
 800147c:	e015      	b.n	80014aa <EndpointTX+0x9e>
		WriteEndpoint(endpoint, endpoint_0_tx.buffer + (endpoint_0_tx.tx_increments * 64), endpoint_0_tx.tx_length);
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <EndpointTX+0xa8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <EndpointTX+0xa8>)
 8001484:	7952      	ldrb	r2, [r2, #5]
 8001486:	0192      	lsls	r2, r2, #6
 8001488:	1899      	adds	r1, r3, r2
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <EndpointTX+0xa8>)
 800148c:	88db      	ldrh	r3, [r3, #6]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff50 	bl	8001338 <WriteEndpoint>
		endpoint_0_tx.tx_length = 0;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <EndpointTX+0xa8>)
 800149a:	2200      	movs	r2, #0
 800149c:	80da      	strh	r2, [r3, #6]
		endpoint_0_tx.tx_finished = 1;
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <EndpointTX+0xa8>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	711a      	strb	r2, [r3, #4]
		endpoint_0_tx.tx_increments = 0;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <EndpointTX+0xa8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	715a      	strb	r2, [r3, #5]
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000046c 	.word	0x2000046c

080014b8 <USB_HP_IRQHandler>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <USB_LP_IRQHandler>:
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	if (USBz->ISTR & USB_ISTR_CTR)
 80014cc:	4b7f      	ldr	r3, [pc, #508]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da01      	bge.n	80014e0 <USB_LP_IRQHandler+0x18>
		EndpointCallback();
 80014dc:	f000 f902 	bl	80016e4 <EndpointCallback>
	if (USBz->ISTR & USB_ISTR_PMAOVR)
 80014e0:	4b7a      	ldr	r3, [pc, #488]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <USB_LP_IRQHandler+0x3c>
		USBz->ISTR = ~USB_ISTR_PMAOVR;
 80014f2:	4b76      	ldr	r3, [pc, #472]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80014fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		myprint("PMAOVR Interrupt\r\n");
 80014fe:	4874      	ldr	r0, [pc, #464]	; (80016d0 <USB_LP_IRQHandler+0x208>)
 8001500:	f7ff fce2 	bl	8000ec8 <myprint>
	if (USBz->ISTR & USB_ISTR_ERR)
 8001504:	4b71      	ldr	r3, [pc, #452]	; (80016cc <USB_LP_IRQHandler+0x204>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800150c:	b29b      	uxth	r3, r3
 800150e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <USB_LP_IRQHandler+0x5a>
		USBz->ISTR = ~USB_ISTR_ERR;
 8001516:	4b6d      	ldr	r3, [pc, #436]	; (80016cc <USB_LP_IRQHandler+0x204>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 800151e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	if (USBz->ISTR & USB_ISTR_SUSP)
 8001522:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <USB_LP_IRQHandler+0x204>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800152a:	b29b      	uxth	r3, r3
 800152c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001530:	2b00      	cmp	r3, #0
 8001532:	d020      	beq.n	8001576 <USB_LP_IRQHandler+0xae>
		USBz->CNTR |= USB_CNTR_FSUSP;
 8001534:	4b65      	ldr	r3, [pc, #404]	; (80016cc <USB_LP_IRQHandler+0x204>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b63      	ldr	r3, [pc, #396]	; (80016cc <USB_LP_IRQHandler+0x204>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0208 	orr.w	r2, r2, #8
 8001546:	b292      	uxth	r2, r2
 8001548:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		USBz->ISTR = ~USB_ISTR_SUSP;
 800154c:	4b5f      	ldr	r3, [pc, #380]	; (80016cc <USB_LP_IRQHandler+0x204>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8001554:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		USBz->CNTR |= USB_CNTR_LPMODE;
 8001558:	4b5c      	ldr	r3, [pc, #368]	; (80016cc <USB_LP_IRQHandler+0x204>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001560:	b29a      	uxth	r2, r3
 8001562:	4b5a      	ldr	r3, [pc, #360]	; (80016cc <USB_LP_IRQHandler+0x204>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0204 	orr.w	r2, r2, #4
 800156a:	b292      	uxth	r2, r2
 800156c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		myprint("SUSP Interrupt\r\n");
 8001570:	4858      	ldr	r0, [pc, #352]	; (80016d4 <USB_LP_IRQHandler+0x20c>)
 8001572:	f7ff fca9 	bl	8000ec8 <myprint>
	if (USBz->ISTR & USB_ISTR_WKUP)
 8001576:	4b55      	ldr	r3, [pc, #340]	; (80016cc <USB_LP_IRQHandler+0x204>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800157e:	b29b      	uxth	r3, r3
 8001580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d029      	beq.n	80015dc <USB_LP_IRQHandler+0x114>
		USBz->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001588:	4b50      	ldr	r3, [pc, #320]	; (80016cc <USB_LP_IRQHandler+0x204>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b4e      	ldr	r3, [pc, #312]	; (80016cc <USB_LP_IRQHandler+0x204>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0204 	bic.w	r2, r2, #4
 800159a:	b292      	uxth	r2, r2
 800159c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		USBz->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015a0:	4b4a      	ldr	r3, [pc, #296]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b48      	ldr	r3, [pc, #288]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0208 	bic.w	r2, r2, #8
 80015b2:	b292      	uxth	r2, r2
 80015b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		USBz->ISTR = ~USB_ISTR_WKUP;
 80015b8:	4b44      	ldr	r3, [pc, #272]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f64e 72ff 	movw	r2, #61439	; 0xefff
 80015c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		USBz->CNTR |= USB_CNTR_RESETM | USB_CNTR_CTRM | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ESOFM | USB_CNTR_PMAOVRM | USB_CNTR_ERRM | USB_CNTR_SOFM;	//Enable these USB Interrupts
 80015c4:	4b41      	ldr	r3, [pc, #260]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f062 02ff 	orn	r2, r2, #255	; 0xff
 80015d6:	b292      	uxth	r2, r2
 80015d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	if (USBz->ISTR & USB_ISTR_RESET)
 80015dc:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d04e      	beq.n	800168c <USB_LP_IRQHandler+0x1c4>
		USBz->ISTR = ~USB_ISTR_RESET;
 80015ee:	4b37      	ldr	r3, [pc, #220]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80015f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		USBz->BTABLE = 0;
 80015fa:	4b34      	ldr	r3, [pc, #208]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		USBz->EP0R = USB_EP_CONTROL | (2 << 4) | (3 << 12);
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <USB_LP_IRQHandler+0x204>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f243 2220 	movw	r2, #12832	; 0x3220
 800160c:	801a      	strh	r2, [r3, #0]
		USBz->EP1R = USB_EP_INTERRUPT | (3 << 4) | (3 << 12) | USB_EP_DTOG_RX | USB_EP_DTOG_TX | 0x1;
 800160e:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <USB_LP_IRQHandler+0x204>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f247 6271 	movw	r2, #30321	; 0x7671
 8001616:	809a      	strh	r2, [r3, #4]
		my_btable[0].ADDR_TX = (uint16_t)0x20;
 8001618:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <USB_LP_IRQHandler+0x210>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2220      	movs	r2, #32
 800161e:	801a      	strh	r2, [r3, #0]
		my_btable[0].COUNT_TX = (uint16_t)0;
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <USB_LP_IRQHandler+0x210>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	805a      	strh	r2, [r3, #2]
		my_btable[0].ADDR_RX = (uint16_t)0x60;
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <USB_LP_IRQHandler+0x210>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2260      	movs	r2, #96	; 0x60
 800162e:	809a      	strh	r2, [r3, #4]
		my_btable[0].COUNT_RX = (uint16_t)0x8400;
 8001630:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <USB_LP_IRQHandler+0x210>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 8001638:	80da      	strh	r2, [r3, #6]
		my_btable[1].ADDR_TX = (uint16_t)0xA0;
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <USB_LP_IRQHandler+0x210>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3308      	adds	r3, #8
 8001640:	22a0      	movs	r2, #160	; 0xa0
 8001642:	801a      	strh	r2, [r3, #0]
		my_btable[1].COUNT_TX = (uint16_t)0;
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <USB_LP_IRQHandler+0x210>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3308      	adds	r3, #8
 800164a:	2200      	movs	r2, #0
 800164c:	805a      	strh	r2, [r3, #2]
		my_btable[1].ADDR_RX = (uint16_t)0xE0;
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <USB_LP_IRQHandler+0x210>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3308      	adds	r3, #8
 8001654:	22e0      	movs	r2, #224	; 0xe0
 8001656:	809a      	strh	r2, [r3, #4]
		my_btable[1].COUNT_RX = (uint16_t)0x8400;
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <USB_LP_IRQHandler+0x210>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3308      	adds	r3, #8
 800165e:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 8001662:	80da      	strh	r2, [r3, #6]
		USBz->CNTR |= USB_CNTR_RESETM | USB_CNTR_CTRM | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ESOFM;
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <USB_LP_IRQHandler+0x204>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800166c:	b299      	uxth	r1, r3
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <USB_LP_IRQHandler+0x204>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <USB_LP_IRQHandler+0x214>)
 8001674:	430b      	orrs	r3, r1
 8001676:	b29b      	uxth	r3, r3
 8001678:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		USBz->DADDR = USB_DADDR_EF;
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <USB_LP_IRQHandler+0x204>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		myprint("Reset Interrupt\r\n");
 8001686:	4816      	ldr	r0, [pc, #88]	; (80016e0 <USB_LP_IRQHandler+0x218>)
 8001688:	f7ff fc1e 	bl	8000ec8 <myprint>
	if (USBz->ISTR & USB_ISTR_SOF)
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <USB_LP_IRQHandler+0x204>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001694:	b29b      	uxth	r3, r3
 8001696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <USB_LP_IRQHandler+0x1e2>
		USBz->ISTR = ~USB_ISTR_SOF;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 80016a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	if (USBz->ISTR & USB_ISTR_ESOF)
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <USB_LP_IRQHandler+0x200>
		USBz->ISTR = ~USB_ISTR_ESOF;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <USB_LP_IRQHandler+0x204>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80016c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000310 	.word	0x20000310
 80016d0:	08006250 	.word	0x08006250
 80016d4:	08006264 	.word	0x08006264
 80016d8:	20000314 	.word	0x20000314
 80016dc:	ffff9d00 	.word	0xffff9d00
 80016e0:	08006278 	.word	0x08006278

080016e4 <EndpointCallback>:
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
	while (USBz->ISTR & USB_ISTR_CTR)
 80016ea:	e114      	b.n	8001916 <EndpointCallback+0x232>
		uint16_t ep = USBz->ISTR & USB_ISTR_EP_ID;
 80016ec:	4b91      	ldr	r3, [pc, #580]	; (8001934 <EndpointCallback+0x250>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	82fb      	strh	r3, [r7, #22]
		uint16_t dir = USBz->ISTR & USB_ISTR_DIR;
 80016fc:	4b8d      	ldr	r3, [pc, #564]	; (8001934 <EndpointCallback+0x250>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001704:	b29b      	uxth	r3, r3
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	82bb      	strh	r3, [r7, #20]
		switch(ep)
 800170c:	8afb      	ldrh	r3, [r7, #22]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <EndpointCallback+0x36>
 8001712:	2b01      	cmp	r3, #1
 8001714:	f000 80a7 	beq.w	8001866 <EndpointCallback+0x182>
 8001718:	e0fd      	b.n	8001916 <EndpointCallback+0x232>
			if (!dir) //IN
 800171a:	8abb      	ldrh	r3, [r7, #20]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d127      	bne.n	8001770 <EndpointCallback+0x8c>
				if ((address > 0))
 8001720:	4b85      	ldr	r3, [pc, #532]	; (8001938 <EndpointCallback+0x254>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00c      	beq.n	8001742 <EndpointCallback+0x5e>
					USBz->DADDR = address | (1 << 7);	//Set address and enable
 8001728:	4b83      	ldr	r3, [pc, #524]	; (8001938 <EndpointCallback+0x254>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b80      	ldr	r3, [pc, #512]	; (8001934 <EndpointCallback+0x250>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b292      	uxth	r2, r2
 8001738:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					address = 0;
 800173c:	4b7e      	ldr	r3, [pc, #504]	; (8001938 <EndpointCallback+0x254>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
				if (endpoint_0_tx.tx_finished != 1)
 8001742:	4b7e      	ldr	r3, [pc, #504]	; (800193c <EndpointCallback+0x258>)
 8001744:	791b      	ldrb	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d005      	beq.n	8001756 <EndpointCallback+0x72>
					EndpointTX(0, endpoint_0_tx);
 800174a:	4b7c      	ldr	r3, [pc, #496]	; (800193c <EndpointCallback+0x258>)
 800174c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff fe5b 	bl	800140c <EndpointTX>
				USBz->EP0R = ((~USB_EP_CTR_TX) & USBz->EP0R) & 0x8F8F;
 8001756:	4b77      	ldr	r3, [pc, #476]	; (8001934 <EndpointCallback+0x250>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	4a75      	ldr	r2, [pc, #468]	; (8001934 <EndpointCallback+0x250>)
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800176a:	b29b      	uxth	r3, r3
 800176c:	8013      	strh	r3, [r2, #0]
 800176e:	e0d2      	b.n	8001916 <EndpointCallback+0x232>
				if (USBz->EP0R & USB_EP_SETUP)	//SETUP
 8001770:	4b70      	ldr	r3, [pc, #448]	; (8001934 <EndpointCallback+0x250>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177c:	2b00      	cmp	r3, #0
 800177e:	d039      	beq.n	80017f4 <EndpointCallback+0x110>
					uint8_t num_bytes = my_btable[0].COUNT_RX;
 8001780:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <EndpointCallback+0x25c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	88db      	ldrh	r3, [r3, #6]
 8001786:	b29b      	uxth	r3, r3
 8001788:	743b      	strb	r3, [r7, #16]
					if (num_bytes > 0)
 800178a:	7c3b      	ldrb	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <EndpointCallback+0xb6>
						ReadEndpoint(0, num_bytes);
 8001790:	7c3b      	ldrb	r3, [r7, #16]
 8001792:	4619      	mov	r1, r3
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff fd8f 	bl	80012b8 <ReadEndpoint>
					USBz->EP0R = ((~USB_EP_CTR_RX) & USBz->EP0R) & 0x8F8F;
 800179a:	4b66      	ldr	r3, [pc, #408]	; (8001934 <EndpointCallback+0x250>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b299      	uxth	r1, r3
 80017a2:	4b64      	ldr	r3, [pc, #400]	; (8001934 <EndpointCallback+0x250>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017aa:	400b      	ands	r3, r1
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	8013      	strh	r3, [r2, #0]
					SetupCallback();
 80017b0:	f000 f8d2 	bl	8001958 <SetupCallback>
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	2303      	movs	r3, #3
 80017ba:	81bb      	strh	r3, [r7, #12]


__attribute__((always_inline)) inline static void SetRXResponse(uint8_t endpoint, uint16_t response)
{
	*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) = 0xBF8F & (*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) ^ (response << 12));
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80017c2:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	b21a      	sxth	r2, r3
 80017cc:	89bb      	ldrh	r3, [r7, #12]
 80017ce:	031b      	lsls	r3, r3, #12
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4053      	eors	r3, r2
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80017de:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 80017ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	800b      	strh	r3, [r1, #0]
}
 80017f2:	e037      	b.n	8001864 <EndpointCallback+0x180>
				else if (USBz->EP0R & USB_EP_CTR_RX) //OUT
 80017f4:	4b4f      	ldr	r3, [pc, #316]	; (8001934 <EndpointCallback+0x250>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f280 8089 	bge.w	8001916 <EndpointCallback+0x232>
					USBz->EP0R = ((~USB_EP_CTR_RX) & USBz->EP0R) & 0x8F8F;
 8001804:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <EndpointCallback+0x250>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b299      	uxth	r1, r3
 800180c:	4b49      	ldr	r3, [pc, #292]	; (8001934 <EndpointCallback+0x250>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001814:	400b      	ands	r3, r1
 8001816:	b29b      	uxth	r3, r3
 8001818:	8013      	strh	r3, [r2, #0]
					uint8_t num_bytes = my_btable[0].COUNT_RX;
 800181a:	4b49      	ldr	r3, [pc, #292]	; (8001940 <EndpointCallback+0x25c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	88db      	ldrh	r3, [r3, #6]
 8001820:	b29b      	uxth	r3, r3
 8001822:	747b      	strb	r3, [r7, #17]
 8001824:	2300      	movs	r3, #0
 8001826:	72fb      	strb	r3, [r7, #11]
 8001828:	2303      	movs	r3, #3
 800182a:	813b      	strh	r3, [r7, #8]
	*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) = 0xBF8F & (*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) ^ (response << 12));
 800182c:	7afb      	ldrb	r3, [r7, #11]
 800182e:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8001832:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	b21a      	sxth	r2, r3
 800183c:	893b      	ldrh	r3, [r7, #8]
 800183e:	031b      	lsls	r3, r3, #12
 8001840:	b21b      	sxth	r3, r3
 8001842:	4053      	eors	r3, r2
 8001844:	b21b      	sxth	r3, r3
 8001846:	b29a      	uxth	r2, r3
 8001848:	7afb      	ldrb	r3, [r7, #11]
 800184a:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800184e:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4619      	mov	r1, r3
 8001856:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800185a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800185e:	b29b      	uxth	r3, r3
 8001860:	800b      	strh	r3, [r1, #0]
}
 8001862:	bf00      	nop
		break;
 8001864:	e057      	b.n	8001916 <EndpointCallback+0x232>
			if (dir) //OUT/SETUP
 8001866:	8abb      	ldrh	r3, [r7, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d042      	beq.n	80018f2 <EndpointCallback+0x20e>
				uint8_t num_bytes = my_btable[1].COUNT_RX;
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <EndpointCallback+0x25c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3308      	adds	r3, #8
 8001872:	88db      	ldrh	r3, [r3, #6]
 8001874:	b29b      	uxth	r3, r3
 8001876:	74fb      	strb	r3, [r7, #19]
				if (num_bytes > 0)
 8001878:	7cfb      	ldrb	r3, [r7, #19]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d012      	beq.n	80018a4 <EndpointCallback+0x1c0>
					ReadEndpoint(1, num_bytes);
 800187e:	7cfb      	ldrb	r3, [r7, #19]
 8001880:	4619      	mov	r1, r3
 8001882:	2001      	movs	r0, #1
 8001884:	f7ff fd18 	bl	80012b8 <ReadEndpoint>
					myprint("Report ID: ");
 8001888:	482e      	ldr	r0, [pc, #184]	; (8001944 <EndpointCallback+0x260>)
 800188a:	f7ff fb1d 	bl	8000ec8 <myprint>
					uint8_t report_id = read_buffer[0];
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <EndpointCallback+0x264>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	74bb      	strb	r3, [r7, #18]
					myprint_dec(report_id);
 8001896:	7cbb      	ldrb	r3, [r7, #18]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fb77 	bl	8000f8c <myprint_dec>
					myprint("\r\n");
 800189e:	482b      	ldr	r0, [pc, #172]	; (800194c <EndpointCallback+0x268>)
 80018a0:	f7ff fb12 	bl	8000ec8 <myprint>
				myprint("EP1 OUT!\r\n");
 80018a4:	482a      	ldr	r0, [pc, #168]	; (8001950 <EndpointCallback+0x26c>)
 80018a6:	f7ff fb0f 	bl	8000ec8 <myprint>
				myprint_dec(num_bytes);
 80018aa:	7cfb      	ldrb	r3, [r7, #19]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fb6d 	bl	8000f8c <myprint_dec>
 80018b2:	2301      	movs	r3, #1
 80018b4:	71fb      	strb	r3, [r7, #7]
 80018b6:	2303      	movs	r3, #3
 80018b8:	80bb      	strh	r3, [r7, #4]
	*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) = 0xBF8F & (*( (uint16_t*)(0x40005C00 + (endpoint*4)) ) ^ (response << 12));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80018c0:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	031b      	lsls	r3, r3, #12
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	4053      	eors	r3, r2
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80018dc:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 80018e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	800b      	strh	r3, [r1, #0]
}
 80018f0:	e010      	b.n	8001914 <EndpointCallback+0x230>
				WriteEndpoint(1, report.data, 14);
 80018f2:	220e      	movs	r2, #14
 80018f4:	4917      	ldr	r1, [pc, #92]	; (8001954 <EndpointCallback+0x270>)
 80018f6:	2001      	movs	r0, #1
 80018f8:	f7ff fd1e 	bl	8001338 <WriteEndpoint>
				USBz->EP1R = ((~USB_EP_CTR_TX) & USBz->EP1R) & 0x8F8F;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <EndpointCallback+0x250>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	889b      	ldrh	r3, [r3, #4]
 8001902:	b29b      	uxth	r3, r3
 8001904:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <EndpointCallback+0x250>)
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800190c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001910:	b29b      	uxth	r3, r3
 8001912:	8093      	strh	r3, [r2, #4]
		break;
 8001914:	bf00      	nop
	while (USBz->ISTR & USB_ISTR_CTR)
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <EndpointCallback+0x250>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800191e:	b29b      	uxth	r3, r3
 8001920:	b21b      	sxth	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	f6ff aee2 	blt.w	80016ec <EndpointCallback+0x8>
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000310 	.word	0x20000310
 8001938:	20000458 	.word	0x20000458
 800193c:	2000046c 	.word	0x2000046c
 8001940:	20000314 	.word	0x20000314
 8001944:	0800628c 	.word	0x0800628c
 8001948:	20000318 	.word	0x20000318
 800194c:	08006298 	.word	0x08006298
 8001950:	0800629c 	.word	0x0800629c
 8001954:	2000045c 	.word	0x2000045c

08001958 <SetupCallback>:
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
	uint8_t bmRequestType = ((uint8_t*)read_buffer)[0];
 800195e:	4ba5      	ldr	r3, [pc, #660]	; (8001bf4 <SetupCallback+0x29c>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	74fb      	strb	r3, [r7, #19]
	uint8_t bRequest = ((uint8_t*)read_buffer)[1];
 8001964:	4ba3      	ldr	r3, [pc, #652]	; (8001bf4 <SetupCallback+0x29c>)
 8001966:	785b      	ldrb	r3, [r3, #1]
 8001968:	74bb      	strb	r3, [r7, #18]
	uint16_t wValue = read_buffer[1];
 800196a:	4ba2      	ldr	r3, [pc, #648]	; (8001bf4 <SetupCallback+0x29c>)
 800196c:	885b      	ldrh	r3, [r3, #2]
 800196e:	823b      	strh	r3, [r7, #16]
	uint16_t wIndex = read_buffer[2];
 8001970:	4ba0      	ldr	r3, [pc, #640]	; (8001bf4 <SetupCallback+0x29c>)
 8001972:	889b      	ldrh	r3, [r3, #4]
 8001974:	81fb      	strh	r3, [r7, #14]
	uint16_t wLength = read_buffer[3];
 8001976:	4b9f      	ldr	r3, [pc, #636]	; (8001bf4 <SetupCallback+0x29c>)
 8001978:	88db      	ldrh	r3, [r3, #6]
 800197a:	81bb      	strh	r3, [r7, #12]
	uint8_t wValueHigh = wValue >> 8;
 800197c:	8a3b      	ldrh	r3, [r7, #16]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	b29b      	uxth	r3, r3
 8001982:	72fb      	strb	r3, [r7, #11]
	uint8_t wValueLow = wValue & 0xFF;
 8001984:	8a3b      	ldrh	r3, [r7, #16]
 8001986:	72bb      	strb	r3, [r7, #10]
	USBRequestDirection direction 	= (bmRequestType & 0x80) ? REQUEST_D2H : REQUEST_H2D;
 8001988:	7cfb      	ldrb	r3, [r7, #19]
 800198a:	09db      	lsrs	r3, r3, #7
 800198c:	727b      	strb	r3, [r7, #9]
	USBRequestType type 			= (bmRequestType & 0x60) >> 5;
 800198e:	7cfb      	ldrb	r3, [r7, #19]
 8001990:	115b      	asrs	r3, r3, #5
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	723b      	strb	r3, [r7, #8]
	USBRequestRecipient recipient 	= bmRequestType & 0x1F;
 800199a:	7cfb      	ldrb	r3, [r7, #19]
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	71fb      	strb	r3, [r7, #7]
	if (type == 0)
 80019a2:	7a3b      	ldrb	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f040 8183 	bne.w	8001cb0 <SetupCallback+0x358>
		switch(bRequest)
 80019aa:	7cbb      	ldrb	r3, [r7, #18]
 80019ac:	2b12      	cmp	r3, #18
 80019ae:	f200 817b 	bhi.w	8001ca8 <SetupCallback+0x350>
 80019b2:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <SetupCallback+0x60>)
 80019b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b8:	08001a05 	.word	0x08001a05
 80019bc:	08001a0d 	.word	0x08001a0d
 80019c0:	08001ca9 	.word	0x08001ca9
 80019c4:	08001a2d 	.word	0x08001a2d
 80019c8:	08001ca9 	.word	0x08001ca9
 80019cc:	08001a35 	.word	0x08001a35
 80019d0:	08001a75 	.word	0x08001a75
 80019d4:	08001c61 	.word	0x08001c61
 80019d8:	08001c69 	.word	0x08001c69
 80019dc:	08001c71 	.word	0x08001c71
 80019e0:	08001c91 	.word	0x08001c91
 80019e4:	08001ca9 	.word	0x08001ca9
 80019e8:	08001ca9 	.word	0x08001ca9
 80019ec:	08001ca9 	.word	0x08001ca9
 80019f0:	08001ca9 	.word	0x08001ca9
 80019f4:	08001ca9 	.word	0x08001ca9
 80019f8:	08001ca9 	.word	0x08001ca9
 80019fc:	08001c99 	.word	0x08001c99
 8001a00:	08001ca1 	.word	0x08001ca1
			myprint("\t\tGET_STATUS\r\n");
 8001a04:	487c      	ldr	r0, [pc, #496]	; (8001bf8 <SetupCallback+0x2a0>)
 8001a06:	f7ff fa5f 	bl	8000ec8 <myprint>
			break;
 8001a0a:	e209      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tCLEAR_FEATURE\r\n");
 8001a0c:	487b      	ldr	r0, [pc, #492]	; (8001bfc <SetupCallback+0x2a4>)
 8001a0e:	f7ff fa5b 	bl	8000ec8 <myprint>
			endpoint_0_tx.buffer = configuration_buffer;
 8001a12:	4b7b      	ldr	r3, [pc, #492]	; (8001c00 <SetupCallback+0x2a8>)
 8001a14:	4a7b      	ldr	r2, [pc, #492]	; (8001c04 <SetupCallback+0x2ac>)
 8001a16:	601a      	str	r2, [r3, #0]
			endpoint_0_tx.tx_length = 0;
 8001a18:	4b79      	ldr	r3, [pc, #484]	; (8001c00 <SetupCallback+0x2a8>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	80da      	strh	r2, [r3, #6]
			EndpointTX(0, endpoint_0_tx);
 8001a1e:	4b78      	ldr	r3, [pc, #480]	; (8001c00 <SetupCallback+0x2a8>)
 8001a20:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff fcf1 	bl	800140c <EndpointTX>
			break;
 8001a2a:	e1f9      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tSET_FEATURE\r\n");
 8001a2c:	4876      	ldr	r0, [pc, #472]	; (8001c08 <SetupCallback+0x2b0>)
 8001a2e:	f7ff fa4b 	bl	8000ec8 <myprint>
			break;
 8001a32:	e1f5      	b.n	8001e20 <SetupCallback+0x4c8>
			address = wValue & 0x7F;
 8001a34:	8a3b      	ldrh	r3, [r7, #16]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <SetupCallback+0x2b4>)
 8001a40:	701a      	strb	r2, [r3, #0]
			my_btable[0].COUNT_TX = 0;
 8001a42:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <SetupCallback+0x2b8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2200      	movs	r2, #0
 8001a48:	805a      	strh	r2, [r3, #2]
			USBz->EP0R = (1 << 4) | (USBz->EP0R & 0x8F9F);
 8001a4a:	4b72      	ldr	r3, [pc, #456]	; (8001c14 <SetupCallback+0x2bc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <SetupCallback+0x2bc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	801a      	strh	r2, [r3, #0]
			myprint("\t\tSET_ADDRESS\r\n");
 8001a6c:	486a      	ldr	r0, [pc, #424]	; (8001c18 <SetupCallback+0x2c0>)
 8001a6e:	f7ff fa2b 	bl	8000ec8 <myprint>
			break;
 8001a72:	e1d5      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tGET_DESCRIPTOR\r\n");
 8001a74:	4869      	ldr	r0, [pc, #420]	; (8001c1c <SetupCallback+0x2c4>)
 8001a76:	f7ff fa27 	bl	8000ec8 <myprint>
			descriptor_type = (wValue >> 8) & 0xFF;
 8001a7a:	8a3b      	ldrh	r3, [r7, #16]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	71bb      	strb	r3, [r7, #6]
			switch(descriptor_type)
 8001a82:	79bb      	ldrb	r3, [r7, #6]
 8001a84:	2b22      	cmp	r3, #34	; 0x22
 8001a86:	f000 809f 	beq.w	8001bc8 <SetupCallback+0x270>
 8001a8a:	2b22      	cmp	r3, #34	; 0x22
 8001a8c:	f300 80dc 	bgt.w	8001c48 <SetupCallback+0x2f0>
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d002      	beq.n	8001a9a <SetupCallback+0x142>
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d012      	beq.n	8001abe <SetupCallback+0x166>
 8001a98:	e0d6      	b.n	8001c48 <SetupCallback+0x2f0>
				myprint("\t\t\tDevice\r\n");
 8001a9a:	4861      	ldr	r0, [pc, #388]	; (8001c20 <SetupCallback+0x2c8>)
 8001a9c:	f7ff fa14 	bl	8000ec8 <myprint>
				endpoint_0_tx.buffer = device.data;
 8001aa0:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <SetupCallback+0x2a8>)
 8001aa2:	4a60      	ldr	r2, [pc, #384]	; (8001c24 <SetupCallback+0x2cc>)
 8001aa4:	601a      	str	r2, [r3, #0]
				endpoint_0_tx.tx_length = device.descriptor.bLength;
 8001aa6:	4b5f      	ldr	r3, [pc, #380]	; (8001c24 <SetupCallback+0x2cc>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	4b54      	ldr	r3, [pc, #336]	; (8001c00 <SetupCallback+0x2a8>)
 8001aae:	80da      	strh	r2, [r3, #6]
				EndpointTX(0, endpoint_0_tx);
 8001ab0:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <SetupCallback+0x2a8>)
 8001ab2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff fca8 	bl	800140c <EndpointTX>
				break;
 8001abc:	e0cf      	b.n	8001c5e <SetupCallback+0x306>
				myprint("\t\t\tConfiguration\r\n");
 8001abe:	485a      	ldr	r0, [pc, #360]	; (8001c28 <SetupCallback+0x2d0>)
 8001ac0:	f7ff fa02 	bl	8000ec8 <myprint>
				if (wLength == 9)
 8001ac4:	89bb      	ldrh	r3, [r7, #12]
 8001ac6:	2b09      	cmp	r3, #9
 8001ac8:	d10e      	bne.n	8001ae8 <SetupCallback+0x190>
					endpoint_0_tx.buffer = configuration.data;
 8001aca:	4b4d      	ldr	r3, [pc, #308]	; (8001c00 <SetupCallback+0x2a8>)
 8001acc:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <SetupCallback+0x2d4>)
 8001ace:	601a      	str	r2, [r3, #0]
					endpoint_0_tx.tx_length = configuration.descriptor.bLength;
 8001ad0:	4b56      	ldr	r3, [pc, #344]	; (8001c2c <SetupCallback+0x2d4>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <SetupCallback+0x2a8>)
 8001ad8:	80da      	strh	r2, [r3, #6]
					EndpointTX(0, endpoint_0_tx);
 8001ada:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <SetupCallback+0x2a8>)
 8001adc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff fc93 	bl	800140c <EndpointTX>
				break;
 8001ae6:	e0ba      	b.n	8001c5e <SetupCallback+0x306>
					int configuration_buffer_index = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
					for (int i = 0; i < configuration.descriptor.bLength; i++, configuration_buffer_index++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
 8001af0:	e00e      	b.n	8001b10 <SetupCallback+0x1b8>
						configuration_buffer[configuration_buffer_index] = configuration.data[i];
 8001af2:	4a4e      	ldr	r2, [pc, #312]	; (8001c2c <SetupCallback+0x2d4>)
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	4413      	add	r3, r2
 8001af8:	7819      	ldrb	r1, [r3, #0]
 8001afa:	4a42      	ldr	r2, [pc, #264]	; (8001c04 <SetupCallback+0x2ac>)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	4413      	add	r3, r2
 8001b00:	460a      	mov	r2, r1
 8001b02:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < configuration.descriptor.bLength; i++, configuration_buffer_index++)
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	3301      	adds	r3, #1
 8001b08:	623b      	str	r3, [r7, #32]
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <SetupCallback+0x2d4>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	dbea      	blt.n	8001af2 <SetupCallback+0x19a>
					for (int i = 0; i < interface.descriptor.bLength; i++, configuration_buffer_index++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	e00e      	b.n	8001b40 <SetupCallback+0x1e8>
						configuration_buffer[configuration_buffer_index] = interface.data[i];
 8001b22:	4a43      	ldr	r2, [pc, #268]	; (8001c30 <SetupCallback+0x2d8>)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	4413      	add	r3, r2
 8001b28:	7819      	ldrb	r1, [r3, #0]
 8001b2a:	4a36      	ldr	r2, [pc, #216]	; (8001c04 <SetupCallback+0x2ac>)
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	4413      	add	r3, r2
 8001b30:	460a      	mov	r2, r1
 8001b32:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < interface.descriptor.bLength; i++, configuration_buffer_index++)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	3301      	adds	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b40:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <SetupCallback+0x2d8>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	dbea      	blt.n	8001b22 <SetupCallback+0x1ca>
					for (int i = 0; i < endpoint.descriptor.bLength; i++, configuration_buffer_index++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	e00e      	b.n	8001b70 <SetupCallback+0x218>
						configuration_buffer[configuration_buffer_index] = endpoint.data[i];
 8001b52:	4a38      	ldr	r2, [pc, #224]	; (8001c34 <SetupCallback+0x2dc>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	4413      	add	r3, r2
 8001b58:	7819      	ldrb	r1, [r3, #0]
 8001b5a:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <SetupCallback+0x2ac>)
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	4413      	add	r3, r2
 8001b60:	460a      	mov	r2, r1
 8001b62:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < endpoint.descriptor.bLength; i++, configuration_buffer_index++)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	3301      	adds	r3, #1
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b70:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <SetupCallback+0x2dc>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	dbea      	blt.n	8001b52 <SetupCallback+0x1fa>
					for (int i = 0; i < hid.descriptor.bLength; i++, configuration_buffer_index++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e00e      	b.n	8001ba0 <SetupCallback+0x248>
						configuration_buffer[configuration_buffer_index] = hid.data[i];
 8001b82:	4a2d      	ldr	r2, [pc, #180]	; (8001c38 <SetupCallback+0x2e0>)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	4413      	add	r3, r2
 8001b88:	7819      	ldrb	r1, [r3, #0]
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <SetupCallback+0x2ac>)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	4413      	add	r3, r2
 8001b90:	460a      	mov	r2, r1
 8001b92:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < hid.descriptor.bLength; i++, configuration_buffer_index++)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	3301      	adds	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <SetupCallback+0x2e0>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	dbea      	blt.n	8001b82 <SetupCallback+0x22a>
					endpoint_0_tx.buffer = configuration_buffer;
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <SetupCallback+0x2a8>)
 8001bae:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <SetupCallback+0x2ac>)
 8001bb0:	601a      	str	r2, [r3, #0]
					endpoint_0_tx.tx_length = configuration_buffer_index;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <SetupCallback+0x2a8>)
 8001bb8:	80da      	strh	r2, [r3, #6]
					EndpointTX(0, endpoint_0_tx);
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <SetupCallback+0x2a8>)
 8001bbc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fc23 	bl	800140c <EndpointTX>
				break;
 8001bc6:	e04a      	b.n	8001c5e <SetupCallback+0x306>
				myprint("\t\t\tHID Report\r\n");
 8001bc8:	481c      	ldr	r0, [pc, #112]	; (8001c3c <SetupCallback+0x2e4>)
 8001bca:	f7ff f97d 	bl	8000ec8 <myprint>
				endpoint_0_tx.buffer = ReportDescriptor;
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <SetupCallback+0x2a8>)
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <SetupCallback+0x2e8>)
 8001bd2:	601a      	str	r2, [r3, #0]
				endpoint_0_tx.tx_length = hid.descriptor.wDescriptorLength;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <SetupCallback+0x2e0>)
 8001bd6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <SetupCallback+0x2a8>)
 8001bde:	80da      	strh	r2, [r3, #6]
				EndpointTX(0, endpoint_0_tx);
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <SetupCallback+0x2a8>)
 8001be2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff fc10 	bl	800140c <EndpointTX>
				test_flag = 1;
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <SetupCallback+0x2ec>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
				break;
 8001bf2:	e034      	b.n	8001c5e <SetupCallback+0x306>
 8001bf4:	20000318 	.word	0x20000318
 8001bf8:	080062a8 	.word	0x080062a8
 8001bfc:	080062b8 	.word	0x080062b8
 8001c00:	2000046c 	.word	0x2000046c
 8001c04:	20000358 	.word	0x20000358
 8001c08:	080062cc 	.word	0x080062cc
 8001c0c:	20000458 	.word	0x20000458
 8001c10:	20000314 	.word	0x20000314
 8001c14:	20000310 	.word	0x20000310
 8001c18:	080062dc 	.word	0x080062dc
 8001c1c:	080062ec 	.word	0x080062ec
 8001c20:	08006300 	.word	0x08006300
 8001c24:	200002d0 	.word	0x200002d0
 8001c28:	0800630c 	.word	0x0800630c
 8001c2c:	200002e4 	.word	0x200002e4
 8001c30:	200002f0 	.word	0x200002f0
 8001c34:	200002fc 	.word	0x200002fc
 8001c38:	20000304 	.word	0x20000304
 8001c3c:	08006320 	.word	0x08006320
 8001c40:	08006508 	.word	0x08006508
 8001c44:	2000046a 	.word	0x2000046a
				myprint("\t\t\tDefault: ");
 8001c48:	4877      	ldr	r0, [pc, #476]	; (8001e28 <SetupCallback+0x4d0>)
 8001c4a:	f7ff f93d 	bl	8000ec8 <myprint>
				myprint_hex(descriptor_type);
 8001c4e:	79bb      	ldrb	r3, [r7, #6]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f96d 	bl	8000f30 <myprint_hex>
				myprint("\r\n");
 8001c56:	4875      	ldr	r0, [pc, #468]	; (8001e2c <SetupCallback+0x4d4>)
 8001c58:	f7ff f936 	bl	8000ec8 <myprint>
				break;
 8001c5c:	bf00      	nop
			break;
 8001c5e:	e0df      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tSET_DESCRIPTOR\r\n");
 8001c60:	4873      	ldr	r0, [pc, #460]	; (8001e30 <SetupCallback+0x4d8>)
 8001c62:	f7ff f931 	bl	8000ec8 <myprint>
			break;
 8001c66:	e0db      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tGET_CONFIGURATION\r\n");
 8001c68:	4872      	ldr	r0, [pc, #456]	; (8001e34 <SetupCallback+0x4dc>)
 8001c6a:	f7ff f92d 	bl	8000ec8 <myprint>
			break;
 8001c6e:	e0d7      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tSET_CONFIGURATION\r\n");
 8001c70:	4871      	ldr	r0, [pc, #452]	; (8001e38 <SetupCallback+0x4e0>)
 8001c72:	f7ff f929 	bl	8000ec8 <myprint>
			endpoint_0_tx.buffer = configuration_buffer;
 8001c76:	4b71      	ldr	r3, [pc, #452]	; (8001e3c <SetupCallback+0x4e4>)
 8001c78:	4a71      	ldr	r2, [pc, #452]	; (8001e40 <SetupCallback+0x4e8>)
 8001c7a:	601a      	str	r2, [r3, #0]
			endpoint_0_tx.tx_length = 0;
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <SetupCallback+0x4e4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	80da      	strh	r2, [r3, #6]
			EndpointTX(0, endpoint_0_tx);
 8001c82:	4b6e      	ldr	r3, [pc, #440]	; (8001e3c <SetupCallback+0x4e4>)
 8001c84:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff fbbf 	bl	800140c <EndpointTX>
			break;
 8001c8e:	e0c7      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tGET_INTERFACE\r\n");
 8001c90:	486c      	ldr	r0, [pc, #432]	; (8001e44 <SetupCallback+0x4ec>)
 8001c92:	f7ff f919 	bl	8000ec8 <myprint>
			break;
 8001c96:	e0c3      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tSET_INTERFACE\r\n");
 8001c98:	486b      	ldr	r0, [pc, #428]	; (8001e48 <SetupCallback+0x4f0>)
 8001c9a:	f7ff f915 	bl	8000ec8 <myprint>
			break;
 8001c9e:	e0bf      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tSYNCH_FRAME\r\n");
 8001ca0:	486a      	ldr	r0, [pc, #424]	; (8001e4c <SetupCallback+0x4f4>)
 8001ca2:	f7ff f911 	bl	8000ec8 <myprint>
			break;
 8001ca6:	e0bb      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tWE SHOULDN'T BE HERE IN THE SETUP\r\n");
 8001ca8:	4869      	ldr	r0, [pc, #420]	; (8001e50 <SetupCallback+0x4f8>)
 8001caa:	f7ff f90d 	bl	8000ec8 <myprint>
			break;
 8001cae:	e0b7      	b.n	8001e20 <SetupCallback+0x4c8>
	else if (type == 1)	//Class
 8001cb0:	7a3b      	ldrb	r3, [r7, #8]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	f040 80b0 	bne.w	8001e18 <SetupCallback+0x4c0>
		switch(bRequest)
 8001cb8:	7cbb      	ldrb	r3, [r7, #18]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	2b0a      	cmp	r3, #10
 8001cbe:	f200 80a7 	bhi.w	8001e10 <SetupCallback+0x4b8>
 8001cc2:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <SetupCallback+0x370>)
 8001cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc8:	08001cf5 	.word	0x08001cf5
 8001ccc:	08001dd1 	.word	0x08001dd1
 8001cd0:	08001dd9 	.word	0x08001dd9
 8001cd4:	08001e11 	.word	0x08001e11
 8001cd8:	08001e11 	.word	0x08001e11
 8001cdc:	08001e11 	.word	0x08001e11
 8001ce0:	08001e11 	.word	0x08001e11
 8001ce4:	08001e11 	.word	0x08001e11
 8001ce8:	08001de1 	.word	0x08001de1
 8001cec:	08001de9 	.word	0x08001de9
 8001cf0:	08001e09 	.word	0x08001e09
			myprint("\t\tGET_REPORT\r\n");
 8001cf4:	4857      	ldr	r0, [pc, #348]	; (8001e54 <SetupCallback+0x4fc>)
 8001cf6:	f7ff f8e7 	bl	8000ec8 <myprint>
			switch (wValueHigh)
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d00e      	beq.n	8001d1e <SetupCallback+0x3c6>
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	dc5f      	bgt.n	8001dc4 <SetupCallback+0x46c>
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d002      	beq.n	8001d0e <SetupCallback+0x3b6>
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d004      	beq.n	8001d16 <SetupCallback+0x3be>
 8001d0c:	e05a      	b.n	8001dc4 <SetupCallback+0x46c>
				myprint("\t\t\tInput\r\n");
 8001d0e:	4852      	ldr	r0, [pc, #328]	; (8001e58 <SetupCallback+0x500>)
 8001d10:	f7ff f8da 	bl	8000ec8 <myprint>
				break;
 8001d14:	e05b      	b.n	8001dce <SetupCallback+0x476>
				myprint("\t\t\tOutput\r\n");
 8001d16:	4851      	ldr	r0, [pc, #324]	; (8001e5c <SetupCallback+0x504>)
 8001d18:	f7ff f8d6 	bl	8000ec8 <myprint>
				break;
 8001d1c:	e057      	b.n	8001dce <SetupCallback+0x476>
				myprint("\t\t\tFeature\r\n");
 8001d1e:	4850      	ldr	r0, [pc, #320]	; (8001e60 <SetupCallback+0x508>)
 8001d20:	f7ff f8d2 	bl	8000ec8 <myprint>
				switch(wValueLow)
 8001d24:	7abb      	ldrb	r3, [r7, #10]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d02e      	beq.n	8001d88 <SetupCallback+0x430>
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	dc4e      	bgt.n	8001dcc <SetupCallback+0x474>
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d002      	beq.n	8001d38 <SetupCallback+0x3e0>
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d004      	beq.n	8001d40 <SetupCallback+0x3e8>
				break;
 8001d36:	e049      	b.n	8001dcc <SetupCallback+0x474>
					myprint("\t\t\t\t1\r\n");
 8001d38:	484a      	ldr	r0, [pc, #296]	; (8001e64 <SetupCallback+0x50c>)
 8001d3a:	f7ff f8c5 	bl	8000ec8 <myprint>
					break;
 8001d3e:	e040      	b.n	8001dc2 <SetupCallback+0x46a>
					block_load_report.report.report_id = 2;
 8001d40:	4b49      	ldr	r3, [pc, #292]	; (8001e68 <SetupCallback+0x510>)
 8001d42:	2202      	movs	r2, #2
 8001d44:	701a      	strb	r2, [r3, #0]
					block_load_report.report.ram_pool_available = 0xFFFF;
 8001d46:	4b48      	ldr	r3, [pc, #288]	; (8001e68 <SetupCallback+0x510>)
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4c:	70da      	strb	r2, [r3, #3]
 8001d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d52:	711a      	strb	r2, [r3, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	715a      	strb	r2, [r3, #5]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	719a      	strb	r2, [r3, #6]
					block_load_report.report.effect_block_index = 1;
 8001d5c:	4b42      	ldr	r3, [pc, #264]	; (8001e68 <SetupCallback+0x510>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	705a      	strb	r2, [r3, #1]
					block_load_report.report.block_load_status = 1;
 8001d62:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <SetupCallback+0x510>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	709a      	strb	r2, [r3, #2]
					endpoint_0_tx.buffer = block_load_report.data+1;
 8001d68:	4a40      	ldr	r2, [pc, #256]	; (8001e6c <SetupCallback+0x514>)
 8001d6a:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <SetupCallback+0x4e4>)
 8001d6c:	601a      	str	r2, [r3, #0]
					endpoint_0_tx.tx_length = 6;
 8001d6e:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <SetupCallback+0x4e4>)
 8001d70:	2206      	movs	r2, #6
 8001d72:	80da      	strh	r2, [r3, #6]
					EndpointTX(0, endpoint_0_tx);
 8001d74:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <SetupCallback+0x4e4>)
 8001d76:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff fb46 	bl	800140c <EndpointTX>
					myprint("\t\t\t\t2\r\n");
 8001d80:	483b      	ldr	r0, [pc, #236]	; (8001e70 <SetupCallback+0x518>)
 8001d82:	f7ff f8a1 	bl	8000ec8 <myprint>
					break;
 8001d86:	e01c      	b.n	8001dc2 <SetupCallback+0x46a>
					pool_report.report.report_id = 3;
 8001d88:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <SetupCallback+0x51c>)
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	701a      	strb	r2, [r3, #0]
					pool_report.report.ram_pool_size = 0xFFFF;
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <SetupCallback+0x51c>)
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	705a      	strb	r2, [r3, #1]
 8001d96:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9a:	709a      	strb	r2, [r3, #2]
					pool_report.report.simultaneous_effects_max = 5;
 8001d9c:	4b35      	ldr	r3, [pc, #212]	; (8001e74 <SetupCallback+0x51c>)
 8001d9e:	2205      	movs	r2, #5
 8001da0:	70da      	strb	r2, [r3, #3]
					pool_report.report.device_manage_pool_shared_parameter_blocks = 0;
 8001da2:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <SetupCallback+0x51c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	711a      	strb	r2, [r3, #4]
					endpoint_0_tx.buffer = pool_report.data;
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <SetupCallback+0x4e4>)
 8001daa:	4a32      	ldr	r2, [pc, #200]	; (8001e74 <SetupCallback+0x51c>)
 8001dac:	601a      	str	r2, [r3, #0]
					endpoint_0_tx.tx_length = 5;
 8001dae:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <SetupCallback+0x4e4>)
 8001db0:	2205      	movs	r2, #5
 8001db2:	80da      	strh	r2, [r3, #6]
					EndpointTX(0, endpoint_0_tx);
 8001db4:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <SetupCallback+0x4e4>)
 8001db6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff fb26 	bl	800140c <EndpointTX>
					break;
 8001dc0:	bf00      	nop
				break;
 8001dc2:	e003      	b.n	8001dcc <SetupCallback+0x474>
				myprint("GET_REPORT SHOULDN'T BE HERE\r\n");
 8001dc4:	482c      	ldr	r0, [pc, #176]	; (8001e78 <SetupCallback+0x520>)
 8001dc6:	f7ff f87f 	bl	8000ec8 <myprint>
				break;
 8001dca:	e000      	b.n	8001dce <SetupCallback+0x476>
				break;
 8001dcc:	bf00      	nop
		break;
 8001dce:	e027      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tGET_IDLE\r\n");
 8001dd0:	482a      	ldr	r0, [pc, #168]	; (8001e7c <SetupCallback+0x524>)
 8001dd2:	f7ff f879 	bl	8000ec8 <myprint>
		break;
 8001dd6:	e023      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tGET_PROTOCOL\r\n");
 8001dd8:	4829      	ldr	r0, [pc, #164]	; (8001e80 <SetupCallback+0x528>)
 8001dda:	f7ff f875 	bl	8000ec8 <myprint>
		break;
 8001dde:	e01f      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tSET_REPORT\r\n");
 8001de0:	4828      	ldr	r0, [pc, #160]	; (8001e84 <SetupCallback+0x52c>)
 8001de2:	f7ff f871 	bl	8000ec8 <myprint>
		break;
 8001de6:	e01b      	b.n	8001e20 <SetupCallback+0x4c8>
			endpoint_0_tx.buffer = configuration_buffer;
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <SetupCallback+0x4e4>)
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <SetupCallback+0x4e8>)
 8001dec:	601a      	str	r2, [r3, #0]
			endpoint_0_tx.tx_length = 0;
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <SetupCallback+0x4e4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	80da      	strh	r2, [r3, #6]
			EndpointTX(0, endpoint_0_tx);
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <SetupCallback+0x4e4>)
 8001df6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff fb06 	bl	800140c <EndpointTX>
			myprint("\t\tSET_IDLE\r\n");
 8001e00:	4821      	ldr	r0, [pc, #132]	; (8001e88 <SetupCallback+0x530>)
 8001e02:	f7ff f861 	bl	8000ec8 <myprint>
		break;
 8001e06:	e00b      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tSET_PROTOCOL\r\n");
 8001e08:	4820      	ldr	r0, [pc, #128]	; (8001e8c <SetupCallback+0x534>)
 8001e0a:	f7ff f85d 	bl	8000ec8 <myprint>
		break;
 8001e0e:	e007      	b.n	8001e20 <SetupCallback+0x4c8>
			myprint("\t\tWE SHOULDN'T BE HERE IN THE CLASS SETUP\r\n");
 8001e10:	481f      	ldr	r0, [pc, #124]	; (8001e90 <SetupCallback+0x538>)
 8001e12:	f7ff f859 	bl	8000ec8 <myprint>
		break;
 8001e16:	e003      	b.n	8001e20 <SetupCallback+0x4c8>
		myprint("HERE!!!!!\r\n");
 8001e18:	481e      	ldr	r0, [pc, #120]	; (8001e94 <SetupCallback+0x53c>)
 8001e1a:	f7ff f855 	bl	8000ec8 <myprint>
}
 8001e1e:	bf00      	nop
 8001e20:	bf00      	nop
 8001e22:	3728      	adds	r7, #40	; 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	08006330 	.word	0x08006330
 8001e2c:	08006298 	.word	0x08006298
 8001e30:	08006340 	.word	0x08006340
 8001e34:	08006354 	.word	0x08006354
 8001e38:	0800636c 	.word	0x0800636c
 8001e3c:	2000046c 	.word	0x2000046c
 8001e40:	20000358 	.word	0x20000358
 8001e44:	08006384 	.word	0x08006384
 8001e48:	08006398 	.word	0x08006398
 8001e4c:	080063ac 	.word	0x080063ac
 8001e50:	080063bc 	.word	0x080063bc
 8001e54:	080063e4 	.word	0x080063e4
 8001e58:	080063f4 	.word	0x080063f4
 8001e5c:	08006400 	.word	0x08006400
 8001e60:	0800640c 	.word	0x0800640c
 8001e64:	0800641c 	.word	0x0800641c
 8001e68:	2000047c 	.word	0x2000047c
 8001e6c:	2000047d 	.word	0x2000047d
 8001e70:	08006424 	.word	0x08006424
 8001e74:	20000474 	.word	0x20000474
 8001e78:	0800642c 	.word	0x0800642c
 8001e7c:	0800644c 	.word	0x0800644c
 8001e80:	0800645c 	.word	0x0800645c
 8001e84:	08006470 	.word	0x08006470
 8001e88:	08006480 	.word	0x08006480
 8001e8c:	08006490 	.word	0x08006490
 8001e90:	080064a4 	.word	0x080064a4
 8001e94:	080064d0 	.word	0x080064d0

08001e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_MspInit+0x44>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_MspInit+0x44>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6193      	str	r3, [r2, #24]
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_MspInit+0x44>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_MspInit+0x44>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <HAL_MspInit+0x44>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_MspInit+0x44>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000

08001ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <NMI_Handler+0x4>

08001ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <HardFault_Handler+0x4>

08001eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <MemManage_Handler+0x4>

08001ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <BusFault_Handler+0x4>

08001ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <UsageFault_Handler+0x4>

08001efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	/****Must complete SysTick_Handler in < 72,000 cycles. Preferably far less to allow other interrupts to run....****/
	if (Motor_IsReady())
 8001f2c:	f7fe ff4a 	bl	8000dc4 <Motor_IsReady>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <SysTick_Handler+0x12>
	{
		Motor_CalculateSpeed();
 8001f36:	f7fe ff91 	bl	8000e5c <Motor_CalculateSpeed>
	}

	count++;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <SysTick_Handler+0x4c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <SysTick_Handler+0x4c>)
 8001f42:	6013      	str	r3, [r2, #0]
	if (count == 10)
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <SysTick_Handler+0x4c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b0a      	cmp	r3, #10
 8001f4a:	d108      	bne.n	8001f5e <SysTick_Handler+0x36>
	{
		ADC3->CR |= ADC_CR_ADSTART;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <SysTick_Handler+0x50>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <SysTick_Handler+0x50>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6093      	str	r3, [r2, #8]
		count = 0;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <SysTick_Handler+0x4c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5e:	f000 facb 	bl	80024f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  if (Motor_IsReady())
 8001f62:	f7fe ff2f 	bl	8000dc4 <Motor_IsReady>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <SysTick_Handler+0x48>
  {
	ES_PlayEffects();
 8001f6c:	f7fe fc9c 	bl	80008a8 <ES_PlayEffects>
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000484 	.word	0x20000484
 8001f78:	50000400 	.word	0x50000400

08001f7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <SystemInit+0x20>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <SystemInit+0x20>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	2224      	movs	r2, #36	; 0x24
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 f8ec 	bl	800618c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fbe:	4b21      	ldr	r3, [pc, #132]	; (8002044 <MX_TIM3_Init+0xa4>)
 8001fc0:	4a21      	ldr	r2, [pc, #132]	; (8002048 <MX_TIM3_Init+0xa8>)
 8001fc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <MX_TIM3_Init+0xa4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <MX_TIM3_Init+0xa4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <MX_TIM3_Init+0xa4>)
 8001fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <MX_TIM3_Init+0xa4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <MX_TIM3_Init+0xa4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fec:	2301      	movs	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001ff4:	230f      	movs	r3, #15
 8001ff6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002004:	230f      	movs	r3, #15
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	4619      	mov	r1, r3
 800200e:	480d      	ldr	r0, [pc, #52]	; (8002044 <MX_TIM3_Init+0xa4>)
 8002010:	f002 fbfa 	bl	8004808 <HAL_TIM_Encoder_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800201a:	f7fe fe55 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002026:	463b      	mov	r3, r7
 8002028:	4619      	mov	r1, r3
 800202a:	4806      	ldr	r0, [pc, #24]	; (8002044 <MX_TIM3_Init+0xa4>)
 800202c:	f003 face 	bl	80055cc <HAL_TIMEx_MasterConfigSynchronization>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002036:	f7fe fe47 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	3730      	adds	r7, #48	; 0x30
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000488 	.word	0x20000488
 8002048:	40000400 	.word	0x40000400

0800204c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b096      	sub	sp, #88	; 0x58
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002052:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800205e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	611a      	str	r2, [r3, #16]
 800206e:	615a      	str	r2, [r3, #20]
 8002070:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	222c      	movs	r2, #44	; 0x2c
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f004 f887 	bl	800618c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800207e:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <MX_TIM15_Init+0x11c>)
 8002080:	4a3a      	ldr	r2, [pc, #232]	; (800216c <MX_TIM15_Init+0x120>)
 8002082:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 5;
 8002084:	4b38      	ldr	r3, [pc, #224]	; (8002168 <MX_TIM15_Init+0x11c>)
 8002086:	2205      	movs	r2, #5
 8002088:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208a:	4b37      	ldr	r3, [pc, #220]	; (8002168 <MX_TIM15_Init+0x11c>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8002090:	4b35      	ldr	r3, [pc, #212]	; (8002168 <MX_TIM15_Init+0x11c>)
 8002092:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002096:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002098:	4b33      	ldr	r3, [pc, #204]	; (8002168 <MX_TIM15_Init+0x11c>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800209e:	4b32      	ldr	r3, [pc, #200]	; (8002168 <MX_TIM15_Init+0x11c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020a4:	4b30      	ldr	r3, [pc, #192]	; (8002168 <MX_TIM15_Init+0x11c>)
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80020aa:	482f      	ldr	r0, [pc, #188]	; (8002168 <MX_TIM15_Init+0x11c>)
 80020ac:	f002 f9a0 	bl	80043f0 <HAL_TIM_PWM_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80020b6:	f7fe fe07 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80020c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020c6:	4619      	mov	r1, r3
 80020c8:	4827      	ldr	r0, [pc, #156]	; (8002168 <MX_TIM15_Init+0x11c>)
 80020ca:	f003 fa7f 	bl	80055cc <HAL_TIMEx_MasterConfigSynchronization>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80020d4:	f7fe fdf8 	bl	8000cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d8:	2360      	movs	r3, #96	; 0x60
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e0:	2300      	movs	r3, #0
 80020e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020e4:	2300      	movs	r3, #0
 80020e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020f0:	2300      	movs	r3, #0
 80020f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f8:	2200      	movs	r2, #0
 80020fa:	4619      	mov	r1, r3
 80020fc:	481a      	ldr	r0, [pc, #104]	; (8002168 <MX_TIM15_Init+0x11c>)
 80020fe:	f002 fcc5 	bl	8004a8c <HAL_TIM_PWM_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002108:	f7fe fdde 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800210c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002110:	2204      	movs	r2, #4
 8002112:	4619      	mov	r1, r3
 8002114:	4814      	ldr	r0, [pc, #80]	; (8002168 <MX_TIM15_Init+0x11c>)
 8002116:	f002 fcb9 	bl	8004a8c <HAL_TIM_PWM_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8002120:	f7fe fdd2 	bl	8000cc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800213c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4619      	mov	r1, r3
 800214a:	4807      	ldr	r0, [pc, #28]	; (8002168 <MX_TIM15_Init+0x11c>)
 800214c:	f003 faca 	bl	80056e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8002156:	f7fe fdb7 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <MX_TIM15_Init+0x11c>)
 800215c:	f000 f888 	bl	8002270 <HAL_TIM_MspPostInit>

}
 8002160:	bf00      	nop
 8002162:	3758      	adds	r7, #88	; 0x58
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000544 	.word	0x20000544
 800216c:	40014000 	.word	0x40014000

08002170 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a25      	ldr	r2, [pc, #148]	; (8002224 <HAL_TIM_Encoder_MspInit+0xb4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d144      	bne.n	800221c <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a24      	ldr	r2, [pc, #144]	; (8002228 <HAL_TIM_Encoder_MspInit+0xb8>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	61d3      	str	r3, [r2, #28]
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <HAL_TIM_Encoder_MspInit+0xb8>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <HAL_TIM_Encoder_MspInit+0xb8>)
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <HAL_TIM_Encoder_MspInit+0xb8>)
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	6153      	str	r3, [r2, #20]
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_TIM_Encoder_MspInit+0xb8>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_TIM_Encoder_MspInit+0xb8>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_TIM_Encoder_MspInit+0xb8>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021cc:	6153      	str	r3, [r2, #20]
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_TIM_Encoder_MspInit+0xb8>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021da:	2310      	movs	r3, #16
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ea:	2302      	movs	r3, #2
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f8:	f000 fab0 	bl	800275c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021fc:	2310      	movs	r3, #16
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800220c:	2302      	movs	r3, #2
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <HAL_TIM_Encoder_MspInit+0xbc>)
 8002218:	f000 faa0 	bl	800275c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40000400 	.word	0x40000400
 8002228:	40021000 	.word	0x40021000
 800222c:	48000400 	.word	0x48000400

08002230 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <HAL_TIM_PWM_MspInit+0x38>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10b      	bne.n	800225a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_TIM_PWM_MspInit+0x3c>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_TIM_PWM_MspInit+0x3c>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6193      	str	r3, [r2, #24]
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <HAL_TIM_PWM_MspInit+0x3c>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40014000 	.word	0x40014000
 800226c:	40021000 	.word	0x40021000

08002270 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	; 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a20      	ldr	r2, [pc, #128]	; (8002310 <HAL_TIM_MspPostInit+0xa0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d139      	bne.n	8002306 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_TIM_MspPostInit+0xa4>)
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <HAL_TIM_MspPostInit+0xa4>)
 8002298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800229c:	6153      	str	r3, [r2, #20]
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_TIM_MspPostInit+0xa4>)
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_TIM_MspPostInit+0xa4>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	4a19      	ldr	r2, [pc, #100]	; (8002314 <HAL_TIM_MspPostInit+0xa4>)
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	6153      	str	r3, [r2, #20]
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_TIM_MspPostInit+0xa4>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PF9     ------> TIM15_CH1
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 80022d4:	2303      	movs	r3, #3
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	4619      	mov	r1, r3
 80022de:	480e      	ldr	r0, [pc, #56]	; (8002318 <HAL_TIM_MspPostInit+0xa8>)
 80022e0:	f000 fa3c 	bl	800275c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022e4:	2308      	movs	r3, #8
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80022f4:	2309      	movs	r3, #9
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002302:	f000 fa2b 	bl	800275c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	; 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40014000 	.word	0x40014000
 8002314:	40021000 	.word	0x40021000
 8002318:	48001400 	.word	0x48001400

0800231c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002320:	4b17      	ldr	r3, [pc, #92]	; (8002380 <MX_USART3_UART_Init+0x64>)
 8002322:	4a18      	ldr	r2, [pc, #96]	; (8002384 <MX_USART3_UART_Init+0x68>)
 8002324:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <MX_USART3_UART_Init+0x64>)
 8002328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800232c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <MX_USART3_UART_Init+0x64>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <MX_USART3_UART_Init+0x64>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <MX_USART3_UART_Init+0x64>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <MX_USART3_UART_Init+0x64>)
 8002342:	220c      	movs	r2, #12
 8002344:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_USART3_UART_Init+0x64>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <MX_USART3_UART_Init+0x64>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <MX_USART3_UART_Init+0x64>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <MX_USART3_UART_Init+0x64>)
 800235a:	2200      	movs	r2, #0
 800235c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800235e:	4808      	ldr	r0, [pc, #32]	; (8002380 <MX_USART3_UART_Init+0x64>)
 8002360:	f003 fa6e 	bl	8005840 <HAL_UART_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800236a:	f7fe fcad 	bl	8000cc8 <Error_Handler>

  /*char escape = 0x1B;
  myprint(&escape);
  myprint("[2J");*/

  myprint("\r\n\n\n\n\n");
 800236e:	4806      	ldr	r0, [pc, #24]	; (8002388 <MX_USART3_UART_Init+0x6c>)
 8002370:	f7fe fdaa 	bl	8000ec8 <myprint>
  myprint("----------Welcome!----------\r\n\n\n\n");
 8002374:	4805      	ldr	r0, [pc, #20]	; (800238c <MX_USART3_UART_Init+0x70>)
 8002376:	f7fe fda7 	bl	8000ec8 <myprint>

  /* USER CODE END USART3_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000600 	.word	0x20000600
 8002384:	40004800 	.word	0x40004800
 8002388:	080064dc 	.word	0x080064dc
 800238c:	080064e4 	.word	0x080064e4

08002390 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a17      	ldr	r2, [pc, #92]	; (800240c <HAL_UART_MspInit+0x7c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d128      	bne.n	8002404 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HAL_UART_MspInit+0x80>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4a16      	ldr	r2, [pc, #88]	; (8002410 <HAL_UART_MspInit+0x80>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	61d3      	str	r3, [r2, #28]
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <HAL_UART_MspInit+0x80>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_UART_MspInit+0x80>)
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_UART_MspInit+0x80>)
 80023d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023d4:	6153      	str	r3, [r2, #20]
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_UART_MspInit+0x80>)
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f0:	2303      	movs	r3, #3
 80023f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023f4:	2307      	movs	r3, #7
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4619      	mov	r1, r3
 80023fe:	4805      	ldr	r0, [pc, #20]	; (8002414 <HAL_UART_MspInit+0x84>)
 8002400:	f000 f9ac 	bl	800275c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002404:	bf00      	nop
 8002406:	3728      	adds	r7, #40	; 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40004800 	.word	0x40004800
 8002410:	40021000 	.word	0x40021000
 8002414:	48000c00 	.word	0x48000c00

08002418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002450 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800241c:	480d      	ldr	r0, [pc, #52]	; (8002454 <LoopForever+0x6>)
  ldr r1, =_edata
 800241e:	490e      	ldr	r1, [pc, #56]	; (8002458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <LoopForever+0xe>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002434:	4c0b      	ldr	r4, [pc, #44]	; (8002464 <LoopForever+0x16>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002442:	f7ff fd9b 	bl	8001f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002446:	f003 fe63 	bl	8006110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800244a:	f7fe fb57 	bl	8000afc <main>

0800244e <LoopForever>:

LoopForever:
    b LoopForever
 800244e:	e7fe      	b.n	800244e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002450:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002458:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 800245c:	080065e8 	.word	0x080065e8
  ldr r2, =_sbss
 8002460:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8002464:	20000688 	.word	0x20000688

08002468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC1_2_IRQHandler>
	...

0800246c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_Init+0x28>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_Init+0x28>)
 8002476:	f043 0310 	orr.w	r3, r3, #16
 800247a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800247c:	2003      	movs	r0, #3
 800247e:	f000 f92b 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002482:	200f      	movs	r0, #15
 8002484:	f000 f808 	bl	8002498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002488:	f7ff fd06 	bl	8001e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40022000 	.word	0x40022000

08002498 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_InitTick+0x54>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_InitTick+0x58>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f943 	bl	8002742 <HAL_SYSTICK_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00e      	b.n	80024e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b0f      	cmp	r3, #15
 80024ca:	d80a      	bhi.n	80024e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024cc:	2200      	movs	r2, #0
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f000 f90b 	bl	80026ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d8:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <HAL_InitTick+0x5c>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000030 	.word	0x20000030
 80024f0:	20000038 	.word	0x20000038
 80024f4:	20000034 	.word	0x20000034

080024f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_IncTick+0x20>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x24>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <HAL_IncTick+0x24>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000038 	.word	0x20000038
 800251c:	20000684 	.word	0x20000684

08002520 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return uwTick;  
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_GetTick+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000684 	.word	0x20000684

08002538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002554:	4013      	ands	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256a:	4a04      	ldr	r2, [pc, #16]	; (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	60d3      	str	r3, [r2, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <__NVIC_GetPriorityGrouping+0x18>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	f003 0307 	and.w	r3, r3, #7
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	db0b      	blt.n	80025c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	4907      	ldr	r1, [pc, #28]	; (80025d4 <__NVIC_EnableIRQ+0x38>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2001      	movs	r0, #1
 80025be:	fa00 f202 	lsl.w	r2, r0, r2
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a4:	d301      	bcc.n	80026aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00f      	b.n	80026ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <SysTick_Config+0x40>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b2:	210f      	movs	r1, #15
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f7ff ff8e 	bl	80025d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <SysTick_Config+0x40>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c2:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <SysTick_Config+0x40>)
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000e010 	.word	0xe000e010

080026d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff29 	bl	8002538 <__NVIC_SetPriorityGrouping>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002700:	f7ff ff3e 	bl	8002580 <__NVIC_GetPriorityGrouping>
 8002704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	6978      	ldr	r0, [r7, #20]
 800270c:	f7ff ff8e 	bl	800262c <NVIC_EncodePriority>
 8002710:	4602      	mov	r2, r0
 8002712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff5d 	bl	80025d8 <__NVIC_SetPriority>
}
 800271e:	bf00      	nop
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff31 	bl	800259c <__NVIC_EnableIRQ>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ffa2 	bl	8002694 <SysTick_Config>
 8002750:	4603      	mov	r3, r0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276a:	e160      	b.n	8002a2e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	4013      	ands	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8152 	beq.w	8002a28 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d005      	beq.n	800279c <HAL_GPIO_Init+0x40>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d130      	bne.n	80027fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d2:	2201      	movs	r2, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 0201 	and.w	r2, r3, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b03      	cmp	r3, #3
 8002808:	d017      	beq.n	800283a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d123      	bne.n	800288e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	08da      	lsrs	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3208      	adds	r2, #8
 800284e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	6939      	ldr	r1, [r7, #16]
 800288a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0203 	and.w	r2, r3, #3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80ac 	beq.w	8002a28 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d0:	4b5e      	ldr	r3, [pc, #376]	; (8002a4c <HAL_GPIO_Init+0x2f0>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4a5d      	ldr	r2, [pc, #372]	; (8002a4c <HAL_GPIO_Init+0x2f0>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6193      	str	r3, [r2, #24]
 80028dc:	4b5b      	ldr	r3, [pc, #364]	; (8002a4c <HAL_GPIO_Init+0x2f0>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028e8:	4a59      	ldr	r2, [pc, #356]	; (8002a50 <HAL_GPIO_Init+0x2f4>)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	3302      	adds	r3, #2
 80028f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002912:	d025      	beq.n	8002960 <HAL_GPIO_Init+0x204>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a4f      	ldr	r2, [pc, #316]	; (8002a54 <HAL_GPIO_Init+0x2f8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d01f      	beq.n	800295c <HAL_GPIO_Init+0x200>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a4e      	ldr	r2, [pc, #312]	; (8002a58 <HAL_GPIO_Init+0x2fc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d019      	beq.n	8002958 <HAL_GPIO_Init+0x1fc>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a4d      	ldr	r2, [pc, #308]	; (8002a5c <HAL_GPIO_Init+0x300>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d013      	beq.n	8002954 <HAL_GPIO_Init+0x1f8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a4c      	ldr	r2, [pc, #304]	; (8002a60 <HAL_GPIO_Init+0x304>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00d      	beq.n	8002950 <HAL_GPIO_Init+0x1f4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a4b      	ldr	r2, [pc, #300]	; (8002a64 <HAL_GPIO_Init+0x308>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d007      	beq.n	800294c <HAL_GPIO_Init+0x1f0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a4a      	ldr	r2, [pc, #296]	; (8002a68 <HAL_GPIO_Init+0x30c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_GPIO_Init+0x1ec>
 8002944:	2306      	movs	r3, #6
 8002946:	e00c      	b.n	8002962 <HAL_GPIO_Init+0x206>
 8002948:	2307      	movs	r3, #7
 800294a:	e00a      	b.n	8002962 <HAL_GPIO_Init+0x206>
 800294c:	2305      	movs	r3, #5
 800294e:	e008      	b.n	8002962 <HAL_GPIO_Init+0x206>
 8002950:	2304      	movs	r3, #4
 8002952:	e006      	b.n	8002962 <HAL_GPIO_Init+0x206>
 8002954:	2303      	movs	r3, #3
 8002956:	e004      	b.n	8002962 <HAL_GPIO_Init+0x206>
 8002958:	2302      	movs	r3, #2
 800295a:	e002      	b.n	8002962 <HAL_GPIO_Init+0x206>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_GPIO_Init+0x206>
 8002960:	2300      	movs	r3, #0
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	f002 0203 	and.w	r2, r2, #3
 8002968:	0092      	lsls	r2, r2, #2
 800296a:	4093      	lsls	r3, r2
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002972:	4937      	ldr	r1, [pc, #220]	; (8002a50 <HAL_GPIO_Init+0x2f4>)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002980:	4b3a      	ldr	r3, [pc, #232]	; (8002a6c <HAL_GPIO_Init+0x310>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029a4:	4a31      	ldr	r2, [pc, #196]	; (8002a6c <HAL_GPIO_Init+0x310>)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029aa:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <HAL_GPIO_Init+0x310>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029ce:	4a27      	ldr	r2, [pc, #156]	; (8002a6c <HAL_GPIO_Init+0x310>)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_GPIO_Init+0x310>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029f8:	4a1c      	ldr	r2, [pc, #112]	; (8002a6c <HAL_GPIO_Init+0x310>)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_GPIO_Init+0x310>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <HAL_GPIO_Init+0x310>)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f47f ae97 	bne.w	800276c <HAL_GPIO_Init+0x10>
  }
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40010000 	.word	0x40010000
 8002a54:	48000400 	.word	0x48000400
 8002a58:	48000800 	.word	0x48000800
 8002a5c:	48000c00 	.word	0x48000c00
 8002a60:	48001000 	.word	0x48001000
 8002a64:	48001400 	.word	0x48001400
 8002a68:	48001800 	.word	0x48001800
 8002a6c:	40010400 	.word	0x40010400

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a8c:	e002      	b.n	8002a94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ab0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f001 b83a 	b.w	8003b3a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 816f 	beq.w	8002dba <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002adc:	4bb5      	ldr	r3, [pc, #724]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d00c      	beq.n	8002b02 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ae8:	4bb2      	ldr	r3, [pc, #712]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d15c      	bne.n	8002bae <HAL_RCC_OscConfig+0x10e>
 8002af4:	4baf      	ldr	r3, [pc, #700]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b00:	d155      	bne.n	8002bae <HAL_RCC_OscConfig+0x10e>
 8002b02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b06:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d102      	bne.n	8002b34 <HAL_RCC_OscConfig+0x94>
 8002b2e:	4ba1      	ldr	r3, [pc, #644]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	e015      	b.n	8002b60 <HAL_RCC_OscConfig+0xc0>
 8002b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b38:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b50:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b5c:	4b95      	ldr	r3, [pc, #596]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b64:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002b68:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002b6c:	fa92 f2a2 	rbit	r2, r2
 8002b70:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002b74:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b78:	fab2 f282 	clz	r2, r2
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f042 0220 	orr.w	r2, r2, #32
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	f002 021f 	and.w	r2, r2, #31
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8111 	beq.w	8002db8 <HAL_RCC_OscConfig+0x318>
 8002b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 8108 	bne.w	8002db8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f000 bfc6 	b.w	8003b3a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbe:	d106      	bne.n	8002bce <HAL_RCC_OscConfig+0x12e>
 8002bc0:	4b7c      	ldr	r3, [pc, #496]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a7b      	ldr	r2, [pc, #492]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	e036      	b.n	8002c3c <HAL_RCC_OscConfig+0x19c>
 8002bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x158>
 8002bde:	4b75      	ldr	r3, [pc, #468]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a74      	ldr	r2, [pc, #464]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b72      	ldr	r3, [pc, #456]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a71      	ldr	r2, [pc, #452]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e021      	b.n	8002c3c <HAL_RCC_OscConfig+0x19c>
 8002bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x184>
 8002c0a:	4b6a      	ldr	r3, [pc, #424]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a69      	ldr	r2, [pc, #420]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b67      	ldr	r3, [pc, #412]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a66      	ldr	r2, [pc, #408]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e00b      	b.n	8002c3c <HAL_RCC_OscConfig+0x19c>
 8002c24:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a62      	ldr	r2, [pc, #392]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4b60      	ldr	r3, [pc, #384]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a5f      	ldr	r2, [pc, #380]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d059      	beq.n	8002d00 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7ff fc68 	bl	8002520 <HAL_GetTick>
 8002c50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c56:	f7ff fc63 	bl	8002520 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d902      	bls.n	8002c6c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	f000 bf67 	b.w	8003b3a <HAL_RCC_OscConfig+0x109a>
 8002c6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c70:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002c80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_OscConfig+0x1fe>
 8002c98:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	e015      	b.n	8002cca <HAL_RCC_OscConfig+0x22a>
 8002c9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002cba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002cc6:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cce:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002cd2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002cd6:	fa92 f2a2 	rbit	r2, r2
 8002cda:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002cde:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ce2:	fab2 f282 	clz	r2, r2
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	f042 0220 	orr.w	r2, r2, #32
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	f002 021f 	and.w	r2, r2, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ab      	beq.n	8002c56 <HAL_RCC_OscConfig+0x1b6>
 8002cfe:	e05c      	b.n	8002dba <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7ff fc0e 	bl	8002520 <HAL_GetTick>
 8002d04:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d0a:	f7ff fc09 	bl	8002520 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d902      	bls.n	8002d20 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	f000 bf0d 	b.w	8003b3a <HAL_RCC_OscConfig+0x109a>
 8002d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d24:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002d34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d102      	bne.n	8002d52 <HAL_RCC_OscConfig+0x2b2>
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	e015      	b.n	8002d7e <HAL_RCC_OscConfig+0x2de>
 8002d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d56:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <HAL_RCC_OscConfig+0x314>)
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d82:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002d86:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002d8a:	fa92 f2a2 	rbit	r2, r2
 8002d8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002d92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d96:	fab2 f282 	clz	r2, r2
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f042 0220 	orr.w	r2, r2, #32
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f002 021f 	and.w	r2, r2, #31
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1ab      	bne.n	8002d0a <HAL_RCC_OscConfig+0x26a>
 8002db2:	e002      	b.n	8002dba <HAL_RCC_OscConfig+0x31a>
 8002db4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dbe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 817f 	beq.w	80030ce <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002dd0:	4ba7      	ldr	r3, [pc, #668]	; (8003070 <HAL_RCC_OscConfig+0x5d0>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ddc:	4ba4      	ldr	r3, [pc, #656]	; (8003070 <HAL_RCC_OscConfig+0x5d0>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d173      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x430>
 8002de8:	4ba1      	ldr	r3, [pc, #644]	; (8003070 <HAL_RCC_OscConfig+0x5d0>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df4:	d16c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x430>
 8002df6:	2302      	movs	r3, #2
 8002df8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002e08:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d102      	bne.n	8002e26 <HAL_RCC_OscConfig+0x386>
 8002e20:	4b93      	ldr	r3, [pc, #588]	; (8003070 <HAL_RCC_OscConfig+0x5d0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	e013      	b.n	8002e4e <HAL_RCC_OscConfig+0x3ae>
 8002e26:	2302      	movs	r3, #2
 8002e28:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002e38:	2302      	movs	r3, #2
 8002e3a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e3e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e4a:	4b89      	ldr	r3, [pc, #548]	; (8003070 <HAL_RCC_OscConfig+0x5d0>)
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002e54:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002e58:	fa92 f2a2 	rbit	r2, r2
 8002e5c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002e60:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e64:	fab2 f282 	clz	r2, r2
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	f042 0220 	orr.w	r2, r2, #32
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	f002 021f 	and.w	r2, r2, #31
 8002e74:	2101      	movs	r1, #1
 8002e76:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCC_OscConfig+0x3f6>
 8002e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d002      	beq.n	8002e96 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f000 be52 	b.w	8003b3a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b76      	ldr	r3, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x5d0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	21f8      	movs	r1, #248	; 0xf8
 8002eac:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002eb4:	fa91 f1a1 	rbit	r1, r1
 8002eb8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002ebc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ec0:	fab1 f181 	clz	r1, r1
 8002ec4:	b2c9      	uxtb	r1, r1
 8002ec6:	408b      	lsls	r3, r1
 8002ec8:	4969      	ldr	r1, [pc, #420]	; (8003070 <HAL_RCC_OscConfig+0x5d0>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	e0fe      	b.n	80030ce <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 8088 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x552>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002ef4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7ff fb07 	bl	8002520 <HAL_GetTick>
 8002f12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f18:	f7ff fb02 	bl	8002520 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d902      	bls.n	8002f2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	f000 be06 	b.w	8003b3a <HAL_RCC_OscConfig+0x109a>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002f40:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d102      	bne.n	8002f5e <HAL_RCC_OscConfig+0x4be>
 8002f58:	4b45      	ldr	r3, [pc, #276]	; (8003070 <HAL_RCC_OscConfig+0x5d0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	e013      	b.n	8002f86 <HAL_RCC_OscConfig+0x4e6>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002f70:	2302      	movs	r3, #2
 8002f72:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f76:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCC_OscConfig+0x5d0>)
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2202      	movs	r2, #2
 8002f88:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002f8c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002f90:	fa92 f2a2 	rbit	r2, r2
 8002f94:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002f98:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f9c:	fab2 f282 	clz	r2, r2
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	f042 0220 	orr.w	r2, r2, #32
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	f002 021f 	and.w	r2, r2, #31
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0af      	beq.n	8002f18 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <HAL_RCC_OscConfig+0x5d0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	21f8      	movs	r1, #248	; 0xf8
 8002fce:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002fd6:	fa91 f1a1 	rbit	r1, r1
 8002fda:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002fde:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fe2:	fab1 f181 	clz	r1, r1
 8002fe6:	b2c9      	uxtb	r1, r1
 8002fe8:	408b      	lsls	r3, r1
 8002fea:	4921      	ldr	r1, [pc, #132]	; (8003070 <HAL_RCC_OscConfig+0x5d0>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]
 8002ff0:	e06d      	b.n	80030ce <HAL_RCC_OscConfig+0x62e>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003004:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003012:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	461a      	mov	r2, r3
 800301a:	2300      	movs	r3, #0
 800301c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7ff fa7f 	bl	8002520 <HAL_GetTick>
 8003022:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	e00a      	b.n	800303e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003028:	f7ff fa7a 	bl	8002520 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d902      	bls.n	800303e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	f000 bd7e 	b.w	8003b3a <HAL_RCC_OscConfig+0x109a>
 800303e:	2302      	movs	r3, #2
 8003040:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003050:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <HAL_RCC_OscConfig+0x5d4>
 8003068:	4b01      	ldr	r3, [pc, #4]	; (8003070 <HAL_RCC_OscConfig+0x5d0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	e016      	b.n	800309c <HAL_RCC_OscConfig+0x5fc>
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000
 8003074:	2302      	movs	r3, #2
 8003076:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003086:	2302      	movs	r3, #2
 8003088:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800308c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003098:	4bbf      	ldr	r3, [pc, #764]	; (8003398 <HAL_RCC_OscConfig+0x8f8>)
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2202      	movs	r2, #2
 800309e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80030a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80030a6:	fa92 f2a2 	rbit	r2, r2
 80030aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80030ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030b2:	fab2 f282 	clz	r2, r2
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	f042 0220 	orr.w	r2, r2, #32
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	f002 021f 	and.w	r2, r2, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f202 	lsl.w	r2, r1, r2
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ac      	bne.n	8003028 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8113 	beq.w	800330a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d07c      	beq.n	80031ee <HAL_RCC_OscConfig+0x74e>
 80030f4:	2301      	movs	r3, #1
 80030f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fe:	fa93 f3a3 	rbit	r3, r3
 8003102:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003106:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	4ba2      	ldr	r3, [pc, #648]	; (800339c <HAL_RCC_OscConfig+0x8fc>)
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	461a      	mov	r2, r3
 800311a:	2301      	movs	r3, #1
 800311c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311e:	f7ff f9ff 	bl	8002520 <HAL_GetTick>
 8003122:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003128:	f7ff f9fa 	bl	8002520 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d902      	bls.n	800313e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	f000 bcfe 	b.w	8003b3a <HAL_RCC_OscConfig+0x109a>
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003148:	fa93 f2a3 	rbit	r2, r3
 800314c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003150:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800315a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800315e:	2202      	movs	r2, #2
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003182:	2202      	movs	r2, #2
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	fa93 f2a3 	rbit	r2, r3
 8003194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003198:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800319c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	4b7e      	ldr	r3, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x8f8>)
 80031a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031aa:	2102      	movs	r1, #2
 80031ac:	6019      	str	r1, [r3, #0]
 80031ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	fa93 f1a3 	rbit	r1, r3
 80031bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031c4:	6019      	str	r1, [r3, #0]
  return result;
 80031c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	2101      	movs	r1, #1
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d09d      	beq.n	8003128 <HAL_RCC_OscConfig+0x688>
 80031ec:	e08d      	b.n	800330a <HAL_RCC_OscConfig+0x86a>
 80031ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	fa93 f2a3 	rbit	r2, r3
 8003208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800320c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003210:	601a      	str	r2, [r3, #0]
  return result;
 8003212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003216:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800321a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	4b5d      	ldr	r3, [pc, #372]	; (800339c <HAL_RCC_OscConfig+0x8fc>)
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	461a      	mov	r2, r3
 800322c:	2300      	movs	r3, #0
 800322e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7ff f976 	bl	8002520 <HAL_GetTick>
 8003234:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323a:	f7ff f971 	bl	8002520 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d902      	bls.n	8003250 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	f000 bc75 	b.w	8003b3a <HAL_RCC_OscConfig+0x109a>
 8003250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003254:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003258:	2202      	movs	r2, #2
 800325a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003260:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800327c:	2202      	movs	r2, #2
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003284:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032a0:	2202      	movs	r2, #2
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	fa93 f2a3 	rbit	r2, r3
 80032b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032bc:	4b36      	ldr	r3, [pc, #216]	; (8003398 <HAL_RCC_OscConfig+0x8f8>)
 80032be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032c8:	2102      	movs	r1, #2
 80032ca:	6019      	str	r1, [r3, #0]
 80032cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	fa93 f1a3 	rbit	r1, r3
 80032da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032de:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032e2:	6019      	str	r1, [r3, #0]
  return result;
 80032e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d197      	bne.n	800323a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 81a5 	beq.w	800366a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <HAL_RCC_OscConfig+0x8f8>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d116      	bne.n	8003360 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_OscConfig+0x8f8>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_RCC_OscConfig+0x8f8>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333c:	61d3      	str	r3, [r2, #28]
 800333e:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_RCC_OscConfig+0x8f8>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003354:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003358:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800335a:	2301      	movs	r3, #1
 800335c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <HAL_RCC_OscConfig+0x900>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d121      	bne.n	80033b0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_RCC_OscConfig+0x900>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0b      	ldr	r2, [pc, #44]	; (80033a0 <HAL_RCC_OscConfig+0x900>)
 8003372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003376:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003378:	f7ff f8d2 	bl	8002520 <HAL_GetTick>
 800337c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	e010      	b.n	80033a4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003382:	f7ff f8cd 	bl	8002520 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d908      	bls.n	80033a4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e3d1      	b.n	8003b3a <HAL_RCC_OscConfig+0x109a>
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	10908120 	.word	0x10908120
 80033a0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b8d      	ldr	r3, [pc, #564]	; (80035dc <HAL_RCC_OscConfig+0xb3c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0e8      	beq.n	8003382 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x92e>
 80033c0:	4b87      	ldr	r3, [pc, #540]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4a86      	ldr	r2, [pc, #536]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6213      	str	r3, [r2, #32]
 80033cc:	e035      	b.n	800343a <HAL_RCC_OscConfig+0x99a>
 80033ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x958>
 80033de:	4b80      	ldr	r3, [pc, #512]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4a7f      	ldr	r2, [pc, #508]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	6213      	str	r3, [r2, #32]
 80033ea:	4b7d      	ldr	r3, [pc, #500]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4a7c      	ldr	r2, [pc, #496]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 80033f0:	f023 0304 	bic.w	r3, r3, #4
 80033f4:	6213      	str	r3, [r2, #32]
 80033f6:	e020      	b.n	800343a <HAL_RCC_OscConfig+0x99a>
 80033f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b05      	cmp	r3, #5
 8003406:	d10c      	bne.n	8003422 <HAL_RCC_OscConfig+0x982>
 8003408:	4b75      	ldr	r3, [pc, #468]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4a74      	ldr	r2, [pc, #464]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 800340e:	f043 0304 	orr.w	r3, r3, #4
 8003412:	6213      	str	r3, [r2, #32]
 8003414:	4b72      	ldr	r3, [pc, #456]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a71      	ldr	r2, [pc, #452]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	e00b      	b.n	800343a <HAL_RCC_OscConfig+0x99a>
 8003422:	4b6f      	ldr	r3, [pc, #444]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a6e      	ldr	r2, [pc, #440]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	6213      	str	r3, [r2, #32]
 800342e:	4b6c      	ldr	r3, [pc, #432]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a6b      	ldr	r2, [pc, #428]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 8003434:	f023 0304 	bic.w	r3, r3, #4
 8003438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800343a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800343e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8081 	beq.w	800354e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344c:	f7ff f868 	bl	8002520 <HAL_GetTick>
 8003450:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	e00b      	b.n	800346e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7ff f863 	bl	8002520 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e365      	b.n	8003b3a <HAL_RCC_OscConfig+0x109a>
 800346e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003472:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003476:	2202      	movs	r2, #2
 8003478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800347e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	fa93 f2a3 	rbit	r2, r3
 8003488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800348c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003496:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800349a:	2202      	movs	r2, #2
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034a2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	fa93 f2a3 	rbit	r2, r3
 80034ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034b4:	601a      	str	r2, [r3, #0]
  return result;
 80034b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ba:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f043 0302 	orr.w	r3, r3, #2
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d102      	bne.n	80034da <HAL_RCC_OscConfig+0xa3a>
 80034d4:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	e013      	b.n	8003502 <HAL_RCC_OscConfig+0xa62>
 80034da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034e2:	2202      	movs	r2, #2
 80034e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	fa93 f2a3 	rbit	r2, r3
 80034f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003506:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800350a:	2102      	movs	r1, #2
 800350c:	6011      	str	r1, [r2, #0]
 800350e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003512:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	fa92 f1a2 	rbit	r1, r2
 800351c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003520:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003524:	6011      	str	r1, [r2, #0]
  return result;
 8003526:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800352a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	fab2 f282 	clz	r2, r2
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	f002 021f 	and.w	r2, r2, #31
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f202 	lsl.w	r2, r1, r2
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d084      	beq.n	8003456 <HAL_RCC_OscConfig+0x9b6>
 800354c:	e083      	b.n	8003656 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7fe ffe7 	bl	8002520 <HAL_GetTick>
 8003552:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fe ffe2 	bl	8002520 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e2e4      	b.n	8003b3a <HAL_RCC_OscConfig+0x109a>
 8003570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003574:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003578:	2202      	movs	r2, #2
 800357a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003580:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800358e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003598:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800359c:	2202      	movs	r2, #2
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	fa93 f2a3 	rbit	r2, r3
 80035ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035b6:	601a      	str	r2, [r3, #0]
  return result;
 80035b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035bc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d106      	bne.n	80035e4 <HAL_RCC_OscConfig+0xb44>
 80035d6:	4b02      	ldr	r3, [pc, #8]	; (80035e0 <HAL_RCC_OscConfig+0xb40>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	e017      	b.n	800360c <HAL_RCC_OscConfig+0xb6c>
 80035dc:	40007000 	.word	0x40007000
 80035e0:	40021000 	.word	0x40021000
 80035e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80035ec:	2202      	movs	r2, #2
 80035ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	fa93 f2a3 	rbit	r2, r3
 80035fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003602:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	4bb3      	ldr	r3, [pc, #716]	; (80038d8 <HAL_RCC_OscConfig+0xe38>)
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003610:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003614:	2102      	movs	r1, #2
 8003616:	6011      	str	r1, [r2, #0]
 8003618:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800361c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	fa92 f1a2 	rbit	r1, r2
 8003626:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800362a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800362e:	6011      	str	r1, [r2, #0]
  return result;
 8003630:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003634:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	fab2 f282 	clz	r2, r2
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f002 021f 	and.w	r2, r2, #31
 800364a:	2101      	movs	r1, #1
 800364c:	fa01 f202 	lsl.w	r2, r1, r2
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d180      	bne.n	8003558 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003656:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800365a:	2b01      	cmp	r3, #1
 800365c:	d105      	bne.n	800366a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365e:	4b9e      	ldr	r3, [pc, #632]	; (80038d8 <HAL_RCC_OscConfig+0xe38>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4a9d      	ldr	r2, [pc, #628]	; (80038d8 <HAL_RCC_OscConfig+0xe38>)
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003668:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800366a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800366e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 825e 	beq.w	8003b38 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800367c:	4b96      	ldr	r3, [pc, #600]	; (80038d8 <HAL_RCC_OscConfig+0xe38>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b08      	cmp	r3, #8
 8003686:	f000 821f 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800368a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800368e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b02      	cmp	r3, #2
 8003698:	f040 8170 	bne.w	800397c <HAL_RCC_OscConfig+0xedc>
 800369c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	fa93 f2a3 	rbit	r2, r3
 80036b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036c0:	601a      	str	r2, [r3, #0]
  return result;
 80036c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036ca:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	461a      	mov	r2, r3
 80036de:	2300      	movs	r3, #0
 80036e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e2:	f7fe ff1d 	bl	8002520 <HAL_GetTick>
 80036e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ea:	e009      	b.n	8003700 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe ff18 	bl	8002520 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e21c      	b.n	8003b3a <HAL_RCC_OscConfig+0x109a>
 8003700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003704:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003712:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	fa93 f2a3 	rbit	r2, r3
 800371c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003720:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003724:	601a      	str	r2, [r3, #0]
  return result;
 8003726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800372e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d102      	bne.n	800374a <HAL_RCC_OscConfig+0xcaa>
 8003744:	4b64      	ldr	r3, [pc, #400]	; (80038d8 <HAL_RCC_OscConfig+0xe38>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	e027      	b.n	800379a <HAL_RCC_OscConfig+0xcfa>
 800374a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800374e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	fa93 f2a3 	rbit	r2, r3
 8003766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003774:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003782:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	fa93 f2a3 	rbit	r2, r3
 800378c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003790:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_OscConfig+0xe38>)
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800379e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037a6:	6011      	str	r1, [r2, #0]
 80037a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	fa92 f1a2 	rbit	r1, r2
 80037b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037ba:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80037be:	6011      	str	r1, [r2, #0]
  return result;
 80037c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037c4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	fab2 f282 	clz	r2, r2
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	f042 0220 	orr.w	r2, r2, #32
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	f002 021f 	and.w	r2, r2, #31
 80037da:	2101      	movs	r1, #1
 80037dc:	fa01 f202 	lsl.w	r2, r1, r2
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d182      	bne.n	80036ec <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e6:	4b3c      	ldr	r3, [pc, #240]	; (80038d8 <HAL_RCC_OscConfig+0xe38>)
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	f023 020f 	bic.w	r2, r3, #15
 80037ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	4937      	ldr	r1, [pc, #220]	; (80038d8 <HAL_RCC_OscConfig+0xe38>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003800:	4b35      	ldr	r3, [pc, #212]	; (80038d8 <HAL_RCC_OscConfig+0xe38>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6a19      	ldr	r1, [r3, #32]
 8003814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003818:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	430b      	orrs	r3, r1
 8003822:	492d      	ldr	r1, [pc, #180]	; (80038d8 <HAL_RCC_OscConfig+0xe38>)
 8003824:	4313      	orrs	r3, r2
 8003826:	604b      	str	r3, [r1, #4]
 8003828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	fa93 f2a3 	rbit	r2, r3
 8003844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003848:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800384c:	601a      	str	r2, [r3, #0]
  return result;
 800384e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003852:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003856:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003858:	fab3 f383 	clz	r3, r3
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003862:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	461a      	mov	r2, r3
 800386a:	2301      	movs	r3, #1
 800386c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7fe fe57 	bl	8002520 <HAL_GetTick>
 8003872:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003876:	e009      	b.n	800388c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003878:	f7fe fe52 	bl	8002520 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e156      	b.n	8003b3a <HAL_RCC_OscConfig+0x109a>
 800388c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003890:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003894:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800389e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	fa93 f2a3 	rbit	r2, r3
 80038a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038b0:	601a      	str	r2, [r3, #0]
  return result;
 80038b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d105      	bne.n	80038dc <HAL_RCC_OscConfig+0xe3c>
 80038d0:	4b01      	ldr	r3, [pc, #4]	; (80038d8 <HAL_RCC_OscConfig+0xe38>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	e02a      	b.n	800392c <HAL_RCC_OscConfig+0xe8c>
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	fa93 f2a3 	rbit	r2, r3
 80038f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003906:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800390a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003914:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	fa93 f2a3 	rbit	r2, r3
 800391e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003922:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	4b86      	ldr	r3, [pc, #536]	; (8003b44 <HAL_RCC_OscConfig+0x10a4>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003930:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003934:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003938:	6011      	str	r1, [r2, #0]
 800393a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800393e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	fa92 f1a2 	rbit	r1, r2
 8003948:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800394c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003950:	6011      	str	r1, [r2, #0]
  return result;
 8003952:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003956:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	fab2 f282 	clz	r2, r2
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	f042 0220 	orr.w	r2, r2, #32
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	f002 021f 	and.w	r2, r2, #31
 800396c:	2101      	movs	r1, #1
 800396e:	fa01 f202 	lsl.w	r2, r1, r2
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	f43f af7f 	beq.w	8003878 <HAL_RCC_OscConfig+0xdd8>
 800397a:	e0dd      	b.n	8003b38 <HAL_RCC_OscConfig+0x1098>
 800397c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003980:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003984:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800398e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	fa93 f2a3 	rbit	r2, r3
 8003998:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800399c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039a0:	601a      	str	r2, [r3, #0]
  return result;
 80039a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039aa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	461a      	mov	r2, r3
 80039be:	2300      	movs	r3, #0
 80039c0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fe fdad 	bl	8002520 <HAL_GetTick>
 80039c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ca:	e009      	b.n	80039e0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fe fda8 	bl	8002520 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e0ac      	b.n	8003b3a <HAL_RCC_OscConfig+0x109a>
 80039e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	fa93 f2a3 	rbit	r2, r3
 80039fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a00:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a04:	601a      	str	r2, [r3, #0]
  return result;
 8003a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a0a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a10:	fab3 f383 	clz	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <HAL_RCC_OscConfig+0xf8a>
 8003a24:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <HAL_RCC_OscConfig+0x10a4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	e027      	b.n	8003a7a <HAL_RCC_OscConfig+0xfda>
 8003a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a3c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	fa93 f2a3 	rbit	r2, r3
 8003a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a4a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a54:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a62:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	fa93 f2a3 	rbit	r2, r3
 8003a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a70:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <HAL_RCC_OscConfig+0x10a4>)
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a7e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a82:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a86:	6011      	str	r1, [r2, #0]
 8003a88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a8c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	fa92 f1a2 	rbit	r1, r2
 8003a96:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a9a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003a9e:	6011      	str	r1, [r2, #0]
  return result;
 8003aa0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003aa4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	fab2 f282 	clz	r2, r2
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	f042 0220 	orr.w	r2, r2, #32
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	f002 021f 	and.w	r2, r2, #31
 8003aba:	2101      	movs	r1, #1
 8003abc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d182      	bne.n	80039cc <HAL_RCC_OscConfig+0xf2c>
 8003ac6:	e037      	b.n	8003b38 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003acc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e02e      	b.n	8003b3a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_OscConfig+0x10a4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003ae4:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <HAL_RCC_OscConfig+0x10a4>)
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003aec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003af0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d117      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b08:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d10b      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b20:	f003 020f 	and.w	r2, r3, #15
 8003b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000

08003b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b09e      	sub	sp, #120	; 0x78
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e162      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b60:	4b90      	ldr	r3, [pc, #576]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d910      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b8d      	ldr	r3, [pc, #564]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 0207 	bic.w	r2, r3, #7
 8003b76:	498b      	ldr	r1, [pc, #556]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b89      	ldr	r3, [pc, #548]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e14a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b9c:	4b82      	ldr	r3, [pc, #520]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	497f      	ldr	r1, [pc, #508]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80dc 	beq.w	8003d74 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d13c      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xf6>
 8003bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bc8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd4:	fab3 f383 	clz	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d102      	bne.n	8003bee <HAL_RCC_ClockConfig+0xa6>
 8003be8:	4b6f      	ldr	r3, [pc, #444]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	e00f      	b.n	8003c0e <HAL_RCC_ClockConfig+0xc6>
 8003bee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bf2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	667b      	str	r3, [r7, #100]	; 0x64
 8003bfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c00:	663b      	str	r3, [r7, #96]	; 0x60
 8003c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c0a:	4b67      	ldr	r3, [pc, #412]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c12:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c16:	fa92 f2a2 	rbit	r2, r2
 8003c1a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c1e:	fab2 f282 	clz	r2, r2
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	f042 0220 	orr.w	r2, r2, #32
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	f002 021f 	and.w	r2, r2, #31
 8003c2e:	2101      	movs	r1, #1
 8003c30:	fa01 f202 	lsl.w	r2, r1, r2
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d17b      	bne.n	8003d32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e0f3      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d13c      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x178>
 8003c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c4e:	fa93 f3a3 	rbit	r3, r3
 8003c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d102      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x128>
 8003c6a:	4b4f      	ldr	r3, [pc, #316]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	e00f      	b.n	8003c90 <HAL_RCC_ClockConfig+0x148>
 8003c70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c82:	643b      	str	r3, [r7, #64]	; 0x40
 8003c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8c:	4b46      	ldr	r3, [pc, #280]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c94:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c98:	fa92 f2a2 	rbit	r2, r2
 8003c9c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca0:	fab2 f282 	clz	r2, r2
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	f042 0220 	orr.w	r2, r2, #32
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	f002 021f 	and.w	r2, r2, #31
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d13a      	bne.n	8003d32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0b2      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cce:	fab3 f383 	clz	r3, r3
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d102      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x1a0>
 8003ce2:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	e00d      	b.n	8003d04 <HAL_RCC_ClockConfig+0x1bc>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	4b29      	ldr	r3, [pc, #164]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	2202      	movs	r2, #2
 8003d06:	61ba      	str	r2, [r7, #24]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	fa92 f2a2 	rbit	r2, r2
 8003d0e:	617a      	str	r2, [r7, #20]
  return result;
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	fab2 f282 	clz	r2, r2
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	f042 0220 	orr.w	r2, r2, #32
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	f002 021f 	and.w	r2, r2, #31
 8003d22:	2101      	movs	r1, #1
 8003d24:	fa01 f202 	lsl.w	r2, r1, r2
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e079      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d32:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f023 0203 	bic.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	491a      	ldr	r1, [pc, #104]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d44:	f7fe fbec 	bl	8002520 <HAL_GetTick>
 8003d48:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4c:	f7fe fbe8 	bl	8002520 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e061      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <HAL_RCC_ClockConfig+0x260>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 020c 	and.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d1eb      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d214      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 0207 	bic.w	r2, r3, #7
 8003d8a:	4906      	ldr	r1, [pc, #24]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <HAL_RCC_ClockConfig+0x25c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e040      	b.n	8003e26 <HAL_RCC_ClockConfig+0x2de>
 8003da4:	40022000 	.word	0x40022000
 8003da8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db8:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_RCC_ClockConfig+0x2e8>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	491a      	ldr	r1, [pc, #104]	; (8003e30 <HAL_RCC_ClockConfig+0x2e8>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd6:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <HAL_RCC_ClockConfig+0x2e8>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4912      	ldr	r1, [pc, #72]	; (8003e30 <HAL_RCC_ClockConfig+0x2e8>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dea:	f000 f829 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003dee:	4601      	mov	r1, r0
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <HAL_RCC_ClockConfig+0x2e8>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003df8:	22f0      	movs	r2, #240	; 0xf0
 8003dfa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	fa92 f2a2 	rbit	r2, r2
 8003e02:	60fa      	str	r2, [r7, #12]
  return result;
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	fab2 f282 	clz	r2, r2
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	40d3      	lsrs	r3, r2
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_RCC_ClockConfig+0x2ec>)
 8003e10:	5cd3      	ldrb	r3, [r2, r3]
 8003e12:	fa21 f303 	lsr.w	r3, r1, r3
 8003e16:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <HAL_RCC_ClockConfig+0x2f0>)
 8003e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_RCC_ClockConfig+0x2f4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe fb3a 	bl	8002498 <HAL_InitTick>
  
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3778      	adds	r7, #120	; 0x78
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000
 8003e34:	08006580 	.word	0x08006580
 8003e38:	20000030 	.word	0x20000030
 8003e3c:	20000034 	.word	0x20000034

08003e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b08b      	sub	sp, #44	; 0x2c
 8003e44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e5a:	4b2a      	ldr	r3, [pc, #168]	; (8003f04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d002      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x30>
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0x36>
 8003e6e:	e03f      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e72:	623b      	str	r3, [r7, #32]
      break;
 8003e74:	e03f      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e7c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e80:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	fa92 f2a2 	rbit	r2, r2
 8003e88:	607a      	str	r2, [r7, #4]
  return result;
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	fab2 f282 	clz	r2, r2
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	40d3      	lsrs	r3, r2
 8003e94:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e96:	5cd3      	ldrb	r3, [r2, r3]
 8003e98:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	220f      	movs	r2, #15
 8003ea4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	fa92 f2a2 	rbit	r2, r2
 8003eac:	60fa      	str	r2, [r7, #12]
  return result;
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	fab2 f282 	clz	r2, r2
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	40d3      	lsrs	r3, r2
 8003eb8:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003eba:	5cd3      	ldrb	r3, [r2, r3]
 8003ebc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ec8:	4a0f      	ldr	r2, [pc, #60]	; (8003f08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed8:	e007      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003eda:	4a0b      	ldr	r2, [pc, #44]	; (8003f08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	fb02 f303 	mul.w	r3, r2, r3
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	623b      	str	r3, [r7, #32]
      break;
 8003eee:	e002      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ef2:	623b      	str	r3, [r7, #32]
      break;
 8003ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	372c      	adds	r7, #44	; 0x2c
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40021000 	.word	0x40021000
 8003f08:	007a1200 	.word	0x007a1200
 8003f0c:	08006598 	.word	0x08006598
 8003f10:	080065a8 	.word	0x080065a8

08003f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f18:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000030 	.word	0x20000030

08003f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f32:	f7ff ffef 	bl	8003f14 <HAL_RCC_GetHCLKFreq>
 8003f36:	4601      	mov	r1, r0
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f40:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	fa92 f2a2 	rbit	r2, r2
 8003f4c:	603a      	str	r2, [r7, #0]
  return result;
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	fab2 f282 	clz	r2, r2
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	40d3      	lsrs	r3, r2
 8003f58:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	08006590 	.word	0x08006590

08003f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f76:	f7ff ffcd 	bl	8003f14 <HAL_RCC_GetHCLKFreq>
 8003f7a:	4601      	mov	r1, r0
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f84:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	fa92 f2a2 	rbit	r2, r2
 8003f90:	603a      	str	r2, [r7, #0]
  return result;
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	fab2 f282 	clz	r2, r2
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	40d3      	lsrs	r3, r2
 8003f9c:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f9e:	5cd3      	ldrb	r3, [r2, r3]
 8003fa0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	08006590 	.word	0x08006590

08003fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b092      	sub	sp, #72	; 0x48
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80d4 	beq.w	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd8:	4b4e      	ldr	r3, [pc, #312]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10e      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe4:	4b4b      	ldr	r3, [pc, #300]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	4a4a      	ldr	r2, [pc, #296]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fee:	61d3      	str	r3, [r2, #28]
 8003ff0:	4b48      	ldr	r3, [pc, #288]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004002:	4b45      	ldr	r3, [pc, #276]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d118      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800400e:	4b42      	ldr	r3, [pc, #264]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a41      	ldr	r2, [pc, #260]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004018:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401a:	f7fe fa81 	bl	8002520 <HAL_GetTick>
 800401e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	e008      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004022:	f7fe fa7d 	bl	8002520 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b64      	cmp	r3, #100	; 0x64
 800402e:	d901      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e1d6      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004034:	4b38      	ldr	r3, [pc, #224]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004040:	4b34      	ldr	r3, [pc, #208]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800404a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8084 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800405c:	429a      	cmp	r2, r3
 800405e:	d07c      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004060:	4b2c      	ldr	r3, [pc, #176]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800406a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800406e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	4b26      	ldr	r3, [pc, #152]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	461a      	mov	r2, r3
 800408a:	2301      	movs	r3, #1
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004092:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	461a      	mov	r2, r3
 80040ae:	2300      	movs	r3, #0
 80040b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040b2:	4a18      	ldr	r2, [pc, #96]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04b      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c2:	f7fe fa2d 	bl	8002520 <HAL_GetTick>
 80040c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c8:	e00a      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ca:	f7fe fa29 	bl	8002520 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d8:	4293      	cmp	r3, r2
 80040da:	d901      	bls.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e180      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80040e0:	2302      	movs	r3, #2
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
 80040ec:	2302      	movs	r3, #2
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	fa93 f3a3 	rbit	r3, r3
 80040f6:	61fb      	str	r3, [r7, #28]
  return result;
 80040f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f043 0302 	orr.w	r3, r3, #2
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d108      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800410e:	4b01      	ldr	r3, [pc, #4]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	e00d      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004114:	40021000 	.word	0x40021000
 8004118:	40007000 	.word	0x40007000
 800411c:	10908100 	.word	0x10908100
 8004120:	2302      	movs	r3, #2
 8004122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	4b9a      	ldr	r3, [pc, #616]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	2202      	movs	r2, #2
 8004132:	613a      	str	r2, [r7, #16]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	fa92 f2a2 	rbit	r2, r2
 800413a:	60fa      	str	r2, [r7, #12]
  return result;
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	fab2 f282 	clz	r2, r2
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	f002 021f 	and.w	r2, r2, #31
 800414e:	2101      	movs	r1, #1
 8004150:	fa01 f202 	lsl.w	r2, r1, r2
 8004154:	4013      	ands	r3, r2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0b7      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800415a:	4b8f      	ldr	r3, [pc, #572]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	498c      	ldr	r1, [pc, #560]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004168:	4313      	orrs	r3, r2
 800416a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800416c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004174:	4b88      	ldr	r3, [pc, #544]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	4a87      	ldr	r2, [pc, #540]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800417a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800418c:	4b82      	ldr	r3, [pc, #520]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	f023 0203 	bic.w	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	497f      	ldr	r1, [pc, #508]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041aa:	4b7b      	ldr	r3, [pc, #492]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	4978      	ldr	r1, [pc, #480]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c8:	4b73      	ldr	r3, [pc, #460]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	4970      	ldr	r1, [pc, #448]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041e6:	4b6c      	ldr	r3, [pc, #432]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	f023 0210 	bic.w	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4969      	ldr	r1, [pc, #420]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004204:	4b64      	ldr	r3, [pc, #400]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	4961      	ldr	r1, [pc, #388]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004222:	4b5d      	ldr	r3, [pc, #372]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f023 0220 	bic.w	r2, r3, #32
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	495a      	ldr	r1, [pc, #360]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004230:	4313      	orrs	r3, r2
 8004232:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004240:	4b55      	ldr	r3, [pc, #340]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	4952      	ldr	r1, [pc, #328]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800425e:	4b4e      	ldr	r3, [pc, #312]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	494b      	ldr	r1, [pc, #300]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800426c:	4313      	orrs	r3, r2
 800426e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800427c:	4b46      	ldr	r3, [pc, #280]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	4943      	ldr	r1, [pc, #268]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800429a:	4b3f      	ldr	r3, [pc, #252]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	493c      	ldr	r1, [pc, #240]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042b8:	4b37      	ldr	r3, [pc, #220]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	4934      	ldr	r1, [pc, #208]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80042d6:	4b30      	ldr	r3, [pc, #192]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	492d      	ldr	r1, [pc, #180]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042f4:	4b28      	ldr	r3, [pc, #160]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	4925      	ldr	r1, [pc, #148]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004302:	4313      	orrs	r3, r2
 8004304:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004312:	4b21      	ldr	r3, [pc, #132]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	491e      	ldr	r1, [pc, #120]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004320:	4313      	orrs	r3, r2
 8004322:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	4916      	ldr	r1, [pc, #88]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	490f      	ldr	r1, [pc, #60]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800435c:	4313      	orrs	r3, r2
 800435e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	4907      	ldr	r1, [pc, #28]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800437a:	4313      	orrs	r3, r2
 800437c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00c      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800438a:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	e002      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439e:	4913      	ldr	r1, [pc, #76]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043bc:	490b      	ldr	r1, [pc, #44]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043da:	4904      	ldr	r1, [pc, #16]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3748      	adds	r7, #72	; 0x48
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000

080043f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e054      	b.n	80044ac <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d111      	bne.n	8004432 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 f87a 	bl	8005510 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a23      	ldr	r2, [pc, #140]	; (80044b4 <HAL_TIM_PWM_Init+0xc4>)
 8004428:	665a      	str	r2, [r3, #100]	; 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3304      	adds	r3, #4
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f000 fc99 	bl	8004d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	08002231 	.word	0x08002231

080044b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <HAL_TIM_PWM_Start+0x24>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e03c      	b.n	8004556 <HAL_TIM_PWM_Start+0x9e>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d109      	bne.n	80044f6 <HAL_TIM_PWM_Start+0x3e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	bf14      	ite	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	2300      	moveq	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	e02f      	b.n	8004556 <HAL_TIM_PWM_Start+0x9e>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d109      	bne.n	8004510 <HAL_TIM_PWM_Start+0x58>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	e022      	b.n	8004556 <HAL_TIM_PWM_Start+0x9e>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d109      	bne.n	800452a <HAL_TIM_PWM_Start+0x72>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e015      	b.n	8004556 <HAL_TIM_PWM_Start+0x9e>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b10      	cmp	r3, #16
 800452e:	d109      	bne.n	8004544 <HAL_TIM_PWM_Start+0x8c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	bf14      	ite	ne
 800453c:	2301      	movne	r3, #1
 800453e:	2300      	moveq	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e008      	b.n	8004556 <HAL_TIM_PWM_Start+0x9e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e0a1      	b.n	80046a2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <HAL_TIM_PWM_Start+0xb6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800456c:	e023      	b.n	80045b6 <HAL_TIM_PWM_Start+0xfe>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b04      	cmp	r3, #4
 8004572:	d104      	bne.n	800457e <HAL_TIM_PWM_Start+0xc6>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800457c:	e01b      	b.n	80045b6 <HAL_TIM_PWM_Start+0xfe>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d104      	bne.n	800458e <HAL_TIM_PWM_Start+0xd6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458c:	e013      	b.n	80045b6 <HAL_TIM_PWM_Start+0xfe>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b0c      	cmp	r3, #12
 8004592:	d104      	bne.n	800459e <HAL_TIM_PWM_Start+0xe6>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800459c:	e00b      	b.n	80045b6 <HAL_TIM_PWM_Start+0xfe>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_PWM_Start+0xf6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045ac:	e003      	b.n	80045b6 <HAL_TIM_PWM_Start+0xfe>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2201      	movs	r2, #1
 80045bc:	6839      	ldr	r1, [r7, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 ff80 	bl	80054c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a38      	ldr	r2, [pc, #224]	; (80046ac <HAL_TIM_PWM_Start+0x1f4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d018      	beq.n	8004600 <HAL_TIM_PWM_Start+0x148>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a37      	ldr	r2, [pc, #220]	; (80046b0 <HAL_TIM_PWM_Start+0x1f8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d013      	beq.n	8004600 <HAL_TIM_PWM_Start+0x148>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a35      	ldr	r2, [pc, #212]	; (80046b4 <HAL_TIM_PWM_Start+0x1fc>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00e      	beq.n	8004600 <HAL_TIM_PWM_Start+0x148>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a34      	ldr	r2, [pc, #208]	; (80046b8 <HAL_TIM_PWM_Start+0x200>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d009      	beq.n	8004600 <HAL_TIM_PWM_Start+0x148>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a32      	ldr	r2, [pc, #200]	; (80046bc <HAL_TIM_PWM_Start+0x204>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d004      	beq.n	8004600 <HAL_TIM_PWM_Start+0x148>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a31      	ldr	r2, [pc, #196]	; (80046c0 <HAL_TIM_PWM_Start+0x208>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d101      	bne.n	8004604 <HAL_TIM_PWM_Start+0x14c>
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <HAL_TIM_PWM_Start+0x14e>
 8004604:	2300      	movs	r3, #0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004618:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a23      	ldr	r2, [pc, #140]	; (80046ac <HAL_TIM_PWM_Start+0x1f4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d01d      	beq.n	8004660 <HAL_TIM_PWM_Start+0x1a8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462c:	d018      	beq.n	8004660 <HAL_TIM_PWM_Start+0x1a8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <HAL_TIM_PWM_Start+0x20c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d013      	beq.n	8004660 <HAL_TIM_PWM_Start+0x1a8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a22      	ldr	r2, [pc, #136]	; (80046c8 <HAL_TIM_PWM_Start+0x210>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00e      	beq.n	8004660 <HAL_TIM_PWM_Start+0x1a8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1a      	ldr	r2, [pc, #104]	; (80046b0 <HAL_TIM_PWM_Start+0x1f8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d009      	beq.n	8004660 <HAL_TIM_PWM_Start+0x1a8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <HAL_TIM_PWM_Start+0x1fc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <HAL_TIM_PWM_Start+0x1a8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <HAL_TIM_PWM_Start+0x208>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d115      	bne.n	800468c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_TIM_PWM_Start+0x214>)
 8004668:	4013      	ands	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b06      	cmp	r3, #6
 8004670:	d015      	beq.n	800469e <HAL_TIM_PWM_Start+0x1e6>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004678:	d011      	beq.n	800469e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0201 	orr.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468a:	e008      	b.n	800469e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0201 	orr.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e000      	b.n	80046a0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40012c00 	.word	0x40012c00
 80046b0:	40013400 	.word	0x40013400
 80046b4:	40014000 	.word	0x40014000
 80046b8:	40014400 	.word	0x40014400
 80046bc:	40014800 	.word	0x40014800
 80046c0:	40015000 	.word	0x40015000
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40000800 	.word	0x40000800
 80046cc:	00010007 	.word	0x00010007

080046d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2200      	movs	r2, #0
 80046e0:	6839      	ldr	r1, [r7, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 feee 	bl	80054c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a40      	ldr	r2, [pc, #256]	; (80047f0 <HAL_TIM_PWM_Stop+0x120>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_TIM_PWM_Stop+0x54>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a3f      	ldr	r2, [pc, #252]	; (80047f4 <HAL_TIM_PWM_Stop+0x124>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_TIM_PWM_Stop+0x54>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a3d      	ldr	r2, [pc, #244]	; (80047f8 <HAL_TIM_PWM_Stop+0x128>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_TIM_PWM_Stop+0x54>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a3c      	ldr	r2, [pc, #240]	; (80047fc <HAL_TIM_PWM_Stop+0x12c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_TIM_PWM_Stop+0x54>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a3a      	ldr	r2, [pc, #232]	; (8004800 <HAL_TIM_PWM_Stop+0x130>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIM_PWM_Stop+0x54>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a39      	ldr	r2, [pc, #228]	; (8004804 <HAL_TIM_PWM_Stop+0x134>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_TIM_PWM_Stop+0x58>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <HAL_TIM_PWM_Stop+0x5a>
 8004728:	2300      	movs	r3, #0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d017      	beq.n	800475e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a1a      	ldr	r2, [r3, #32]
 8004734:	f241 1311 	movw	r3, #4369	; 0x1111
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10f      	bne.n	800475e <HAL_TIM_PWM_Stop+0x8e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	f240 4344 	movw	r3, #1092	; 0x444
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d107      	bne.n	800475e <HAL_TIM_PWM_Stop+0x8e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6a1a      	ldr	r2, [r3, #32]
 8004764:	f241 1311 	movw	r3, #4369	; 0x1111
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <HAL_TIM_PWM_Stop+0xbe>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a1a      	ldr	r2, [r3, #32]
 8004774:	f240 4344 	movw	r3, #1092	; 0x444
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d107      	bne.n	800478e <HAL_TIM_PWM_Stop+0xbe>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d104      	bne.n	800479e <HAL_TIM_PWM_Stop+0xce>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800479c:	e023      	b.n	80047e6 <HAL_TIM_PWM_Stop+0x116>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d104      	bne.n	80047ae <HAL_TIM_PWM_Stop+0xde>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ac:	e01b      	b.n	80047e6 <HAL_TIM_PWM_Stop+0x116>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d104      	bne.n	80047be <HAL_TIM_PWM_Stop+0xee>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047bc:	e013      	b.n	80047e6 <HAL_TIM_PWM_Stop+0x116>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b0c      	cmp	r3, #12
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_PWM_Stop+0xfe>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047cc:	e00b      	b.n	80047e6 <HAL_TIM_PWM_Stop+0x116>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d104      	bne.n	80047de <HAL_TIM_PWM_Stop+0x10e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047dc:	e003      	b.n	80047e6 <HAL_TIM_PWM_Stop+0x116>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40013400 	.word	0x40013400
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40014400 	.word	0x40014400
 8004800:	40014800 	.word	0x40014800
 8004804:	40015000 	.word	0x40015000

08004808 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0a2      	b.n	8004962 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d111      	bne.n	800484c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fe6d 	bl	8005510 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483a:	2b00      	cmp	r3, #0
 800483c:	d102      	bne.n	8004844 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a4a      	ldr	r2, [pc, #296]	; (800496c <HAL_TIM_Encoder_Init+0x164>)
 8004842:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004862:	f023 0307 	bic.w	r3, r3, #7
 8004866:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f000 fa82 	bl	8004d7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	f023 0303 	bic.w	r3, r3, #3
 80048a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	4313      	orrs	r3, r2
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048be:	f023 030c 	bic.w	r3, r3, #12
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	4313      	orrs	r3, r2
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	011a      	lsls	r2, r3, #4
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	031b      	lsls	r3, r3, #12
 80048ee:	4313      	orrs	r3, r2
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80048fc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004904:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	4313      	orrs	r3, r2
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	08002171 	.word	0x08002171

08004970 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004980:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004988:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004990:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004998:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d110      	bne.n	80049c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d102      	bne.n	80049ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049a6:	7b7b      	ldrb	r3, [r7, #13]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d001      	beq.n	80049b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e069      	b.n	8004a84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c0:	e031      	b.n	8004a26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d110      	bne.n	80049ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049c8:	7bbb      	ldrb	r3, [r7, #14]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d102      	bne.n	80049d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049ce:	7b3b      	ldrb	r3, [r7, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d001      	beq.n	80049d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e055      	b.n	8004a84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e8:	e01d      	b.n	8004a26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d108      	bne.n	8004a02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049f0:	7bbb      	ldrb	r3, [r7, #14]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d105      	bne.n	8004a02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049f6:	7b7b      	ldrb	r3, [r7, #13]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d102      	bne.n	8004a02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049fc:	7b3b      	ldrb	r3, [r7, #12]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e03e      	b.n	8004a84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_TIM_Encoder_Start+0xc4>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d008      	beq.n	8004a44 <HAL_TIM_Encoder_Start+0xd4>
 8004a32:	e00f      	b.n	8004a54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fd41 	bl	80054c4 <TIM_CCxChannelCmd>
      break;
 8004a42:	e016      	b.n	8004a72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	2104      	movs	r1, #4
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fd39 	bl	80054c4 <TIM_CCxChannelCmd>
      break;
 8004a52:	e00e      	b.n	8004a72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fd31 	bl	80054c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2201      	movs	r2, #1
 8004a68:	2104      	movs	r1, #4
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fd2a 	bl	80054c4 <TIM_CCxChannelCmd>
      break;
 8004a70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0201 	orr.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e0ff      	b.n	8004caa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b14      	cmp	r3, #20
 8004ab6:	f200 80f0 	bhi.w	8004c9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004aba:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004b15 	.word	0x08004b15
 8004ac4:	08004c9b 	.word	0x08004c9b
 8004ac8:	08004c9b 	.word	0x08004c9b
 8004acc:	08004c9b 	.word	0x08004c9b
 8004ad0:	08004b55 	.word	0x08004b55
 8004ad4:	08004c9b 	.word	0x08004c9b
 8004ad8:	08004c9b 	.word	0x08004c9b
 8004adc:	08004c9b 	.word	0x08004c9b
 8004ae0:	08004b97 	.word	0x08004b97
 8004ae4:	08004c9b 	.word	0x08004c9b
 8004ae8:	08004c9b 	.word	0x08004c9b
 8004aec:	08004c9b 	.word	0x08004c9b
 8004af0:	08004bd7 	.word	0x08004bd7
 8004af4:	08004c9b 	.word	0x08004c9b
 8004af8:	08004c9b 	.word	0x08004c9b
 8004afc:	08004c9b 	.word	0x08004c9b
 8004b00:	08004c19 	.word	0x08004c19
 8004b04:	08004c9b 	.word	0x08004c9b
 8004b08:	08004c9b 	.word	0x08004c9b
 8004b0c:	08004c9b 	.word	0x08004c9b
 8004b10:	08004c59 	.word	0x08004c59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f9cc 	bl	8004eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0208 	orr.w	r2, r2, #8
 8004b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0204 	bic.w	r2, r2, #4
 8004b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6999      	ldr	r1, [r3, #24]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	619a      	str	r2, [r3, #24]
      break;
 8004b52:	e0a5      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fa46 	bl	8004fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6999      	ldr	r1, [r3, #24]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	021a      	lsls	r2, r3, #8
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	619a      	str	r2, [r3, #24]
      break;
 8004b94:	e084      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fab9 	bl	8005114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0208 	orr.w	r2, r2, #8
 8004bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0204 	bic.w	r2, r2, #4
 8004bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69d9      	ldr	r1, [r3, #28]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	61da      	str	r2, [r3, #28]
      break;
 8004bd4:	e064      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fb2b 	bl	8005238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69d9      	ldr	r1, [r3, #28]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	021a      	lsls	r2, r3, #8
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	61da      	str	r2, [r3, #28]
      break;
 8004c16:	e043      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fb7a 	bl	8005318 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0208 	orr.w	r2, r2, #8
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0204 	bic.w	r2, r2, #4
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c56:	e023      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fbc4 	bl	80053ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	021a      	lsls	r2, r3, #8
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c98:	e002      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop

08004cb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a42      	ldr	r2, [pc, #264]	; (8004e98 <TIM_Base_SetConfig+0x11c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d013      	beq.n	8004dbc <TIM_Base_SetConfig+0x40>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9a:	d00f      	beq.n	8004dbc <TIM_Base_SetConfig+0x40>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a3f      	ldr	r2, [pc, #252]	; (8004e9c <TIM_Base_SetConfig+0x120>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00b      	beq.n	8004dbc <TIM_Base_SetConfig+0x40>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a3e      	ldr	r2, [pc, #248]	; (8004ea0 <TIM_Base_SetConfig+0x124>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d007      	beq.n	8004dbc <TIM_Base_SetConfig+0x40>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a3d      	ldr	r2, [pc, #244]	; (8004ea4 <TIM_Base_SetConfig+0x128>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_Base_SetConfig+0x40>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a3c      	ldr	r2, [pc, #240]	; (8004ea8 <TIM_Base_SetConfig+0x12c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d108      	bne.n	8004dce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a31      	ldr	r2, [pc, #196]	; (8004e98 <TIM_Base_SetConfig+0x11c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01f      	beq.n	8004e16 <TIM_Base_SetConfig+0x9a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ddc:	d01b      	beq.n	8004e16 <TIM_Base_SetConfig+0x9a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2e      	ldr	r2, [pc, #184]	; (8004e9c <TIM_Base_SetConfig+0x120>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d017      	beq.n	8004e16 <TIM_Base_SetConfig+0x9a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2d      	ldr	r2, [pc, #180]	; (8004ea0 <TIM_Base_SetConfig+0x124>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <TIM_Base_SetConfig+0x9a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a2c      	ldr	r2, [pc, #176]	; (8004ea4 <TIM_Base_SetConfig+0x128>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00f      	beq.n	8004e16 <TIM_Base_SetConfig+0x9a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <TIM_Base_SetConfig+0x130>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00b      	beq.n	8004e16 <TIM_Base_SetConfig+0x9a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a2b      	ldr	r2, [pc, #172]	; (8004eb0 <TIM_Base_SetConfig+0x134>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d007      	beq.n	8004e16 <TIM_Base_SetConfig+0x9a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a2a      	ldr	r2, [pc, #168]	; (8004eb4 <TIM_Base_SetConfig+0x138>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <TIM_Base_SetConfig+0x9a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <TIM_Base_SetConfig+0x12c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d108      	bne.n	8004e28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a12      	ldr	r2, [pc, #72]	; (8004e98 <TIM_Base_SetConfig+0x11c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <TIM_Base_SetConfig+0x100>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <TIM_Base_SetConfig+0x128>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00f      	beq.n	8004e7c <TIM_Base_SetConfig+0x100>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a13      	ldr	r2, [pc, #76]	; (8004eac <TIM_Base_SetConfig+0x130>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00b      	beq.n	8004e7c <TIM_Base_SetConfig+0x100>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a12      	ldr	r2, [pc, #72]	; (8004eb0 <TIM_Base_SetConfig+0x134>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d007      	beq.n	8004e7c <TIM_Base_SetConfig+0x100>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a11      	ldr	r2, [pc, #68]	; (8004eb4 <TIM_Base_SetConfig+0x138>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_Base_SetConfig+0x100>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a0c      	ldr	r2, [pc, #48]	; (8004ea8 <TIM_Base_SetConfig+0x12c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d103      	bne.n	8004e84 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	615a      	str	r2, [r3, #20]
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800
 8004ea4:	40013400 	.word	0x40013400
 8004ea8:	40015000 	.word	0x40015000
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40014400 	.word	0x40014400
 8004eb4:	40014800 	.word	0x40014800

08004eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0303 	bic.w	r3, r3, #3
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f023 0302 	bic.w	r3, r3, #2
 8004f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a30      	ldr	r2, [pc, #192]	; (8004fd4 <TIM_OC1_SetConfig+0x11c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <TIM_OC1_SetConfig+0x88>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a2f      	ldr	r2, [pc, #188]	; (8004fd8 <TIM_OC1_SetConfig+0x120>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00f      	beq.n	8004f40 <TIM_OC1_SetConfig+0x88>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a2e      	ldr	r2, [pc, #184]	; (8004fdc <TIM_OC1_SetConfig+0x124>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_OC1_SetConfig+0x88>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a2d      	ldr	r2, [pc, #180]	; (8004fe0 <TIM_OC1_SetConfig+0x128>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_OC1_SetConfig+0x88>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a2c      	ldr	r2, [pc, #176]	; (8004fe4 <TIM_OC1_SetConfig+0x12c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC1_SetConfig+0x88>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a2b      	ldr	r2, [pc, #172]	; (8004fe8 <TIM_OC1_SetConfig+0x130>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10c      	bne.n	8004f5a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0308 	bic.w	r3, r3, #8
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1d      	ldr	r2, [pc, #116]	; (8004fd4 <TIM_OC1_SetConfig+0x11c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <TIM_OC1_SetConfig+0xd2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1c      	ldr	r2, [pc, #112]	; (8004fd8 <TIM_OC1_SetConfig+0x120>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00f      	beq.n	8004f8a <TIM_OC1_SetConfig+0xd2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1b      	ldr	r2, [pc, #108]	; (8004fdc <TIM_OC1_SetConfig+0x124>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00b      	beq.n	8004f8a <TIM_OC1_SetConfig+0xd2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1a      	ldr	r2, [pc, #104]	; (8004fe0 <TIM_OC1_SetConfig+0x128>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d007      	beq.n	8004f8a <TIM_OC1_SetConfig+0xd2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <TIM_OC1_SetConfig+0x12c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_OC1_SetConfig+0xd2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <TIM_OC1_SetConfig+0x130>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d111      	bne.n	8004fae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	621a      	str	r2, [r3, #32]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40013400 	.word	0x40013400
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800
 8004fe8:	40015000 	.word	0x40015000

08004fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f023 0210 	bic.w	r2, r3, #16
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 0320 	bic.w	r3, r3, #32
 800503a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <TIM_OC2_SetConfig+0x110>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d007      	beq.n	8005060 <TIM_OC2_SetConfig+0x74>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a2b      	ldr	r2, [pc, #172]	; (8005100 <TIM_OC2_SetConfig+0x114>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_OC2_SetConfig+0x74>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a2a      	ldr	r2, [pc, #168]	; (8005104 <TIM_OC2_SetConfig+0x118>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10d      	bne.n	800507c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <TIM_OC2_SetConfig+0x110>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <TIM_OC2_SetConfig+0xc0>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a1e      	ldr	r2, [pc, #120]	; (8005100 <TIM_OC2_SetConfig+0x114>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00f      	beq.n	80050ac <TIM_OC2_SetConfig+0xc0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <TIM_OC2_SetConfig+0x11c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00b      	beq.n	80050ac <TIM_OC2_SetConfig+0xc0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a1d      	ldr	r2, [pc, #116]	; (800510c <TIM_OC2_SetConfig+0x120>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <TIM_OC2_SetConfig+0xc0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <TIM_OC2_SetConfig+0x124>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC2_SetConfig+0xc0>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a17      	ldr	r2, [pc, #92]	; (8005104 <TIM_OC2_SetConfig+0x118>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d113      	bne.n	80050d4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40013400 	.word	0x40013400
 8005104:	40015000 	.word	0x40015000
 8005108:	40014000 	.word	0x40014000
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800

08005114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0303 	bic.w	r3, r3, #3
 800514e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2b      	ldr	r2, [pc, #172]	; (8005220 <TIM_OC3_SetConfig+0x10c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <TIM_OC3_SetConfig+0x72>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2a      	ldr	r2, [pc, #168]	; (8005224 <TIM_OC3_SetConfig+0x110>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_OC3_SetConfig+0x72>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a29      	ldr	r2, [pc, #164]	; (8005228 <TIM_OC3_SetConfig+0x114>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d10d      	bne.n	80051a2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800518c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051a0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <TIM_OC3_SetConfig+0x10c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <TIM_OC3_SetConfig+0xbe>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <TIM_OC3_SetConfig+0x110>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00f      	beq.n	80051d2 <TIM_OC3_SetConfig+0xbe>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a1d      	ldr	r2, [pc, #116]	; (800522c <TIM_OC3_SetConfig+0x118>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00b      	beq.n	80051d2 <TIM_OC3_SetConfig+0xbe>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a1c      	ldr	r2, [pc, #112]	; (8005230 <TIM_OC3_SetConfig+0x11c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d007      	beq.n	80051d2 <TIM_OC3_SetConfig+0xbe>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a1b      	ldr	r2, [pc, #108]	; (8005234 <TIM_OC3_SetConfig+0x120>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d003      	beq.n	80051d2 <TIM_OC3_SetConfig+0xbe>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a16      	ldr	r2, [pc, #88]	; (8005228 <TIM_OC3_SetConfig+0x114>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d113      	bne.n	80051fa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	621a      	str	r2, [r3, #32]
}
 8005214:	bf00      	nop
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	40012c00 	.word	0x40012c00
 8005224:	40013400 	.word	0x40013400
 8005228:	40015000 	.word	0x40015000
 800522c:	40014000 	.word	0x40014000
 8005230:	40014400 	.word	0x40014400
 8005234:	40014800 	.word	0x40014800

08005238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	031b      	lsls	r3, r3, #12
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a1a      	ldr	r2, [pc, #104]	; (8005300 <TIM_OC4_SetConfig+0xc8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <TIM_OC4_SetConfig+0x8c>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a19      	ldr	r2, [pc, #100]	; (8005304 <TIM_OC4_SetConfig+0xcc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00f      	beq.n	80052c4 <TIM_OC4_SetConfig+0x8c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a18      	ldr	r2, [pc, #96]	; (8005308 <TIM_OC4_SetConfig+0xd0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <TIM_OC4_SetConfig+0x8c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a17      	ldr	r2, [pc, #92]	; (800530c <TIM_OC4_SetConfig+0xd4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <TIM_OC4_SetConfig+0x8c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a16      	ldr	r2, [pc, #88]	; (8005310 <TIM_OC4_SetConfig+0xd8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_OC4_SetConfig+0x8c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a15      	ldr	r2, [pc, #84]	; (8005314 <TIM_OC4_SetConfig+0xdc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d109      	bne.n	80052d8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	019b      	lsls	r3, r3, #6
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	621a      	str	r2, [r3, #32]
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40013400 	.word	0x40013400
 8005308:	40014000 	.word	0x40014000
 800530c:	40014400 	.word	0x40014400
 8005310:	40014800 	.word	0x40014800
 8005314:	40015000 	.word	0x40015000

08005318 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800535c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a19      	ldr	r2, [pc, #100]	; (80053d4 <TIM_OC5_SetConfig+0xbc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d013      	beq.n	800539a <TIM_OC5_SetConfig+0x82>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <TIM_OC5_SetConfig+0xc0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00f      	beq.n	800539a <TIM_OC5_SetConfig+0x82>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a17      	ldr	r2, [pc, #92]	; (80053dc <TIM_OC5_SetConfig+0xc4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00b      	beq.n	800539a <TIM_OC5_SetConfig+0x82>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <TIM_OC5_SetConfig+0xc8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d007      	beq.n	800539a <TIM_OC5_SetConfig+0x82>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <TIM_OC5_SetConfig+0xcc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d003      	beq.n	800539a <TIM_OC5_SetConfig+0x82>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <TIM_OC5_SetConfig+0xd0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d109      	bne.n	80053ae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	621a      	str	r2, [r3, #32]
}
 80053c8:	bf00      	nop
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40012c00 	.word	0x40012c00
 80053d8:	40013400 	.word	0x40013400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800
 80053e8:	40015000 	.word	0x40015000

080053ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800541a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	051b      	lsls	r3, r3, #20
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1a      	ldr	r2, [pc, #104]	; (80054ac <TIM_OC6_SetConfig+0xc0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d013      	beq.n	8005470 <TIM_OC6_SetConfig+0x84>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a19      	ldr	r2, [pc, #100]	; (80054b0 <TIM_OC6_SetConfig+0xc4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00f      	beq.n	8005470 <TIM_OC6_SetConfig+0x84>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <TIM_OC6_SetConfig+0xc8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00b      	beq.n	8005470 <TIM_OC6_SetConfig+0x84>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <TIM_OC6_SetConfig+0xcc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d007      	beq.n	8005470 <TIM_OC6_SetConfig+0x84>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a16      	ldr	r2, [pc, #88]	; (80054bc <TIM_OC6_SetConfig+0xd0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_OC6_SetConfig+0x84>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <TIM_OC6_SetConfig+0xd4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d109      	bne.n	8005484 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005476:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	029b      	lsls	r3, r3, #10
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	621a      	str	r2, [r3, #32]
}
 800549e:	bf00      	nop
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40013400 	.word	0x40013400
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40014400 	.word	0x40014400
 80054bc:	40014800 	.word	0x40014800
 80054c0:	40015000 	.word	0x40015000

080054c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	2201      	movs	r2, #1
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1a      	ldr	r2, [r3, #32]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	43db      	mvns	r3, r3
 80054e6:	401a      	ands	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	fa01 f303 	lsl.w	r3, r1, r3
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <TIM_ResetCallback+0x84>)
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <TIM_ResetCallback+0x88>)
 8005524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a1c      	ldr	r2, [pc, #112]	; (800559c <TIM_ResetCallback+0x8c>)
 800552c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <TIM_ResetCallback+0x90>)
 8005534:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a1a      	ldr	r2, [pc, #104]	; (80055a4 <TIM_ResetCallback+0x94>)
 800553c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a19      	ldr	r2, [pc, #100]	; (80055a8 <TIM_ResetCallback+0x98>)
 8005544:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a18      	ldr	r2, [pc, #96]	; (80055ac <TIM_ResetCallback+0x9c>)
 800554c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a17      	ldr	r2, [pc, #92]	; (80055b0 <TIM_ResetCallback+0xa0>)
 8005554:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <TIM_ResetCallback+0xa4>)
 800555c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <TIM_ResetCallback+0xa8>)
 8005564:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a14      	ldr	r2, [pc, #80]	; (80055bc <TIM_ResetCallback+0xac>)
 800556c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a13      	ldr	r2, [pc, #76]	; (80055c0 <TIM_ResetCallback+0xb0>)
 8005574:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a12      	ldr	r2, [pc, #72]	; (80055c4 <TIM_ResetCallback+0xb4>)
 800557c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#if defined(TIM_BDTR_BK2E)
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a11      	ldr	r2, [pc, #68]	; (80055c8 <TIM_ResetCallback+0xb8>)
 8005584:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* TIM_BDTR_BK2E */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	08004cb5 	.word	0x08004cb5
 8005598:	08004cc9 	.word	0x08004cc9
 800559c:	08004d41 	.word	0x08004d41
 80055a0:	08004d55 	.word	0x08004d55
 80055a4:	08004cf1 	.word	0x08004cf1
 80055a8:	08004d05 	.word	0x08004d05
 80055ac:	08004cdd 	.word	0x08004cdd
 80055b0:	08004d19 	.word	0x08004d19
 80055b4:	08004d2d 	.word	0x08004d2d
 80055b8:	08004d69 	.word	0x08004d69
 80055bc:	080057f1 	.word	0x080057f1
 80055c0:	08005805 	.word	0x08005805
 80055c4:	08005819 	.word	0x08005819
 80055c8:	0800582d 	.word	0x0800582d

080055cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e06d      	b.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a30      	ldr	r2, [pc, #192]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d009      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a2f      	ldr	r2, [pc, #188]	; (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d004      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a2d      	ldr	r2, [pc, #180]	; (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d108      	bne.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005628:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d01d      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005660:	d018      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1a      	ldr	r2, [pc, #104]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00e      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d009      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a16      	ldr	r2, [pc, #88]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a11      	ldr	r2, [pc, #68]	; (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d10c      	bne.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800569a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40013400 	.word	0x40013400
 80056d4:	40015000 	.word	0x40015000
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40014000 	.word	0x40014000

080056e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e06a      	b.n	80057d6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	041b      	lsls	r3, r3, #16
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a19      	ldr	r2, [pc, #100]	; (80057e4 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d009      	beq.n	8005798 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a16      	ldr	r2, [pc, #88]	; (80057ec <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d115      	bne.n	80057c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	051b      	lsls	r3, r3, #20
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40015000 	.word	0x40015000

080057f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e040      	b.n	80058d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fc fd94 	bl	8002390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2224      	movs	r2, #36	; 0x24
 800586c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f8c0 	bl	8005a04 <UART_SetConfig>
 8005884:	4603      	mov	r3, r0
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e022      	b.n	80058d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fa8a 	bl	8005db0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fb11 	bl	8005ef4 <UART_CheckIdleState>
 80058d2:	4603      	mov	r3, r0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08a      	sub	sp, #40	; 0x28
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	f040 8082 	bne.w	80059fa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_UART_Transmit+0x26>
 80058fc:	88fb      	ldrh	r3, [r7, #6]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e07a      	b.n	80059fc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_UART_Transmit+0x38>
 8005910:	2302      	movs	r3, #2
 8005912:	e073      	b.n	80059fc <HAL_UART_Transmit+0x120>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2221      	movs	r2, #33	; 0x21
 8005928:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800592a:	f7fc fdf9 	bl	8002520 <HAL_GetTick>
 800592e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	88fa      	ldrh	r2, [r7, #6]
 8005934:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005948:	d108      	bne.n	800595c <HAL_UART_Transmit+0x80>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	e003      	b.n	8005964 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005960:	2300      	movs	r3, #0
 8005962:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800596c:	e02d      	b.n	80059ca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	2180      	movs	r1, #128	; 0x80
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fb04 	bl	8005f86 <UART_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e039      	b.n	80059fc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	881a      	ldrh	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800599a:	b292      	uxth	r2, r2
 800599c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	3302      	adds	r3, #2
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	e008      	b.n	80059b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	781a      	ldrb	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	b292      	uxth	r2, r2
 80059b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	3301      	adds	r3, #1
 80059b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1cb      	bne.n	800596e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2200      	movs	r2, #0
 80059de:	2140      	movs	r1, #64	; 0x40
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 fad0 	bl	8005f86 <UART_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e005      	b.n	80059fc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e000      	b.n	80059fc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
  }
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b92      	ldr	r3, [pc, #584]	; (8005c78 <UART_SetConfig+0x274>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a80      	ldr	r2, [pc, #512]	; (8005c7c <UART_SetConfig+0x278>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d120      	bne.n	8005ac2 <UART_SetConfig+0xbe>
 8005a80:	4b7f      	ldr	r3, [pc, #508]	; (8005c80 <UART_SetConfig+0x27c>)
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d817      	bhi.n	8005abc <UART_SetConfig+0xb8>
 8005a8c:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0x90>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005aa5 	.word	0x08005aa5
 8005a98:	08005ab1 	.word	0x08005ab1
 8005a9c:	08005ab7 	.word	0x08005ab7
 8005aa0:	08005aab 	.word	0x08005aab
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	77fb      	strb	r3, [r7, #31]
 8005aa8:	e0b5      	b.n	8005c16 <UART_SetConfig+0x212>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	77fb      	strb	r3, [r7, #31]
 8005aae:	e0b2      	b.n	8005c16 <UART_SetConfig+0x212>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	e0af      	b.n	8005c16 <UART_SetConfig+0x212>
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	77fb      	strb	r3, [r7, #31]
 8005aba:	e0ac      	b.n	8005c16 <UART_SetConfig+0x212>
 8005abc:	2310      	movs	r3, #16
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e0a9      	b.n	8005c16 <UART_SetConfig+0x212>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a6f      	ldr	r2, [pc, #444]	; (8005c84 <UART_SetConfig+0x280>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d124      	bne.n	8005b16 <UART_SetConfig+0x112>
 8005acc:	4b6c      	ldr	r3, [pc, #432]	; (8005c80 <UART_SetConfig+0x27c>)
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ad4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ad8:	d011      	beq.n	8005afe <UART_SetConfig+0xfa>
 8005ada:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ade:	d817      	bhi.n	8005b10 <UART_SetConfig+0x10c>
 8005ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ae4:	d011      	beq.n	8005b0a <UART_SetConfig+0x106>
 8005ae6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aea:	d811      	bhi.n	8005b10 <UART_SetConfig+0x10c>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <UART_SetConfig+0xf4>
 8005af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af4:	d006      	beq.n	8005b04 <UART_SetConfig+0x100>
 8005af6:	e00b      	b.n	8005b10 <UART_SetConfig+0x10c>
 8005af8:	2300      	movs	r3, #0
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e08b      	b.n	8005c16 <UART_SetConfig+0x212>
 8005afe:	2302      	movs	r3, #2
 8005b00:	77fb      	strb	r3, [r7, #31]
 8005b02:	e088      	b.n	8005c16 <UART_SetConfig+0x212>
 8005b04:	2304      	movs	r3, #4
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	e085      	b.n	8005c16 <UART_SetConfig+0x212>
 8005b0a:	2308      	movs	r3, #8
 8005b0c:	77fb      	strb	r3, [r7, #31]
 8005b0e:	e082      	b.n	8005c16 <UART_SetConfig+0x212>
 8005b10:	2310      	movs	r3, #16
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e07f      	b.n	8005c16 <UART_SetConfig+0x212>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a5b      	ldr	r2, [pc, #364]	; (8005c88 <UART_SetConfig+0x284>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d124      	bne.n	8005b6a <UART_SetConfig+0x166>
 8005b20:	4b57      	ldr	r3, [pc, #348]	; (8005c80 <UART_SetConfig+0x27c>)
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b2c:	d011      	beq.n	8005b52 <UART_SetConfig+0x14e>
 8005b2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b32:	d817      	bhi.n	8005b64 <UART_SetConfig+0x160>
 8005b34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b38:	d011      	beq.n	8005b5e <UART_SetConfig+0x15a>
 8005b3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b3e:	d811      	bhi.n	8005b64 <UART_SetConfig+0x160>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <UART_SetConfig+0x148>
 8005b44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b48:	d006      	beq.n	8005b58 <UART_SetConfig+0x154>
 8005b4a:	e00b      	b.n	8005b64 <UART_SetConfig+0x160>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	77fb      	strb	r3, [r7, #31]
 8005b50:	e061      	b.n	8005c16 <UART_SetConfig+0x212>
 8005b52:	2302      	movs	r3, #2
 8005b54:	77fb      	strb	r3, [r7, #31]
 8005b56:	e05e      	b.n	8005c16 <UART_SetConfig+0x212>
 8005b58:	2304      	movs	r3, #4
 8005b5a:	77fb      	strb	r3, [r7, #31]
 8005b5c:	e05b      	b.n	8005c16 <UART_SetConfig+0x212>
 8005b5e:	2308      	movs	r3, #8
 8005b60:	77fb      	strb	r3, [r7, #31]
 8005b62:	e058      	b.n	8005c16 <UART_SetConfig+0x212>
 8005b64:	2310      	movs	r3, #16
 8005b66:	77fb      	strb	r3, [r7, #31]
 8005b68:	e055      	b.n	8005c16 <UART_SetConfig+0x212>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a47      	ldr	r2, [pc, #284]	; (8005c8c <UART_SetConfig+0x288>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d124      	bne.n	8005bbe <UART_SetConfig+0x1ba>
 8005b74:	4b42      	ldr	r3, [pc, #264]	; (8005c80 <UART_SetConfig+0x27c>)
 8005b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005b7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b80:	d011      	beq.n	8005ba6 <UART_SetConfig+0x1a2>
 8005b82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b86:	d817      	bhi.n	8005bb8 <UART_SetConfig+0x1b4>
 8005b88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b8c:	d011      	beq.n	8005bb2 <UART_SetConfig+0x1ae>
 8005b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b92:	d811      	bhi.n	8005bb8 <UART_SetConfig+0x1b4>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <UART_SetConfig+0x19c>
 8005b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b9c:	d006      	beq.n	8005bac <UART_SetConfig+0x1a8>
 8005b9e:	e00b      	b.n	8005bb8 <UART_SetConfig+0x1b4>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e037      	b.n	8005c16 <UART_SetConfig+0x212>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	77fb      	strb	r3, [r7, #31]
 8005baa:	e034      	b.n	8005c16 <UART_SetConfig+0x212>
 8005bac:	2304      	movs	r3, #4
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e031      	b.n	8005c16 <UART_SetConfig+0x212>
 8005bb2:	2308      	movs	r3, #8
 8005bb4:	77fb      	strb	r3, [r7, #31]
 8005bb6:	e02e      	b.n	8005c16 <UART_SetConfig+0x212>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e02b      	b.n	8005c16 <UART_SetConfig+0x212>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a33      	ldr	r2, [pc, #204]	; (8005c90 <UART_SetConfig+0x28c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d124      	bne.n	8005c12 <UART_SetConfig+0x20e>
 8005bc8:	4b2d      	ldr	r3, [pc, #180]	; (8005c80 <UART_SetConfig+0x27c>)
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005bd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bd4:	d011      	beq.n	8005bfa <UART_SetConfig+0x1f6>
 8005bd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bda:	d817      	bhi.n	8005c0c <UART_SetConfig+0x208>
 8005bdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005be0:	d011      	beq.n	8005c06 <UART_SetConfig+0x202>
 8005be2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005be6:	d811      	bhi.n	8005c0c <UART_SetConfig+0x208>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <UART_SetConfig+0x1f0>
 8005bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bf0:	d006      	beq.n	8005c00 <UART_SetConfig+0x1fc>
 8005bf2:	e00b      	b.n	8005c0c <UART_SetConfig+0x208>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	77fb      	strb	r3, [r7, #31]
 8005bf8:	e00d      	b.n	8005c16 <UART_SetConfig+0x212>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	77fb      	strb	r3, [r7, #31]
 8005bfe:	e00a      	b.n	8005c16 <UART_SetConfig+0x212>
 8005c00:	2304      	movs	r3, #4
 8005c02:	77fb      	strb	r3, [r7, #31]
 8005c04:	e007      	b.n	8005c16 <UART_SetConfig+0x212>
 8005c06:	2308      	movs	r3, #8
 8005c08:	77fb      	strb	r3, [r7, #31]
 8005c0a:	e004      	b.n	8005c16 <UART_SetConfig+0x212>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e001      	b.n	8005c16 <UART_SetConfig+0x212>
 8005c12:	2310      	movs	r3, #16
 8005c14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1e:	d16c      	bne.n	8005cfa <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8005c20:	7ffb      	ldrb	r3, [r7, #31]
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d838      	bhi.n	8005c98 <UART_SetConfig+0x294>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0x228>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c59 	.word	0x08005c59
 8005c34:	08005c61 	.word	0x08005c61
 8005c38:	08005c99 	.word	0x08005c99
 8005c3c:	08005c67 	.word	0x08005c67
 8005c40:	08005c99 	.word	0x08005c99
 8005c44:	08005c99 	.word	0x08005c99
 8005c48:	08005c99 	.word	0x08005c99
 8005c4c:	08005c6f 	.word	0x08005c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c50:	f7fe f96c 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
 8005c54:	61b8      	str	r0, [r7, #24]
        break;
 8005c56:	e024      	b.n	8005ca2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c58:	f7fe f98a 	bl	8003f70 <HAL_RCC_GetPCLK2Freq>
 8005c5c:	61b8      	str	r0, [r7, #24]
        break;
 8005c5e:	e020      	b.n	8005ca2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c60:	4b0c      	ldr	r3, [pc, #48]	; (8005c94 <UART_SetConfig+0x290>)
 8005c62:	61bb      	str	r3, [r7, #24]
        break;
 8005c64:	e01d      	b.n	8005ca2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c66:	f7fe f8eb 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8005c6a:	61b8      	str	r0, [r7, #24]
        break;
 8005c6c:	e019      	b.n	8005ca2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c72:	61bb      	str	r3, [r7, #24]
        break;
 8005c74:	e015      	b.n	8005ca2 <UART_SetConfig+0x29e>
 8005c76:	bf00      	nop
 8005c78:	efff69f3 	.word	0xefff69f3
 8005c7c:	40013800 	.word	0x40013800
 8005c80:	40021000 	.word	0x40021000
 8005c84:	40004400 	.word	0x40004400
 8005c88:	40004800 	.word	0x40004800
 8005c8c:	40004c00 	.word	0x40004c00
 8005c90:	40005000 	.word	0x40005000
 8005c94:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	77bb      	strb	r3, [r7, #30]
        break;
 8005ca0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d075      	beq.n	8005d94 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	005a      	lsls	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	441a      	add	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2b0f      	cmp	r3, #15
 8005cc4:	d916      	bls.n	8005cf4 <UART_SetConfig+0x2f0>
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ccc:	d212      	bcs.n	8005cf4 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f023 030f 	bic.w	r3, r3, #15
 8005cd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	085b      	lsrs	r3, r3, #1
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	89fb      	ldrh	r3, [r7, #14]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	89fa      	ldrh	r2, [r7, #14]
 8005cf0:	60da      	str	r2, [r3, #12]
 8005cf2:	e04f      	b.n	8005d94 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	77bb      	strb	r3, [r7, #30]
 8005cf8:	e04c      	b.n	8005d94 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cfa:	7ffb      	ldrb	r3, [r7, #31]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d828      	bhi.n	8005d52 <UART_SetConfig+0x34e>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <UART_SetConfig+0x304>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d35 	.word	0x08005d35
 8005d10:	08005d3d 	.word	0x08005d3d
 8005d14:	08005d53 	.word	0x08005d53
 8005d18:	08005d43 	.word	0x08005d43
 8005d1c:	08005d53 	.word	0x08005d53
 8005d20:	08005d53 	.word	0x08005d53
 8005d24:	08005d53 	.word	0x08005d53
 8005d28:	08005d4b 	.word	0x08005d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2c:	f7fe f8fe 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
 8005d30:	61b8      	str	r0, [r7, #24]
        break;
 8005d32:	e013      	b.n	8005d5c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d34:	f7fe f91c 	bl	8003f70 <HAL_RCC_GetPCLK2Freq>
 8005d38:	61b8      	str	r0, [r7, #24]
        break;
 8005d3a:	e00f      	b.n	8005d5c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d3c:	4b1b      	ldr	r3, [pc, #108]	; (8005dac <UART_SetConfig+0x3a8>)
 8005d3e:	61bb      	str	r3, [r7, #24]
        break;
 8005d40:	e00c      	b.n	8005d5c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d42:	f7fe f87d 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8005d46:	61b8      	str	r0, [r7, #24]
        break;
 8005d48:	e008      	b.n	8005d5c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4e:	61bb      	str	r3, [r7, #24]
        break;
 8005d50:	e004      	b.n	8005d5c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	77bb      	strb	r3, [r7, #30]
        break;
 8005d5a:	bf00      	nop
    }

    if (pclk != 0U)
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d018      	beq.n	8005d94 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	085a      	lsrs	r2, r3, #1
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	441a      	add	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2b0f      	cmp	r3, #15
 8005d7c:	d908      	bls.n	8005d90 <UART_SetConfig+0x38c>
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d84:	d204      	bcs.n	8005d90 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	60da      	str	r2, [r3, #12]
 8005d8e:	e001      	b.n	8005d94 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005da0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3720      	adds	r7, #32
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	007a1200 	.word	0x007a1200

08005db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01a      	beq.n	8005ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eae:	d10a      	bne.n	8005ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	605a      	str	r2, [r3, #4]
  }
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f04:	f7fc fb0c 	bl	8002520 <HAL_GetTick>
 8005f08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d10e      	bne.n	8005f36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f82d 	bl	8005f86 <UART_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e023      	b.n	8005f7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d10e      	bne.n	8005f62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f817 	bl	8005f86 <UART_WaitOnFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e00d      	b.n	8005f7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b09c      	sub	sp, #112	; 0x70
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	4613      	mov	r3, r2
 8005f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f96:	e0a5      	b.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	f000 80a1 	beq.w	80060e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa2:	f7fc fabd 	bl	8002520 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d302      	bcc.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d13e      	bne.n	8006036 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fcc:	667b      	str	r3, [r7, #100]	; 0x64
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fd8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e6      	bne.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3308      	adds	r3, #8
 8005ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	f023 0301 	bic.w	r3, r3, #1
 8006000:	663b      	str	r3, [r7, #96]	; 0x60
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3308      	adds	r3, #8
 8006008:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800600a:	64ba      	str	r2, [r7, #72]	; 0x48
 800600c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e5      	bne.n	8005fea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e067      	b.n	8006106 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d04f      	beq.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800604e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006052:	d147      	bne.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800605c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006072:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607c:	637b      	str	r3, [r7, #52]	; 0x34
 800607e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e6      	bne.n	800605e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3308      	adds	r3, #8
 8006096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	613b      	str	r3, [r7, #16]
   return(result);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f023 0301 	bic.w	r3, r3, #1
 80060a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3308      	adds	r3, #8
 80060ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060b0:	623a      	str	r2, [r7, #32]
 80060b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	69f9      	ldr	r1, [r7, #28]
 80060b6:	6a3a      	ldr	r2, [r7, #32]
 80060b8:	e841 2300 	strex	r3, r2, [r1]
 80060bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e5      	bne.n	8006090 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2220      	movs	r2, #32
 80060c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e010      	b.n	8006106 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4013      	ands	r3, r2
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	429a      	cmp	r2, r3
 8006100:	f43f af4a 	beq.w	8005f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3770      	adds	r7, #112	; 0x70
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <__libc_init_array>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4d0d      	ldr	r5, [pc, #52]	; (8006148 <__libc_init_array+0x38>)
 8006114:	4c0d      	ldr	r4, [pc, #52]	; (800614c <__libc_init_array+0x3c>)
 8006116:	1b64      	subs	r4, r4, r5
 8006118:	10a4      	asrs	r4, r4, #2
 800611a:	2600      	movs	r6, #0
 800611c:	42a6      	cmp	r6, r4
 800611e:	d109      	bne.n	8006134 <__libc_init_array+0x24>
 8006120:	4d0b      	ldr	r5, [pc, #44]	; (8006150 <__libc_init_array+0x40>)
 8006122:	4c0c      	ldr	r4, [pc, #48]	; (8006154 <__libc_init_array+0x44>)
 8006124:	f000 f87c 	bl	8006220 <_init>
 8006128:	1b64      	subs	r4, r4, r5
 800612a:	10a4      	asrs	r4, r4, #2
 800612c:	2600      	movs	r6, #0
 800612e:	42a6      	cmp	r6, r4
 8006130:	d105      	bne.n	800613e <__libc_init_array+0x2e>
 8006132:	bd70      	pop	{r4, r5, r6, pc}
 8006134:	f855 3b04 	ldr.w	r3, [r5], #4
 8006138:	4798      	blx	r3
 800613a:	3601      	adds	r6, #1
 800613c:	e7ee      	b.n	800611c <__libc_init_array+0xc>
 800613e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006142:	4798      	blx	r3
 8006144:	3601      	adds	r6, #1
 8006146:	e7f2      	b.n	800612e <__libc_init_array+0x1e>
 8006148:	080065e0 	.word	0x080065e0
 800614c:	080065e0 	.word	0x080065e0
 8006150:	080065e0 	.word	0x080065e0
 8006154:	080065e4 	.word	0x080065e4

08006158 <__itoa>:
 8006158:	1e93      	subs	r3, r2, #2
 800615a:	2b22      	cmp	r3, #34	; 0x22
 800615c:	b510      	push	{r4, lr}
 800615e:	460c      	mov	r4, r1
 8006160:	d904      	bls.n	800616c <__itoa+0x14>
 8006162:	2300      	movs	r3, #0
 8006164:	700b      	strb	r3, [r1, #0]
 8006166:	461c      	mov	r4, r3
 8006168:	4620      	mov	r0, r4
 800616a:	bd10      	pop	{r4, pc}
 800616c:	2a0a      	cmp	r2, #10
 800616e:	d109      	bne.n	8006184 <__itoa+0x2c>
 8006170:	2800      	cmp	r0, #0
 8006172:	da07      	bge.n	8006184 <__itoa+0x2c>
 8006174:	232d      	movs	r3, #45	; 0x2d
 8006176:	700b      	strb	r3, [r1, #0]
 8006178:	4240      	negs	r0, r0
 800617a:	2101      	movs	r1, #1
 800617c:	4421      	add	r1, r4
 800617e:	f000 f80d 	bl	800619c <__utoa>
 8006182:	e7f1      	b.n	8006168 <__itoa+0x10>
 8006184:	2100      	movs	r1, #0
 8006186:	e7f9      	b.n	800617c <__itoa+0x24>

08006188 <itoa>:
 8006188:	f7ff bfe6 	b.w	8006158 <__itoa>

0800618c <memset>:
 800618c:	4402      	add	r2, r0
 800618e:	4603      	mov	r3, r0
 8006190:	4293      	cmp	r3, r2
 8006192:	d100      	bne.n	8006196 <memset+0xa>
 8006194:	4770      	bx	lr
 8006196:	f803 1b01 	strb.w	r1, [r3], #1
 800619a:	e7f9      	b.n	8006190 <memset+0x4>

0800619c <__utoa>:
 800619c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619e:	4c1f      	ldr	r4, [pc, #124]	; (800621c <__utoa+0x80>)
 80061a0:	b08b      	sub	sp, #44	; 0x2c
 80061a2:	4605      	mov	r5, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	466e      	mov	r6, sp
 80061a8:	f104 0c20 	add.w	ip, r4, #32
 80061ac:	6820      	ldr	r0, [r4, #0]
 80061ae:	6861      	ldr	r1, [r4, #4]
 80061b0:	4637      	mov	r7, r6
 80061b2:	c703      	stmia	r7!, {r0, r1}
 80061b4:	3408      	adds	r4, #8
 80061b6:	4564      	cmp	r4, ip
 80061b8:	463e      	mov	r6, r7
 80061ba:	d1f7      	bne.n	80061ac <__utoa+0x10>
 80061bc:	7921      	ldrb	r1, [r4, #4]
 80061be:	7139      	strb	r1, [r7, #4]
 80061c0:	1e91      	subs	r1, r2, #2
 80061c2:	6820      	ldr	r0, [r4, #0]
 80061c4:	6038      	str	r0, [r7, #0]
 80061c6:	2922      	cmp	r1, #34	; 0x22
 80061c8:	f04f 0100 	mov.w	r1, #0
 80061cc:	d904      	bls.n	80061d8 <__utoa+0x3c>
 80061ce:	7019      	strb	r1, [r3, #0]
 80061d0:	460b      	mov	r3, r1
 80061d2:	4618      	mov	r0, r3
 80061d4:	b00b      	add	sp, #44	; 0x2c
 80061d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d8:	1e58      	subs	r0, r3, #1
 80061da:	4684      	mov	ip, r0
 80061dc:	fbb5 f7f2 	udiv	r7, r5, r2
 80061e0:	fb02 5617 	mls	r6, r2, r7, r5
 80061e4:	3628      	adds	r6, #40	; 0x28
 80061e6:	446e      	add	r6, sp
 80061e8:	460c      	mov	r4, r1
 80061ea:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80061ee:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80061f2:	462e      	mov	r6, r5
 80061f4:	42b2      	cmp	r2, r6
 80061f6:	f101 0101 	add.w	r1, r1, #1
 80061fa:	463d      	mov	r5, r7
 80061fc:	d9ee      	bls.n	80061dc <__utoa+0x40>
 80061fe:	2200      	movs	r2, #0
 8006200:	545a      	strb	r2, [r3, r1]
 8006202:	1919      	adds	r1, r3, r4
 8006204:	1aa5      	subs	r5, r4, r2
 8006206:	42aa      	cmp	r2, r5
 8006208:	dae3      	bge.n	80061d2 <__utoa+0x36>
 800620a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800620e:	780e      	ldrb	r6, [r1, #0]
 8006210:	7006      	strb	r6, [r0, #0]
 8006212:	3201      	adds	r2, #1
 8006214:	f801 5901 	strb.w	r5, [r1], #-1
 8006218:	e7f4      	b.n	8006204 <__utoa+0x68>
 800621a:	bf00      	nop
 800621c:	080065b8 	.word	0x080065b8

08006220 <_init>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	bf00      	nop
 8006224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006226:	bc08      	pop	{r3}
 8006228:	469e      	mov	lr, r3
 800622a:	4770      	bx	lr

0800622c <_fini>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	bf00      	nop
 8006230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006232:	bc08      	pop	{r3}
 8006234:	469e      	mov	lr, r3
 8006236:	4770      	bx	lr
